
LAB3_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003224  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003330  08003330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003360  08003360  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003360  08003360  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003360  08003360  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003360  08003360  00013360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003364  08003364  00013364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000074  080033dc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  080033dc  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f69  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e38  00000000  00000000  0002a006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002be40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002c920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017307  00000000  00000000  0002d2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e402  00000000  00000000  000445d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082864  00000000  00000000  000529d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d523d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d4  00000000  00000000  000d5290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003318 	.word	0x08003318

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003318 	.word	0x08003318

0800014c <isButtonPressed>:
int KeyReg2[NUM_BUTTONS]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int KeyReg3[NUM_BUTTONS]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int TimerForKeyPress[NUM_BUTTONS]={200,200,200};
GPIO_TypeDef* Button_GPIO_Port[NUM_BUTTONS]={Button0_GPIO_Port,Button1_GPIO_Port,Button2_GPIO_Port};
uint16_t Button_Pin[NUM_BUTTONS]={Button0_Pin,Button1_Pin,Button2_Pin};
int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(Button_flag[index]==1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		Button_flag[index]=0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000090 	.word	0x20000090

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	Button_flag[index]=1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000090 	.word	0x20000090

080001a0 <getKeyInput>:
//				KeyReg3=NORMAL_STATE;
//			}
//		}
//	}
//}
void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e06d      	b.n	8000288 <getKeyInput+0xe8>
		KeyReg0[i] = KeyReg1[i];
 80001ac:	4a3a      	ldr	r2, [pc, #232]	; (8000298 <getKeyInput+0xf8>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4939      	ldr	r1, [pc, #228]	; (800029c <getKeyInput+0xfc>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001bc:	4a38      	ldr	r2, [pc, #224]	; (80002a0 <getKeyInput+0x100>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4934      	ldr	r1, [pc, #208]	; (8000298 <getKeyInput+0xf8>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(Button_GPIO_Port[i], Button_Pin[i]); // Assuming GPIO ports/pins are in arrays
 80001cc:	4a35      	ldr	r2, [pc, #212]	; (80002a4 <getKeyInput+0x104>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4934      	ldr	r1, [pc, #208]	; (80002a8 <getKeyInput+0x108>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001dc:	4619      	mov	r1, r3
 80001de:	4610      	mov	r0, r2
 80001e0:	f002 f86e 	bl	80022c0 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a2d      	ldr	r2, [pc, #180]	; (80002a0 <getKeyInput+0x100>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80001f0:	4a2a      	ldr	r2, [pc, #168]	; (800029c <getKeyInput+0xfc>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4927      	ldr	r1, [pc, #156]	; (8000298 <getKeyInput+0xf8>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d13e      	bne.n	8000282 <getKeyInput+0xe2>
 8000204:	4a24      	ldr	r2, [pc, #144]	; (8000298 <getKeyInput+0xf8>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4924      	ldr	r1, [pc, #144]	; (80002a0 <getKeyInput+0x100>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d134      	bne.n	8000282 <getKeyInput+0xe2>
			if (KeyReg3[i] != KeyReg2[i]) {
 8000218:	4a24      	ldr	r2, [pc, #144]	; (80002ac <getKeyInput+0x10c>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	491f      	ldr	r1, [pc, #124]	; (80002a0 <getKeyInput+0x100>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d016      	beq.n	800025a <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 800022c:	4a1c      	ldr	r2, [pc, #112]	; (80002a0 <getKeyInput+0x100>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	491d      	ldr	r1, [pc, #116]	; (80002ac <getKeyInput+0x10c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE) {
 800023c:	4a18      	ldr	r2, [pc, #96]	; (80002a0 <getKeyInput+0x100>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d11c      	bne.n	8000282 <getKeyInput+0xe2>
					subKeyProcess(i);  // Assuming a modified subKeyProcess that accepts button index
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f7ff ff99 	bl	8000180 <subKeyProcess>
					TimerForKeyPress[i] = 200;
 800024e:	4a18      	ldr	r2, [pc, #96]	; (80002b0 <getKeyInput+0x110>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	21c8      	movs	r1, #200	; 0xc8
 8000254:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000258:	e013      	b.n	8000282 <getKeyInput+0xe2>
				}
			} else {
				TimerForKeyPress[i]--;
 800025a:	4a15      	ldr	r2, [pc, #84]	; (80002b0 <getKeyInput+0x110>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	1e5a      	subs	r2, r3, #1
 8000264:	4912      	ldr	r1, [pc, #72]	; (80002b0 <getKeyInput+0x110>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimerForKeyPress[i] == 0) {
 800026c:	4a10      	ldr	r2, [pc, #64]	; (80002b0 <getKeyInput+0x110>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d104      	bne.n	8000282 <getKeyInput+0xe2>
					KeyReg3[i] = NORMAL_STATE;
 8000278:	4a0c      	ldr	r2, [pc, #48]	; (80002ac <getKeyInput+0x10c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2101      	movs	r1, #1
 800027e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	3301      	adds	r3, #1
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b02      	cmp	r3, #2
 800028c:	dd8e      	ble.n	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	2000000c 	.word	0x2000000c
 800029c:	20000000 	.word	0x20000000
 80002a0:	20000018 	.word	0x20000018
 80002a4:	2000003c 	.word	0x2000003c
 80002a8:	20000048 	.word	0x20000048
 80002ac:	20000024 	.word	0x20000024
 80002b0:	20000030 	.word	0x20000030

080002b4 <fsm_automatic_run>:
//			break;
//		default:
//			break;
//	}
//}
void fsm_automatic_run(){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	switch(status){
 80002b8:	4bc3      	ldr	r3, [pc, #780]	; (80005c8 <fsm_automatic_run+0x314>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	3b01      	subs	r3, #1
 80002be:	2b04      	cmp	r3, #4
 80002c0:	f200 81f7 	bhi.w	80006b2 <fsm_automatic_run+0x3fe>
 80002c4:	a201      	add	r2, pc, #4	; (adr r2, 80002cc <fsm_automatic_run+0x18>)
 80002c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ca:	bf00      	nop
 80002cc:	080002e1 	.word	0x080002e1
 80002d0:	080003a3 	.word	0x080003a3
 80002d4:	08000453 	.word	0x08000453
 80002d8:	0800050f 	.word	0x0800050f
 80002dc:	080005f9 	.word	0x080005f9
		case INIT:
			 //  counter=0;
               set_led();
 80002e0:	f001 fc00 	bl	8001ae4 <set_led>
               set_led7_segement();
 80002e4:	f000 fe18 	bl	8000f18 <set_led7_segement>
       		if(counterred13==(countergreen13+counteryellow13)){
 80002e8:	4bb8      	ldr	r3, [pc, #736]	; (80005cc <fsm_automatic_run+0x318>)
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	4bb8      	ldr	r3, [pc, #736]	; (80005d0 <fsm_automatic_run+0x31c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	441a      	add	r2, r3
 80002f2:	4bb8      	ldr	r3, [pc, #736]	; (80005d4 <fsm_automatic_run+0x320>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d129      	bne.n	800034e <fsm_automatic_run+0x9a>
       			a=counterred13;
 80002fa:	4bb6      	ldr	r3, [pc, #728]	; (80005d4 <fsm_automatic_run+0x320>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4ab6      	ldr	r2, [pc, #728]	; (80005d8 <fsm_automatic_run+0x324>)
 8000300:	6013      	str	r3, [r2, #0]
       			b=countergreen13;
 8000302:	4bb2      	ldr	r3, [pc, #712]	; (80005cc <fsm_automatic_run+0x318>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4ab5      	ldr	r2, [pc, #724]	; (80005dc <fsm_automatic_run+0x328>)
 8000308:	6013      	str	r3, [r2, #0]
       			c=counteryellow13;
 800030a:	4bb1      	ldr	r3, [pc, #708]	; (80005d0 <fsm_automatic_run+0x31c>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4ab4      	ldr	r2, [pc, #720]	; (80005e0 <fsm_automatic_run+0x32c>)
 8000310:	6013      	str	r3, [r2, #0]
       			idx_led13=0;
 8000312:	4bb4      	ldr	r3, [pc, #720]	; (80005e4 <fsm_automatic_run+0x330>)
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
       			status=AUTO_RED1_GREEN2;
 8000318:	4bab      	ldr	r3, [pc, #684]	; (80005c8 <fsm_automatic_run+0x314>)
 800031a:	2202      	movs	r2, #2
 800031c:	601a      	str	r2, [r3, #0]
       			counter=0;
 800031e:	4bb2      	ldr	r3, [pc, #712]	; (80005e8 <fsm_automatic_run+0x334>)
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
       			setTimer(0, b*1000);
 8000324:	4bad      	ldr	r3, [pc, #692]	; (80005dc <fsm_automatic_run+0x328>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	4619      	mov	r1, r3
 8000332:	2000      	movs	r0, #0
 8000334:	f001 fade 	bl	80018f4 <setTimer>
       			setTimer(1, 487);
 8000338:	f240 11e7 	movw	r1, #487	; 0x1e7
 800033c:	2001      	movs	r0, #1
 800033e:	f001 fad9 	bl	80018f4 <setTimer>
       			setTimer(2, 1000);
 8000342:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000346:	2002      	movs	r0, #2
 8000348:	f001 fad4 	bl	80018f4 <setTimer>
       		}
//               status=AUTO_RED1_GREEN2;
//               setTimer(0, b*1000);
//               setTimer(1, 487);
//               setTimer(2, 1000);
			break;
 800034c:	e1ba      	b.n	80006c4 <fsm_automatic_run+0x410>
       			counterred13=a;
 800034e:	4ba2      	ldr	r3, [pc, #648]	; (80005d8 <fsm_automatic_run+0x324>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4aa0      	ldr	r2, [pc, #640]	; (80005d4 <fsm_automatic_run+0x320>)
 8000354:	6013      	str	r3, [r2, #0]
       			countergreen13=b;
 8000356:	4ba1      	ldr	r3, [pc, #644]	; (80005dc <fsm_automatic_run+0x328>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a9c      	ldr	r2, [pc, #624]	; (80005cc <fsm_automatic_run+0x318>)
 800035c:	6013      	str	r3, [r2, #0]
       			counteryellow13=c;
 800035e:	4ba0      	ldr	r3, [pc, #640]	; (80005e0 <fsm_automatic_run+0x32c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a9b      	ldr	r2, [pc, #620]	; (80005d0 <fsm_automatic_run+0x31c>)
 8000364:	6013      	str	r3, [r2, #0]
       			idx_led13=0;
 8000366:	4b9f      	ldr	r3, [pc, #636]	; (80005e4 <fsm_automatic_run+0x330>)
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
       			status=AUTO_RED1_GREEN2;
 800036c:	4b96      	ldr	r3, [pc, #600]	; (80005c8 <fsm_automatic_run+0x314>)
 800036e:	2202      	movs	r2, #2
 8000370:	601a      	str	r2, [r3, #0]
       			counter=0;
 8000372:	4b9d      	ldr	r3, [pc, #628]	; (80005e8 <fsm_automatic_run+0x334>)
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
                   setTimer(0, b*1000);
 8000378:	4b98      	ldr	r3, [pc, #608]	; (80005dc <fsm_automatic_run+0x328>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000380:	fb02 f303 	mul.w	r3, r2, r3
 8000384:	4619      	mov	r1, r3
 8000386:	2000      	movs	r0, #0
 8000388:	f001 fab4 	bl	80018f4 <setTimer>
                   setTimer(1, 487);
 800038c:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000390:	2001      	movs	r0, #1
 8000392:	f001 faaf 	bl	80018f4 <setTimer>
                   setTimer(2, 1000);
 8000396:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800039a:	2002      	movs	r0, #2
 800039c:	f001 faaa 	bl	80018f4 <setTimer>
			break;
 80003a0:	e190      	b.n	80006c4 <fsm_automatic_run+0x410>
		case AUTO_RED1_GREEN2:
			LED_RED1_GREEN2();
 80003a2:	f001 fbed 	bl	8001b80 <LED_RED1_GREEN2>
			if(counter==0){
 80003a6:	4b90      	ldr	r3, [pc, #576]	; (80005e8 <fsm_automatic_run+0x334>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d104      	bne.n	80003b8 <fsm_automatic_run+0x104>
			led7_segment_run13();
 80003ae:	f000 ff01 	bl	80011b4 <led7_segment_run13>
			counter=1;
 80003b2:	4b8d      	ldr	r3, [pc, #564]	; (80005e8 <fsm_automatic_run+0x334>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	601a      	str	r2, [r3, #0]
			}
			if(isTimerExpired(1)==1){
 80003b8:	2001      	movs	r0, #1
 80003ba:	f001 fabb 	bl	8001934 <isTimerExpired>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d106      	bne.n	80003d2 <fsm_automatic_run+0x11e>
				led7_segment_run02();
 80003c4:	f000 fed2 	bl	800116c <led7_segment_run02>
				setTimer(1, 487);
 80003c8:	f240 11e7 	movw	r1, #487	; 0x1e7
 80003cc:	2001      	movs	r0, #1
 80003ce:	f001 fa91 	bl	80018f4 <setTimer>
			}
			if(isTimerExpired(2)==1){
 80003d2:	2002      	movs	r0, #2
 80003d4:	f001 faae 	bl	8001934 <isTimerExpired>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d106      	bne.n	80003ec <fsm_automatic_run+0x138>
					led7_segment_run13();
 80003de:	f000 fee9 	bl	80011b4 <led7_segment_run13>
					setTimer(2, 1000);
 80003e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003e6:	2002      	movs	r0, #2
 80003e8:	f001 fa84 	bl	80018f4 <setTimer>
			}
			if(isTimerExpired(0)==1){
 80003ec:	2000      	movs	r0, #0
 80003ee:	f001 faa1 	bl	8001934 <isTimerExpired>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d10c      	bne.n	8000412 <fsm_automatic_run+0x15e>
				status=AUTO_RED1_YELLOW2;
 80003f8:	4b73      	ldr	r3, [pc, #460]	; (80005c8 <fsm_automatic_run+0x314>)
 80003fa:	2203      	movs	r2, #3
 80003fc:	601a      	str	r2, [r3, #0]
				//if(k1==0) {
					setTimer(0, c*1000);
 80003fe:	4b78      	ldr	r3, [pc, #480]	; (80005e0 <fsm_automatic_run+0x32c>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000406:	fb02 f303 	mul.w	r3, r2, r3
 800040a:	4619      	mov	r1, r3
 800040c:	2000      	movs	r0, #0
 800040e:	f001 fa71 	bl	80018f4 <setTimer>
			//	else setTimer(0, (c+1)*1000);
	              // setTimer(1, 500);
	             //  setTimer(2, 1000);
				//counter=0;
			}
			if(isButtonPressed(0)==1){
 8000412:	2000      	movs	r0, #0
 8000414:	f7ff fe9a 	bl	800014c <isButtonPressed>
 8000418:	4603      	mov	r3, r0
 800041a:	2b01      	cmp	r3, #1
 800041c:	f040 814b 	bne.w	80006b6 <fsm_automatic_run+0x402>
		//		 HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
				status=MAN_RED;
 8000420:	4b69      	ldr	r3, [pc, #420]	; (80005c8 <fsm_automatic_run+0x314>)
 8000422:	220c      	movs	r2, #12
 8000424:	601a      	str	r2, [r3, #0]
			//	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
				setTimer(1, 487);
 8000426:	f240 11e7 	movw	r1, #487	; 0x1e7
 800042a:	2001      	movs	r0, #1
 800042c:	f001 fa62 	bl	80018f4 <setTimer>
				setTimer(2, 1000);
 8000430:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000434:	2002      	movs	r0, #2
 8000436:	f001 fa5d 	bl	80018f4 <setTimer>
				setTimer(3, 500);
 800043a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800043e:	2003      	movs	r0, #3
 8000440:	f001 fa58 	bl	80018f4 <setTimer>
			//	setTimer(4, 10000);
			//	checkstatus=4;
				check=0;
 8000444:	4b69      	ldr	r3, [pc, #420]	; (80005ec <fsm_automatic_run+0x338>)
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
				checksavered=0;
 800044a:	4b69      	ldr	r3, [pc, #420]	; (80005f0 <fsm_automatic_run+0x33c>)
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000450:	e131      	b.n	80006b6 <fsm_automatic_run+0x402>
		case AUTO_RED1_YELLOW2:
			LED_RED1_YELLOW2();
 8000452:	f001 fbb9 	bl	8001bc8 <LED_RED1_YELLOW2>
			if(counter==0){
 8000456:	4b64      	ldr	r3, [pc, #400]	; (80005e8 <fsm_automatic_run+0x334>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d104      	bne.n	8000468 <fsm_automatic_run+0x1b4>
			led7_segment_run13();
 800045e:	f000 fea9 	bl	80011b4 <led7_segment_run13>
			counter=1;
 8000462:	4b61      	ldr	r3, [pc, #388]	; (80005e8 <fsm_automatic_run+0x334>)
 8000464:	2201      	movs	r2, #1
 8000466:	601a      	str	r2, [r3, #0]
			}
			if(isTimerExpired(1)==1){
 8000468:	2001      	movs	r0, #1
 800046a:	f001 fa63 	bl	8001934 <isTimerExpired>
 800046e:	4603      	mov	r3, r0
 8000470:	2b01      	cmp	r3, #1
 8000472:	d106      	bne.n	8000482 <fsm_automatic_run+0x1ce>
				led7_segment_run02();
 8000474:	f000 fe7a 	bl	800116c <led7_segment_run02>
				setTimer(1, 487);
 8000478:	f240 11e7 	movw	r1, #487	; 0x1e7
 800047c:	2001      	movs	r0, #1
 800047e:	f001 fa39 	bl	80018f4 <setTimer>
			}
			if(isTimerExpired(2)==1){
 8000482:	2002      	movs	r0, #2
 8000484:	f001 fa56 	bl	8001934 <isTimerExpired>
 8000488:	4603      	mov	r3, r0
 800048a:	2b01      	cmp	r3, #1
 800048c:	d106      	bne.n	800049c <fsm_automatic_run+0x1e8>
							led7_segment_run13();
 800048e:	f000 fe91 	bl	80011b4 <led7_segment_run13>
							setTimer(2, 1000);
 8000492:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000496:	2002      	movs	r0, #2
 8000498:	f001 fa2c 	bl	80018f4 <setTimer>
			}
			if(isTimerExpired(0)==1){
 800049c:	2000      	movs	r0, #0
 800049e:	f001 fa49 	bl	8001934 <isTimerExpired>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d10d      	bne.n	80004c4 <fsm_automatic_run+0x210>
				status=AUTO_GREEN1_RED2;
 80004a8:	4b47      	ldr	r3, [pc, #284]	; (80005c8 <fsm_automatic_run+0x314>)
 80004aa:	2204      	movs	r2, #4
 80004ac:	601a      	str	r2, [r3, #0]
				setTimer(0, (b+1)*1000);
 80004ae:	4b4b      	ldr	r3, [pc, #300]	; (80005dc <fsm_automatic_run+0x328>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	3301      	adds	r3, #1
 80004b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004b8:	fb02 f303 	mul.w	r3, r2, r3
 80004bc:	4619      	mov	r1, r3
 80004be:	2000      	movs	r0, #0
 80004c0:	f001 fa18 	bl	80018f4 <setTimer>
			//	setTimer(0, (b)*1000);
	              // counter=0;
	              // setTimer(1, 500);
	             //  setTimer(2, 1000);
			}
			if(isButtonPressed(0)==1){
 80004c4:	2000      	movs	r0, #0
 80004c6:	f7ff fe41 	bl	800014c <isButtonPressed>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	f040 80f4 	bne.w	80006ba <fsm_automatic_run+0x406>
				status=MAN_RED;
 80004d2:	4b3d      	ldr	r3, [pc, #244]	; (80005c8 <fsm_automatic_run+0x314>)
 80004d4:	220c      	movs	r2, #12
 80004d6:	601a      	str	r2, [r3, #0]
				setTimer(1, 487);
 80004d8:	f240 11e7 	movw	r1, #487	; 0x1e7
 80004dc:	2001      	movs	r0, #1
 80004de:	f001 fa09 	bl	80018f4 <setTimer>
				setTimer(2, 1000);
 80004e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004e6:	2002      	movs	r0, #2
 80004e8:	f001 fa04 	bl	80018f4 <setTimer>
				setTimer(3, 500);
 80004ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80004f0:	2003      	movs	r0, #3
 80004f2:	f001 f9ff 	bl	80018f4 <setTimer>
				setTimer(5, 10000);
 80004f6:	f242 7110 	movw	r1, #10000	; 0x2710
 80004fa:	2005      	movs	r0, #5
 80004fc:	f001 f9fa 	bl	80018f4 <setTimer>
				checkstatus=5;
 8000500:	4b3c      	ldr	r3, [pc, #240]	; (80005f4 <fsm_automatic_run+0x340>)
 8000502:	2205      	movs	r2, #5
 8000504:	601a      	str	r2, [r3, #0]
				check=0;
 8000506:	4b39      	ldr	r3, [pc, #228]	; (80005ec <fsm_automatic_run+0x338>)
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
			}
			break;
 800050c:	e0d5      	b.n	80006ba <fsm_automatic_run+0x406>
		case AUTO_GREEN1_RED2:
			LED_GREEN1_RED2();
 800050e:	f001 fb7f 	bl	8001c10 <LED_GREEN1_RED2>
			if(counter==0){
 8000512:	4b35      	ldr	r3, [pc, #212]	; (80005e8 <fsm_automatic_run+0x334>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d104      	bne.n	8000524 <fsm_automatic_run+0x270>
			led7_segment_run13();
 800051a:	f000 fe4b 	bl	80011b4 <led7_segment_run13>
			counter=1;
 800051e:	4b32      	ldr	r3, [pc, #200]	; (80005e8 <fsm_automatic_run+0x334>)
 8000520:	2201      	movs	r2, #1
 8000522:	601a      	str	r2, [r3, #0]
			}
			if(isTimerExpired(1)==1){
 8000524:	2001      	movs	r0, #1
 8000526:	f001 fa05 	bl	8001934 <isTimerExpired>
 800052a:	4603      	mov	r3, r0
 800052c:	2b01      	cmp	r3, #1
 800052e:	d106      	bne.n	800053e <fsm_automatic_run+0x28a>
				led7_segment_run02();
 8000530:	f000 fe1c 	bl	800116c <led7_segment_run02>
				setTimer(1, 487);
 8000534:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000538:	2001      	movs	r0, #1
 800053a:	f001 f9db 	bl	80018f4 <setTimer>
			}
			if(isTimerExpired(2)==1){
 800053e:	2002      	movs	r0, #2
 8000540:	f001 f9f8 	bl	8001934 <isTimerExpired>
 8000544:	4603      	mov	r3, r0
 8000546:	2b01      	cmp	r3, #1
 8000548:	d106      	bne.n	8000558 <fsm_automatic_run+0x2a4>
							led7_segment_run13();
 800054a:	f000 fe33 	bl	80011b4 <led7_segment_run13>
							setTimer(2, 1000);
 800054e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000552:	2002      	movs	r0, #2
 8000554:	f001 f9ce 	bl	80018f4 <setTimer>
			}
			if(isTimerExpired(0)==1){
 8000558:	2000      	movs	r0, #0
 800055a:	f001 f9eb 	bl	8001934 <isTimerExpired>
 800055e:	4603      	mov	r3, r0
 8000560:	2b01      	cmp	r3, #1
 8000562:	d10c      	bne.n	800057e <fsm_automatic_run+0x2ca>
				status=AUTO_YELLOW1_RED2;
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <fsm_automatic_run+0x314>)
 8000566:	2205      	movs	r2, #5
 8000568:	601a      	str	r2, [r3, #0]
//				if(k2==0) {
//					setTimer(0, c*1000);
//					k2=1;
//				}
				 setTimer(0, c*1000);
 800056a:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <fsm_automatic_run+0x32c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000572:	fb02 f303 	mul.w	r3, r2, r3
 8000576:	4619      	mov	r1, r3
 8000578:	2000      	movs	r0, #0
 800057a:	f001 f9bb 	bl	80018f4 <setTimer>
	              // setTimer(1, 500);
	             // setTimer(2, 1000);
	             //  counter=0;
			}
			if(isButtonPressed(0)==1){
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff fde4 	bl	800014c <isButtonPressed>
 8000584:	4603      	mov	r3, r0
 8000586:	2b01      	cmp	r3, #1
 8000588:	f040 8099 	bne.w	80006be <fsm_automatic_run+0x40a>
				status=MAN_RED;
 800058c:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <fsm_automatic_run+0x314>)
 800058e:	220c      	movs	r2, #12
 8000590:	601a      	str	r2, [r3, #0]
				setTimer(1, 487);
 8000592:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000596:	2001      	movs	r0, #1
 8000598:	f001 f9ac 	bl	80018f4 <setTimer>
				setTimer(2, 1000);
 800059c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005a0:	2002      	movs	r0, #2
 80005a2:	f001 f9a7 	bl	80018f4 <setTimer>
				setTimer(3, 500);
 80005a6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005aa:	2003      	movs	r0, #3
 80005ac:	f001 f9a2 	bl	80018f4 <setTimer>
				setTimer(6, 10000);
 80005b0:	f242 7110 	movw	r1, #10000	; 0x2710
 80005b4:	2006      	movs	r0, #6
 80005b6:	f001 f99d 	bl	80018f4 <setTimer>
				checkstatus=6;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <fsm_automatic_run+0x340>)
 80005bc:	2206      	movs	r2, #6
 80005be:	601a      	str	r2, [r3, #0]
				check=0;
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <fsm_automatic_run+0x338>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
			}
			break;
 80005c6:	e07a      	b.n	80006be <fsm_automatic_run+0x40a>
 80005c8:	200000b4 	.word	0x200000b4
 80005cc:	20000058 	.word	0x20000058
 80005d0:	20000054 	.word	0x20000054
 80005d4:	20000050 	.word	0x20000050
 80005d8:	2000005c 	.word	0x2000005c
 80005dc:	20000060 	.word	0x20000060
 80005e0:	20000064 	.word	0x20000064
 80005e4:	200000b8 	.word	0x200000b8
 80005e8:	2000009c 	.word	0x2000009c
 80005ec:	200000a4 	.word	0x200000a4
 80005f0:	200000a8 	.word	0x200000a8
 80005f4:	200000a0 	.word	0x200000a0
//			if(isTimerExpired(0)==1){
//				setTimer(0, c*1000);
//			}
//			break;
		case AUTO_YELLOW1_RED2:
			LED_YELLOW1_RED2();
 80005f8:	f001 fb2e 	bl	8001c58 <LED_YELLOW1_RED2>
			if(counter==0){
 80005fc:	4b32      	ldr	r3, [pc, #200]	; (80006c8 <fsm_automatic_run+0x414>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d104      	bne.n	800060e <fsm_automatic_run+0x35a>
			led7_segment_run13();
 8000604:	f000 fdd6 	bl	80011b4 <led7_segment_run13>
			counter=1;
 8000608:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <fsm_automatic_run+0x414>)
 800060a:	2201      	movs	r2, #1
 800060c:	601a      	str	r2, [r3, #0]
			}
			if(isTimerExpired(1)==1){
 800060e:	2001      	movs	r0, #1
 8000610:	f001 f990 	bl	8001934 <isTimerExpired>
 8000614:	4603      	mov	r3, r0
 8000616:	2b01      	cmp	r3, #1
 8000618:	d106      	bne.n	8000628 <fsm_automatic_run+0x374>
				led7_segment_run02();
 800061a:	f000 fda7 	bl	800116c <led7_segment_run02>
				setTimer(1, 487);
 800061e:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000622:	2001      	movs	r0, #1
 8000624:	f001 f966 	bl	80018f4 <setTimer>
			}
			if(isTimerExpired(2)==1){
 8000628:	2002      	movs	r0, #2
 800062a:	f001 f983 	bl	8001934 <isTimerExpired>
 800062e:	4603      	mov	r3, r0
 8000630:	2b01      	cmp	r3, #1
 8000632:	d106      	bne.n	8000642 <fsm_automatic_run+0x38e>
							led7_segment_run13();
 8000634:	f000 fdbe 	bl	80011b4 <led7_segment_run13>
							setTimer(2, 1000);
 8000638:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800063c:	2002      	movs	r0, #2
 800063e:	f001 f959 	bl	80018f4 <setTimer>
			}
			if(isTimerExpired(0)==1){
 8000642:	2000      	movs	r0, #0
 8000644:	f001 f976 	bl	8001934 <isTimerExpired>
 8000648:	4603      	mov	r3, r0
 800064a:	2b01      	cmp	r3, #1
 800064c:	d10d      	bne.n	800066a <fsm_automatic_run+0x3b6>
				status=AUTO_RED1_GREEN2;
 800064e:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <fsm_automatic_run+0x418>)
 8000650:	2202      	movs	r2, #2
 8000652:	601a      	str	r2, [r3, #0]
				setTimer(0, (b+1)*1000);
 8000654:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <fsm_automatic_run+0x41c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800065e:	fb02 f303 	mul.w	r3, r2, r3
 8000662:	4619      	mov	r1, r3
 8000664:	2000      	movs	r0, #0
 8000666:	f001 f945 	bl	80018f4 <setTimer>
	             //  setTimer(1, 500);
	             //  setTimer(2, 1000);
	            //   setTimer(1, 500);
	            //   setTimer(2, 1000);
			}
			if(isButtonPressed(0)==1){
 800066a:	2000      	movs	r0, #0
 800066c:	f7ff fd6e 	bl	800014c <isButtonPressed>
 8000670:	4603      	mov	r3, r0
 8000672:	2b01      	cmp	r3, #1
 8000674:	d125      	bne.n	80006c2 <fsm_automatic_run+0x40e>
				status=MAN_RED;
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <fsm_automatic_run+0x418>)
 8000678:	220c      	movs	r2, #12
 800067a:	601a      	str	r2, [r3, #0]
				setTimer(1, 487);
 800067c:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000680:	2001      	movs	r0, #1
 8000682:	f001 f937 	bl	80018f4 <setTimer>
				setTimer(2, 1000);
 8000686:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800068a:	2002      	movs	r0, #2
 800068c:	f001 f932 	bl	80018f4 <setTimer>
				setTimer(3, 500);
 8000690:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000694:	2003      	movs	r0, #3
 8000696:	f001 f92d 	bl	80018f4 <setTimer>
				setTimer(7, 10000);
 800069a:	f242 7110 	movw	r1, #10000	; 0x2710
 800069e:	2007      	movs	r0, #7
 80006a0:	f001 f928 	bl	80018f4 <setTimer>
				checkstatus=7;
 80006a4:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <fsm_automatic_run+0x420>)
 80006a6:	2207      	movs	r2, #7
 80006a8:	601a      	str	r2, [r3, #0]
				check=0;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <fsm_automatic_run+0x424>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
			}
			break;
 80006b0:	e007      	b.n	80006c2 <fsm_automatic_run+0x40e>
		default:
			break;
 80006b2:	bf00      	nop
 80006b4:	e006      	b.n	80006c4 <fsm_automatic_run+0x410>
			break;
 80006b6:	bf00      	nop
 80006b8:	e004      	b.n	80006c4 <fsm_automatic_run+0x410>
			break;
 80006ba:	bf00      	nop
 80006bc:	e002      	b.n	80006c4 <fsm_automatic_run+0x410>
			break;
 80006be:	bf00      	nop
 80006c0:	e000      	b.n	80006c4 <fsm_automatic_run+0x410>
			break;
 80006c2:	bf00      	nop
	}
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000009c 	.word	0x2000009c
 80006cc:	200000b4 	.word	0x200000b4
 80006d0:	20000060 	.word	0x20000060
 80006d4:	200000a0 	.word	0x200000a0
 80006d8:	200000a4 	.word	0x200000a4

080006dc <fsm_manual_run>:
 */
#include "fsm_manual.h"
#include "global.h"

//int check=0;
void fsm_manual_run(){
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	switch(status){
 80006e0:	4baa      	ldr	r3, [pc, #680]	; (800098c <fsm_manual_run+0x2b0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b0e      	cmp	r3, #14
 80006e6:	f000 80ec 	beq.w	80008c2 <fsm_manual_run+0x1e6>
 80006ea:	2b0e      	cmp	r3, #14
 80006ec:	f300 8147 	bgt.w	800097e <fsm_manual_run+0x2a2>
 80006f0:	2b0c      	cmp	r3, #12
 80006f2:	d002      	beq.n	80006fa <fsm_manual_run+0x1e>
 80006f4:	2b0d      	cmp	r3, #13
 80006f6:	d071      	beq.n	80007dc <fsm_manual_run+0x100>
//            setTimer(1, 487);
//            setTimer(2, 1000);
//		}
//		break;
	default:
		break;
 80006f8:	e141      	b.n	800097e <fsm_manual_run+0x2a2>
		if(check==0){
 80006fa:	4ba5      	ldr	r3, [pc, #660]	; (8000990 <fsm_manual_run+0x2b4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d106      	bne.n	8000710 <fsm_manual_run+0x34>
			Turn_On_All_LED_RED();
 8000702:	f001 f9fb 	bl	8001afc <Turn_On_All_LED_RED>
			Save_led7RED_segment_run13();
 8000706:	f000 fe8b 	bl	8001420 <Save_led7RED_segment_run13>
			check=1;
 800070a:	4ba1      	ldr	r3, [pc, #644]	; (8000990 <fsm_manual_run+0x2b4>)
 800070c:	2201      	movs	r2, #1
 800070e:	601a      	str	r2, [r3, #0]
		if(isTimerExpired(1)==1){
 8000710:	2001      	movs	r0, #1
 8000712:	f001 f90f 	bl	8001934 <isTimerExpired>
 8000716:	4603      	mov	r3, r0
 8000718:	2b01      	cmp	r3, #1
 800071a:	d106      	bne.n	800072a <fsm_manual_run+0x4e>
			led7_segment_run02();
 800071c:	f000 fd26 	bl	800116c <led7_segment_run02>
			setTimer(1, 487);
 8000720:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000724:	2001      	movs	r0, #1
 8000726:	f001 f8e5 	bl	80018f4 <setTimer>
		if(isTimerExpired(2)==1){
 800072a:	2002      	movs	r0, #2
 800072c:	f001 f902 	bl	8001934 <isTimerExpired>
 8000730:	4603      	mov	r3, r0
 8000732:	2b01      	cmp	r3, #1
 8000734:	d106      	bne.n	8000744 <fsm_manual_run+0x68>
			Save_led7RED_segment_run13();
 8000736:	f000 fe73 	bl	8001420 <Save_led7RED_segment_run13>
			setTimer(2, 1000);
 800073a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800073e:	2002      	movs	r0, #2
 8000740:	f001 f8d8 	bl	80018f4 <setTimer>
		if(isTimerExpired(3)==1){
 8000744:	2003      	movs	r0, #3
 8000746:	f001 f8f5 	bl	8001934 <isTimerExpired>
 800074a:	4603      	mov	r3, r0
 800074c:	2b01      	cmp	r3, #1
 800074e:	d108      	bne.n	8000762 <fsm_manual_run+0x86>
			HAL_GPIO_TogglePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin);
 8000750:	2112      	movs	r1, #18
 8000752:	4890      	ldr	r0, [pc, #576]	; (8000994 <fsm_manual_run+0x2b8>)
 8000754:	f001 fde3 	bl	800231e <HAL_GPIO_TogglePin>
			setTimer(3, 500);
 8000758:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800075c:	2003      	movs	r0, #3
 800075e:	f001 f8c9 	bl	80018f4 <setTimer>
		if(isButtonPressed(0)==1){
 8000762:	2000      	movs	r0, #0
 8000764:	f7ff fcf2 	bl	800014c <isButtonPressed>
 8000768:	4603      	mov	r3, r0
 800076a:	2b01      	cmp	r3, #1
 800076c:	d117      	bne.n	800079e <fsm_manual_run+0xc2>
			status= MAN_GREEN;
 800076e:	4b87      	ldr	r3, [pc, #540]	; (800098c <fsm_manual_run+0x2b0>)
 8000770:	220d      	movs	r2, #13
 8000772:	601a      	str	r2, [r3, #0]
			check=0;
 8000774:	4b86      	ldr	r3, [pc, #536]	; (8000990 <fsm_manual_run+0x2b4>)
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
			setTimer(1, 487);
 800077a:	f240 11e7 	movw	r1, #487	; 0x1e7
 800077e:	2001      	movs	r0, #1
 8000780:	f001 f8b8 	bl	80018f4 <setTimer>
			setTimer(2, 1000);
 8000784:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000788:	2002      	movs	r0, #2
 800078a:	f001 f8b3 	bl	80018f4 <setTimer>
			setTimer(3, 500);
 800078e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000792:	2003      	movs	r0, #3
 8000794:	f001 f8ae 	bl	80018f4 <setTimer>
			checksavegreen=0;
 8000798:	4b7f      	ldr	r3, [pc, #508]	; (8000998 <fsm_manual_run+0x2bc>)
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(1)==1){
 800079e:	2001      	movs	r0, #1
 80007a0:	f7ff fcd4 	bl	800014c <isButtonPressed>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d114      	bne.n	80007d4 <fsm_manual_run+0xf8>
			status=INCREASE_VALUE_LED_RED;
 80007aa:	4b78      	ldr	r3, [pc, #480]	; (800098c <fsm_manual_run+0x2b0>)
 80007ac:	220f      	movs	r2, #15
 80007ae:	601a      	str	r2, [r3, #0]
			setTimer(1, 487);
 80007b0:	f240 11e7 	movw	r1, #487	; 0x1e7
 80007b4:	2001      	movs	r0, #1
 80007b6:	f001 f89d 	bl	80018f4 <setTimer>
			setTimer(2, 1000);
 80007ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007be:	2002      	movs	r0, #2
 80007c0:	f001 f898 	bl	80018f4 <setTimer>
			setTimer(3, 500);
 80007c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80007c8:	2003      	movs	r0, #3
 80007ca:	f001 f893 	bl	80018f4 <setTimer>
		    checksavered=0;
 80007ce:	4b73      	ldr	r3, [pc, #460]	; (800099c <fsm_manual_run+0x2c0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2)==1){
 80007d4:	2002      	movs	r0, #2
 80007d6:	f7ff fcb9 	bl	800014c <isButtonPressed>
		break;
 80007da:	e0d5      	b.n	8000988 <fsm_manual_run+0x2ac>
		if(check==0){
 80007dc:	4b6c      	ldr	r3, [pc, #432]	; (8000990 <fsm_manual_run+0x2b4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d10b      	bne.n	80007fc <fsm_manual_run+0x120>
			HAL_GPIO_WritePin(GPIOA,LED_RED1_Pin|LED_RED2_Pin, SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2112      	movs	r1, #18
 80007e8:	486a      	ldr	r0, [pc, #424]	; (8000994 <fsm_manual_run+0x2b8>)
 80007ea:	f001 fd80 	bl	80022ee <HAL_GPIO_WritePin>
			Turn_On_All_LED_GREEN();
 80007ee:	f001 f99b 	bl	8001b28 <Turn_On_All_LED_GREEN>
			Save_led7GREEN_segment_run13();
 80007f2:	f000 fe85 	bl	8001500 <Save_led7GREEN_segment_run13>
			check=1;
 80007f6:	4b66      	ldr	r3, [pc, #408]	; (8000990 <fsm_manual_run+0x2b4>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	601a      	str	r2, [r3, #0]
		if(isTimerExpired(1)==1){
 80007fc:	2001      	movs	r0, #1
 80007fe:	f001 f899 	bl	8001934 <isTimerExpired>
 8000802:	4603      	mov	r3, r0
 8000804:	2b01      	cmp	r3, #1
 8000806:	d106      	bne.n	8000816 <fsm_manual_run+0x13a>
			led7_segment_run02();
 8000808:	f000 fcb0 	bl	800116c <led7_segment_run02>
			setTimer(1, 487);
 800080c:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000810:	2001      	movs	r0, #1
 8000812:	f001 f86f 	bl	80018f4 <setTimer>
		if(isTimerExpired(2)==1){
 8000816:	2002      	movs	r0, #2
 8000818:	f001 f88c 	bl	8001934 <isTimerExpired>
 800081c:	4603      	mov	r3, r0
 800081e:	2b01      	cmp	r3, #1
 8000820:	d106      	bne.n	8000830 <fsm_manual_run+0x154>
			Save_led7GREEN_segment_run13();
 8000822:	f000 fe6d 	bl	8001500 <Save_led7GREEN_segment_run13>
			setTimer(2, 1000);
 8000826:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800082a:	2002      	movs	r0, #2
 800082c:	f001 f862 	bl	80018f4 <setTimer>
		if(isTimerExpired(3)==1){
 8000830:	2003      	movs	r0, #3
 8000832:	f001 f87f 	bl	8001934 <isTimerExpired>
 8000836:	4603      	mov	r3, r0
 8000838:	2b01      	cmp	r3, #1
 800083a:	d108      	bne.n	800084e <fsm_manual_run+0x172>
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin);
 800083c:	2144      	movs	r1, #68	; 0x44
 800083e:	4855      	ldr	r0, [pc, #340]	; (8000994 <fsm_manual_run+0x2b8>)
 8000840:	f001 fd6d 	bl	800231e <HAL_GPIO_TogglePin>
			setTimer(3, 500);
 8000844:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000848:	2003      	movs	r0, #3
 800084a:	f001 f853 	bl	80018f4 <setTimer>
		if(isButtonPressed(0)==1){
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff fc7c 	bl	800014c <isButtonPressed>
 8000854:	4603      	mov	r3, r0
 8000856:	2b01      	cmp	r3, #1
 8000858:	d117      	bne.n	800088a <fsm_manual_run+0x1ae>
			status= MAN_YELLOW;
 800085a:	4b4c      	ldr	r3, [pc, #304]	; (800098c <fsm_manual_run+0x2b0>)
 800085c:	220e      	movs	r2, #14
 800085e:	601a      	str	r2, [r3, #0]
			check=0;
 8000860:	4b4b      	ldr	r3, [pc, #300]	; (8000990 <fsm_manual_run+0x2b4>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
			setTimer(1, 487);
 8000866:	f240 11e7 	movw	r1, #487	; 0x1e7
 800086a:	2001      	movs	r0, #1
 800086c:	f001 f842 	bl	80018f4 <setTimer>
			setTimer(2, 1000);
 8000870:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000874:	2002      	movs	r0, #2
 8000876:	f001 f83d 	bl	80018f4 <setTimer>
			setTimer(3, 500);
 800087a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800087e:	2003      	movs	r0, #3
 8000880:	f001 f838 	bl	80018f4 <setTimer>
			checksaveyellow=0;
 8000884:	4b46      	ldr	r3, [pc, #280]	; (80009a0 <fsm_manual_run+0x2c4>)
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(1)==1){
 800088a:	2001      	movs	r0, #1
 800088c:	f7ff fc5e 	bl	800014c <isButtonPressed>
 8000890:	4603      	mov	r3, r0
 8000892:	2b01      	cmp	r3, #1
 8000894:	d175      	bne.n	8000982 <fsm_manual_run+0x2a6>
			status=INCREASE_VALUE_LED_GREEN;
 8000896:	4b3d      	ldr	r3, [pc, #244]	; (800098c <fsm_manual_run+0x2b0>)
 8000898:	2212      	movs	r2, #18
 800089a:	601a      	str	r2, [r3, #0]
			setTimer(1, 487);
 800089c:	f240 11e7 	movw	r1, #487	; 0x1e7
 80008a0:	2001      	movs	r0, #1
 80008a2:	f001 f827 	bl	80018f4 <setTimer>
			setTimer(2, 1000);
 80008a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008aa:	2002      	movs	r0, #2
 80008ac:	f001 f822 	bl	80018f4 <setTimer>
			setTimer(3, 500);
 80008b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008b4:	2003      	movs	r0, #3
 80008b6:	f001 f81d 	bl	80018f4 <setTimer>
			checksavegreen=0;
 80008ba:	4b37      	ldr	r3, [pc, #220]	; (8000998 <fsm_manual_run+0x2bc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
		break;
 80008c0:	e05f      	b.n	8000982 <fsm_manual_run+0x2a6>
		if(check==0){
 80008c2:	4b33      	ldr	r3, [pc, #204]	; (8000990 <fsm_manual_run+0x2b4>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d10b      	bne.n	80008e2 <fsm_manual_run+0x206>
			HAL_GPIO_WritePin(GPIOA,LED_GREEN1_Pin|LED_GREEN2_Pin, SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	2144      	movs	r1, #68	; 0x44
 80008ce:	4831      	ldr	r0, [pc, #196]	; (8000994 <fsm_manual_run+0x2b8>)
 80008d0:	f001 fd0d 	bl	80022ee <HAL_GPIO_WritePin>
			Turn_On_All_LED_YELLOW();
 80008d4:	f001 f93e 	bl	8001b54 <Turn_On_All_LED_YELLOW>
			Save_led7YELLOW_segment_run13();
 80008d8:	f000 fe82 	bl	80015e0 <Save_led7YELLOW_segment_run13>
			check=1;
 80008dc:	4b2c      	ldr	r3, [pc, #176]	; (8000990 <fsm_manual_run+0x2b4>)
 80008de:	2201      	movs	r2, #1
 80008e0:	601a      	str	r2, [r3, #0]
		if(isTimerExpired(1)==1){
 80008e2:	2001      	movs	r0, #1
 80008e4:	f001 f826 	bl	8001934 <isTimerExpired>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d106      	bne.n	80008fc <fsm_manual_run+0x220>
			led7_segment_run02();
 80008ee:	f000 fc3d 	bl	800116c <led7_segment_run02>
			setTimer(1, 487);
 80008f2:	f240 11e7 	movw	r1, #487	; 0x1e7
 80008f6:	2001      	movs	r0, #1
 80008f8:	f000 fffc 	bl	80018f4 <setTimer>
		if(isTimerExpired(2)==1){
 80008fc:	2002      	movs	r0, #2
 80008fe:	f001 f819 	bl	8001934 <isTimerExpired>
 8000902:	4603      	mov	r3, r0
 8000904:	2b01      	cmp	r3, #1
 8000906:	d106      	bne.n	8000916 <fsm_manual_run+0x23a>
			Save_led7YELLOW_segment_run13();
 8000908:	f000 fe6a 	bl	80015e0 <Save_led7YELLOW_segment_run13>
			setTimer(2, 1000);
 800090c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000910:	2002      	movs	r0, #2
 8000912:	f000 ffef 	bl	80018f4 <setTimer>
		if(isTimerExpired(3)==1){
 8000916:	2003      	movs	r0, #3
 8000918:	f001 f80c 	bl	8001934 <isTimerExpired>
 800091c:	4603      	mov	r3, r0
 800091e:	2b01      	cmp	r3, #1
 8000920:	d108      	bne.n	8000934 <fsm_manual_run+0x258>
			HAL_GPIO_TogglePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin);
 8000922:	2188      	movs	r1, #136	; 0x88
 8000924:	481b      	ldr	r0, [pc, #108]	; (8000994 <fsm_manual_run+0x2b8>)
 8000926:	f001 fcfa 	bl	800231e <HAL_GPIO_TogglePin>
			setTimer(3, 500);
 800092a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800092e:	2003      	movs	r0, #3
 8000930:	f000 ffe0 	bl	80018f4 <setTimer>
		if(isButtonPressed(0)==1){
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff fc09 	bl	800014c <isButtonPressed>
 800093a:	4603      	mov	r3, r0
 800093c:	2b01      	cmp	r3, #1
 800093e:	d102      	bne.n	8000946 <fsm_manual_run+0x26a>
			status=INIT;
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <fsm_manual_run+0x2b0>)
 8000942:	2201      	movs	r2, #1
 8000944:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(1)==1){
 8000946:	2001      	movs	r0, #1
 8000948:	f7ff fc00 	bl	800014c <isButtonPressed>
 800094c:	4603      	mov	r3, r0
 800094e:	2b01      	cmp	r3, #1
 8000950:	d119      	bne.n	8000986 <fsm_manual_run+0x2aa>
			status=INCREASE_VALUE_LED_YELLOW;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <fsm_manual_run+0x2b0>)
 8000954:	2214      	movs	r2, #20
 8000956:	601a      	str	r2, [r3, #0]
			setTimer(1, 487);
 8000958:	f240 11e7 	movw	r1, #487	; 0x1e7
 800095c:	2001      	movs	r0, #1
 800095e:	f000 ffc9 	bl	80018f4 <setTimer>
			setTimer(2, 1000);
 8000962:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000966:	2002      	movs	r0, #2
 8000968:	f000 ffc4 	bl	80018f4 <setTimer>
			setTimer(3, 500);
 800096c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000970:	2003      	movs	r0, #3
 8000972:	f000 ffbf 	bl	80018f4 <setTimer>
		    checksaveyellow=0;
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <fsm_manual_run+0x2c4>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
		break;
 800097c:	e003      	b.n	8000986 <fsm_manual_run+0x2aa>
		break;
 800097e:	bf00      	nop
 8000980:	e002      	b.n	8000988 <fsm_manual_run+0x2ac>
		break;
 8000982:	bf00      	nop
 8000984:	e000      	b.n	8000988 <fsm_manual_run+0x2ac>
		break;
 8000986:	bf00      	nop
	}
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200000b4 	.word	0x200000b4
 8000990:	200000a4 	.word	0x200000a4
 8000994:	40010800 	.word	0x40010800
 8000998:	200000ac 	.word	0x200000ac
 800099c:	200000a8 	.word	0x200000a8
 80009a0:	200000b0 	.word	0x200000b0

080009a4 <fsm_setting_run>:
 *      Author: ADMIN
 */
#include "fsm_setting.h"

//int checksavered=0;
void fsm_setting_run(){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
      switch(status){
 80009a8:	4bbb      	ldr	r3, [pc, #748]	; (8000c98 <fsm_setting_run+0x2f4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	3b0f      	subs	r3, #15
 80009ae:	2b06      	cmp	r3, #6
 80009b0:	f200 8291 	bhi.w	8000ed6 <fsm_setting_run+0x532>
 80009b4:	a201      	add	r2, pc, #4	; (adr r2, 80009bc <fsm_setting_run+0x18>)
 80009b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ba:	bf00      	nop
 80009bc:	080009d9 	.word	0x080009d9
 80009c0:	08000ab7 	.word	0x08000ab7
 80009c4:	08000b79 	.word	0x08000b79
 80009c8:	08000bb5 	.word	0x08000bb5
 80009cc:	08000cc5 	.word	0x08000cc5
 80009d0:	08000d8d 	.word	0x08000d8d
 80009d4:	08000e3b 	.word	0x08000e3b
		  case INCREASE_VALUE_LED_RED:
//			  	Increase_Save_led7RED_segment_run13();
				if(checksavered==0){
 80009d8:	4bb0      	ldr	r3, [pc, #704]	; (8000c9c <fsm_setting_run+0x2f8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d106      	bne.n	80009ee <fsm_setting_run+0x4a>
				//	Save_led7RED_segment_run13();
					Increase_Save_led7RED_segment_run13();
 80009e0:	f000 fd62 	bl	80014a8 <Increase_Save_led7RED_segment_run13>
					++checksavered;
 80009e4:	4bad      	ldr	r3, [pc, #692]	; (8000c9c <fsm_setting_run+0x2f8>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	4aac      	ldr	r2, [pc, #688]	; (8000c9c <fsm_setting_run+0x2f8>)
 80009ec:	6013      	str	r3, [r2, #0]
				}
				if(isTimerExpired(1)==1){
 80009ee:	2001      	movs	r0, #1
 80009f0:	f000 ffa0 	bl	8001934 <isTimerExpired>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d106      	bne.n	8000a08 <fsm_setting_run+0x64>
					led7_segment_run02();
 80009fa:	f000 fbb7 	bl	800116c <led7_segment_run02>
					setTimer(1, 487);
 80009fe:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000a02:	2001      	movs	r0, #1
 8000a04:	f000 ff76 	bl	80018f4 <setTimer>
				}
				if(isTimerExpired(2)==1){
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f000 ff93 	bl	8001934 <isTimerExpired>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d106      	bne.n	8000a22 <fsm_setting_run+0x7e>
//					if(checksavered==0){
//						Increase_Save_led7RED_segment_run13();
//						checksavered=1;
//					}
					Save_led7RED_segment_run13();
 8000a14:	f000 fd04 	bl	8001420 <Save_led7RED_segment_run13>
					setTimer(2, 1000);
 8000a18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a1c:	2002      	movs	r0, #2
 8000a1e:	f000 ff69 	bl	80018f4 <setTimer>
		//			setTimer(4, 10000);
				}
				if(isTimerExpired(3)==1){
 8000a22:	2003      	movs	r0, #3
 8000a24:	f000 ff86 	bl	8001934 <isTimerExpired>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d108      	bne.n	8000a40 <fsm_setting_run+0x9c>
					HAL_GPIO_TogglePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin);
 8000a2e:	2112      	movs	r1, #18
 8000a30:	489b      	ldr	r0, [pc, #620]	; (8000ca0 <fsm_setting_run+0x2fc>)
 8000a32:	f001 fc74 	bl	800231e <HAL_GPIO_TogglePin>
					setTimer(3, 500);
 8000a36:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	f000 ff5a 	bl	80018f4 <setTimer>
//					setTimer(0, counteryellow13*1000);
//		               setTimer(1, 443);
//		               setTimer(2, 1000);
//				}

				if(isButtonPressed(0)==1){
 8000a40:	2000      	movs	r0, #0
 8000a42:	f7ff fb83 	bl	800014c <isButtonPressed>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d119      	bne.n	8000a80 <fsm_setting_run+0xdc>
					status= MAN_GREEN;
 8000a4c:	4b92      	ldr	r3, [pc, #584]	; (8000c98 <fsm_setting_run+0x2f4>)
 8000a4e:	220d      	movs	r2, #13
 8000a50:	601a      	str	r2, [r3, #0]
					check=0;
 8000a52:	4b94      	ldr	r3, [pc, #592]	; (8000ca4 <fsm_setting_run+0x300>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
					setTimer(1, 487);
 8000a58:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f000 ff49 	bl	80018f4 <setTimer>
					setTimer(2, 1000);
 8000a62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a66:	2002      	movs	r0, #2
 8000a68:	f000 ff44 	bl	80018f4 <setTimer>
					setTimer(3, 500);
 8000a6c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a70:	2003      	movs	r0, #3
 8000a72:	f000 ff3f 	bl	80018f4 <setTimer>
					setTimer(4, 10000);
 8000a76:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a7a:	2004      	movs	r0, #4
 8000a7c:	f000 ff3a 	bl	80018f4 <setTimer>
				}
				if(isButtonPressed(1)==1){
 8000a80:	2001      	movs	r0, #1
 8000a82:	f7ff fb63 	bl	800014c <isButtonPressed>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d106      	bne.n	8000a9a <fsm_setting_run+0xf6>
					++checksavered;
 8000a8c:	4b83      	ldr	r3, [pc, #524]	; (8000c9c <fsm_setting_run+0x2f8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	4a82      	ldr	r2, [pc, #520]	; (8000c9c <fsm_setting_run+0x2f8>)
 8000a94:	6013      	str	r3, [r2, #0]
				    Increase_Save_led7RED_segment_run13();
 8000a96:	f000 fd07 	bl	80014a8 <Increase_Save_led7RED_segment_run13>
				 //   setTimer(checkstatus, 10000);
				}
				if(isButtonPressed(2)==1){
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	f7ff fb56 	bl	800014c <isButtonPressed>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	f040 8219 	bne.w	8000eda <fsm_setting_run+0x536>
					status=SET_VALUE_LED_RED;
 8000aa8:	4b7b      	ldr	r3, [pc, #492]	; (8000c98 <fsm_setting_run+0x2f4>)
 8000aaa:	2210      	movs	r2, #16
 8000aac:	601a      	str	r2, [r3, #0]
					checksavered=0;
 8000aae:	4b7b      	ldr	r3, [pc, #492]	; (8000c9c <fsm_setting_run+0x2f8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
//					  a=counterred13;
//					  b=countergreen13;
//					  c=counteryellow13;
				}

			  break;
 8000ab4:	e211      	b.n	8000eda <fsm_setting_run+0x536>
		  case SET_VALUE_LED_RED:
			  Turn_On_All_LED_RED();
 8000ab6:	f001 f821 	bl	8001afc <Turn_On_All_LED_RED>
			  counterred13 = savecounterred13;
 8000aba:	4b7b      	ldr	r3, [pc, #492]	; (8000ca8 <fsm_setting_run+0x304>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a7b      	ldr	r2, [pc, #492]	; (8000cac <fsm_setting_run+0x308>)
 8000ac0:	6013      	str	r3, [r2, #0]
			// counteryellow13=counterred13-countergreen13;
			//  savecountergreen13=countergreen13;
			//  a=counterred13;
			//  b=countergreen13;
			//  c=counteryellow13;
				if(checksavered==0){
 8000ac2:	4b76      	ldr	r3, [pc, #472]	; (8000c9c <fsm_setting_run+0x2f8>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d104      	bne.n	8000ad4 <fsm_setting_run+0x130>
					Save_led7RED_segment_run13();
 8000aca:	f000 fca9 	bl	8001420 <Save_led7RED_segment_run13>
					//Increase_Save_led7RED_segment_run13();
					checksavered=1;
 8000ace:	4b73      	ldr	r3, [pc, #460]	; (8000c9c <fsm_setting_run+0x2f8>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	601a      	str	r2, [r3, #0]
				}
				if(isTimerExpired(1)==1){
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f000 ff2d 	bl	8001934 <isTimerExpired>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d106      	bne.n	8000aee <fsm_setting_run+0x14a>
					led7_segment_run02();
 8000ae0:	f000 fb44 	bl	800116c <led7_segment_run02>
					setTimer(1, 487);
 8000ae4:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f000 ff03 	bl	80018f4 <setTimer>
				}
				if(isTimerExpired(2)==1){
 8000aee:	2002      	movs	r0, #2
 8000af0:	f000 ff20 	bl	8001934 <isTimerExpired>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d106      	bne.n	8000b08 <fsm_setting_run+0x164>
//					if(checksavered==0){
//						Increase_Save_led7RED_segment_run13();
//						checksavered=1;
//					}
					Save_led7RED_segment_run13();
 8000afa:	f000 fc91 	bl	8001420 <Save_led7RED_segment_run13>
					setTimer(2, 1000);
 8000afe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b02:	2002      	movs	r0, #2
 8000b04:	f000 fef6 	bl	80018f4 <setTimer>
//					setTimer(2, 1000);
//					setTimer(3, 500);
//					setTimer(checkstatus, 10000);
//					checkcountergreen=1;
//				}
				if(isButtonPressed(0)==1){
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff fb1f 	bl	800014c <isButtonPressed>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d114      	bne.n	8000b3e <fsm_setting_run+0x19a>
					status= MAN_GREEN;
 8000b14:	4b60      	ldr	r3, [pc, #384]	; (8000c98 <fsm_setting_run+0x2f4>)
 8000b16:	220d      	movs	r2, #13
 8000b18:	601a      	str	r2, [r3, #0]
					check=0;
 8000b1a:	4b62      	ldr	r3, [pc, #392]	; (8000ca4 <fsm_setting_run+0x300>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
					setTimer(1, 487);
 8000b20:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000b24:	2001      	movs	r0, #1
 8000b26:	f000 fee5 	bl	80018f4 <setTimer>
					setTimer(2, 1000);
 8000b2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b2e:	2002      	movs	r0, #2
 8000b30:	f000 fee0 	bl	80018f4 <setTimer>
					setTimer(3, 500);
 8000b34:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 fedb 	bl	80018f4 <setTimer>
				//	setTimer(4, 10000);
				}
				if(isButtonPressed(1)==1){
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f7ff fb04 	bl	800014c <isButtonPressed>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	f040 81c9 	bne.w	8000ede <fsm_setting_run+0x53a>
					status=INCREASE_VALUE_LED_RED;
 8000b4c:	4b52      	ldr	r3, [pc, #328]	; (8000c98 <fsm_setting_run+0x2f4>)
 8000b4e:	220f      	movs	r2, #15
 8000b50:	601a      	str	r2, [r3, #0]
					//Increase_Save_led7RED_segment_run13();
					checksavered=0;
 8000b52:	4b52      	ldr	r3, [pc, #328]	; (8000c9c <fsm_setting_run+0x2f8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
					setTimer(1, 487);
 8000b58:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f000 fec9 	bl	80018f4 <setTimer>
					setTimer(2, 1000);
 8000b62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b66:	2002      	movs	r0, #2
 8000b68:	f000 fec4 	bl	80018f4 <setTimer>
					setTimer(3, 500);
 8000b6c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 febf 	bl	80018f4 <setTimer>
////					setTimer(0, b*1000);
////		            setTimer(1, 443);
////		            setTimer(2, 1000);
//				}

			  break;
 8000b76:	e1b2      	b.n	8000ede <fsm_setting_run+0x53a>
		  case SAVE_VALUE_LED_RED:
			  					status=AUTO_RED1_GREEN2;
 8000b78:	4b47      	ldr	r3, [pc, #284]	; (8000c98 <fsm_setting_run+0x2f4>)
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	601a      	str	r2, [r3, #0]
			  					counter=0;
 8000b7e:	4b4c      	ldr	r3, [pc, #304]	; (8000cb0 <fsm_setting_run+0x30c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
			  					idx_led13=0;
 8000b84:	4b4b      	ldr	r3, [pc, #300]	; (8000cb4 <fsm_setting_run+0x310>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
			  					setTimer(0, b*1000);
 8000b8a:	4b4b      	ldr	r3, [pc, #300]	; (8000cb8 <fsm_setting_run+0x314>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b92:	fb02 f303 	mul.w	r3, r2, r3
 8000b96:	4619      	mov	r1, r3
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f000 feab 	bl	80018f4 <setTimer>
			  		            setTimer(1, 443);
 8000b9e:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f000 fea6 	bl	80018f4 <setTimer>
			  		            setTimer(2, 1000);
 8000ba8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bac:	2002      	movs	r0, #2
 8000bae:	f000 fea1 	bl	80018f4 <setTimer>
			  break;
 8000bb2:	e19d      	b.n	8000ef0 <fsm_setting_run+0x54c>
		  case INCREASE_VALUE_LED_GREEN:
				if(checksavegreen==0){
 8000bb4:	4b41      	ldr	r3, [pc, #260]	; (8000cbc <fsm_setting_run+0x318>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d106      	bne.n	8000bca <fsm_setting_run+0x226>
					Increase_Save_led7GREEN_segment_run13();
 8000bbc:	f000 fce4 	bl	8001588 <Increase_Save_led7GREEN_segment_run13>
					++checksavegreen;
 8000bc0:	4b3e      	ldr	r3, [pc, #248]	; (8000cbc <fsm_setting_run+0x318>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	4a3d      	ldr	r2, [pc, #244]	; (8000cbc <fsm_setting_run+0x318>)
 8000bc8:	6013      	str	r3, [r2, #0]
				}
				if(isTimerExpired(1)==1){
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f000 feb2 	bl	8001934 <isTimerExpired>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d106      	bne.n	8000be4 <fsm_setting_run+0x240>
					led7_segment_run02();
 8000bd6:	f000 fac9 	bl	800116c <led7_segment_run02>
					setTimer(1, 487);
 8000bda:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000bde:	2001      	movs	r0, #1
 8000be0:	f000 fe88 	bl	80018f4 <setTimer>
				}
				if(isTimerExpired(2)==1){
 8000be4:	2002      	movs	r0, #2
 8000be6:	f000 fea5 	bl	8001934 <isTimerExpired>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d106      	bne.n	8000bfe <fsm_setting_run+0x25a>
					Save_led7GREEN_segment_run13();
 8000bf0:	f000 fc86 	bl	8001500 <Save_led7GREEN_segment_run13>
					setTimer(2, 1000);
 8000bf4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f000 fe7b 	bl	80018f4 <setTimer>
				}
				if(isTimerExpired(3)==1){
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f000 fe98 	bl	8001934 <isTimerExpired>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d108      	bne.n	8000c1c <fsm_setting_run+0x278>
					HAL_GPIO_TogglePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin);
 8000c0a:	2144      	movs	r1, #68	; 0x44
 8000c0c:	4824      	ldr	r0, [pc, #144]	; (8000ca0 <fsm_setting_run+0x2fc>)
 8000c0e:	f001 fb86 	bl	800231e <HAL_GPIO_TogglePin>
					setTimer(3, 500);
 8000c12:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c16:	2003      	movs	r0, #3
 8000c18:	f000 fe6c 	bl	80018f4 <setTimer>
				}
				if(isButtonPressed(0)==1){
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff fa95 	bl	800014c <isButtonPressed>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d11c      	bne.n	8000c62 <fsm_setting_run+0x2be>
					status= MAN_YELLOW;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <fsm_setting_run+0x2f4>)
 8000c2a:	220e      	movs	r2, #14
 8000c2c:	601a      	str	r2, [r3, #0]
					check=0;
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <fsm_setting_run+0x300>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
					checksaveyellow=0;
 8000c34:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <fsm_setting_run+0x31c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
					setTimer(1, 487);
 8000c3a:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f000 fe58 	bl	80018f4 <setTimer>
					setTimer(2, 1000);
 8000c44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f000 fe53 	bl	80018f4 <setTimer>
					setTimer(3, 500);
 8000c4e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c52:	2003      	movs	r0, #3
 8000c54:	f000 fe4e 	bl	80018f4 <setTimer>
					setTimer(4, 10000);
 8000c58:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c5c:	2004      	movs	r0, #4
 8000c5e:	f000 fe49 	bl	80018f4 <setTimer>
				}
				if(isButtonPressed(1)==1){
 8000c62:	2001      	movs	r0, #1
 8000c64:	f7ff fa72 	bl	800014c <isButtonPressed>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d106      	bne.n	8000c7c <fsm_setting_run+0x2d8>
					++checksavegreen;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <fsm_setting_run+0x318>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	3301      	adds	r3, #1
 8000c74:	4a11      	ldr	r2, [pc, #68]	; (8000cbc <fsm_setting_run+0x318>)
 8000c76:	6013      	str	r3, [r2, #0]
				    Increase_Save_led7GREEN_segment_run13();
 8000c78:	f000 fc86 	bl	8001588 <Increase_Save_led7GREEN_segment_run13>
				}
				if(isButtonPressed(2)==1){
 8000c7c:	2002      	movs	r0, #2
 8000c7e:	f7ff fa65 	bl	800014c <isButtonPressed>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	f040 812c 	bne.w	8000ee2 <fsm_setting_run+0x53e>
					status=SET_VALUE_LED_GREEN;
 8000c8a:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <fsm_setting_run+0x2f4>)
 8000c8c:	2213      	movs	r2, #19
 8000c8e:	601a      	str	r2, [r3, #0]
					checksavegreen=0;
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <fsm_setting_run+0x318>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
				}
			  break;
 8000c96:	e124      	b.n	8000ee2 <fsm_setting_run+0x53e>
 8000c98:	200000b4 	.word	0x200000b4
 8000c9c:	200000a8 	.word	0x200000a8
 8000ca0:	40010800 	.word	0x40010800
 8000ca4:	200000a4 	.word	0x200000a4
 8000ca8:	200000d0 	.word	0x200000d0
 8000cac:	20000050 	.word	0x20000050
 8000cb0:	2000009c 	.word	0x2000009c
 8000cb4:	200000b8 	.word	0x200000b8
 8000cb8:	20000060 	.word	0x20000060
 8000cbc:	200000ac 	.word	0x200000ac
 8000cc0:	200000b0 	.word	0x200000b0
		  case SET_VALUE_LED_GREEN:
                      Turn_On_All_LED_GREEN();
 8000cc4:	f000 ff30 	bl	8001b28 <Turn_On_All_LED_GREEN>
		  			  countergreen13 = savecountergreen13;
 8000cc8:	4b8a      	ldr	r3, [pc, #552]	; (8000ef4 <fsm_setting_run+0x550>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a8a      	ldr	r2, [pc, #552]	; (8000ef8 <fsm_setting_run+0x554>)
 8000cce:	6013      	str	r3, [r2, #0]
		  			 // b=countergreen13;
		  				if(checksavegreen==0){
 8000cd0:	4b8a      	ldr	r3, [pc, #552]	; (8000efc <fsm_setting_run+0x558>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d104      	bne.n	8000ce2 <fsm_setting_run+0x33e>
		  					Save_led7GREEN_segment_run13();
 8000cd8:	f000 fc12 	bl	8001500 <Save_led7GREEN_segment_run13>
		  					checksavegreen=1;
 8000cdc:	4b87      	ldr	r3, [pc, #540]	; (8000efc <fsm_setting_run+0x558>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	601a      	str	r2, [r3, #0]
		  				}
		  				if(isTimerExpired(1)==1){
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f000 fe26 	bl	8001934 <isTimerExpired>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d106      	bne.n	8000cfc <fsm_setting_run+0x358>
		  					led7_segment_run02();
 8000cee:	f000 fa3d 	bl	800116c <led7_segment_run02>
		  					setTimer(1, 487);
 8000cf2:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f000 fdfc 	bl	80018f4 <setTimer>
		  				}
		  				if(isTimerExpired(2)==1){
 8000cfc:	2002      	movs	r0, #2
 8000cfe:	f000 fe19 	bl	8001934 <isTimerExpired>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d106      	bne.n	8000d16 <fsm_setting_run+0x372>
		  					Save_led7GREEN_segment_run13();
 8000d08:	f000 fbfa 	bl	8001500 <Save_led7GREEN_segment_run13>
		  					setTimer(2, 1000);
 8000d0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d10:	2002      	movs	r0, #2
 8000d12:	f000 fdef 	bl	80018f4 <setTimer>
		  				}
//		  				if(isTimerExpired(3)==1){
//		  					HAL_GPIO_TogglePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin);
//		  					setTimer(3, 500);
//		  				}
		  				if(isButtonPressed(0)==1){
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff fa18 	bl	800014c <isButtonPressed>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d117      	bne.n	8000d52 <fsm_setting_run+0x3ae>
		  					status= MAN_YELLOW;
 8000d22:	4b77      	ldr	r3, [pc, #476]	; (8000f00 <fsm_setting_run+0x55c>)
 8000d24:	220e      	movs	r2, #14
 8000d26:	601a      	str	r2, [r3, #0]
		  					check=0;
 8000d28:	4b76      	ldr	r3, [pc, #472]	; (8000f04 <fsm_setting_run+0x560>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
		  					checksaveyellow=0;
 8000d2e:	4b76      	ldr	r3, [pc, #472]	; (8000f08 <fsm_setting_run+0x564>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
		  					setTimer(1, 487);
 8000d34:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f000 fddb 	bl	80018f4 <setTimer>
		  					setTimer(2, 1000);
 8000d3e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d42:	2002      	movs	r0, #2
 8000d44:	f000 fdd6 	bl	80018f4 <setTimer>
		  					setTimer(3, 500);
 8000d48:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 fdd1 	bl	80018f4 <setTimer>
		  				}
		  				if(isButtonPressed(1)==1){
 8000d52:	2001      	movs	r0, #1
 8000d54:	f7ff f9fa 	bl	800014c <isButtonPressed>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	f040 80c3 	bne.w	8000ee6 <fsm_setting_run+0x542>
		  					status=INCREASE_VALUE_LED_GREEN;
 8000d60:	4b67      	ldr	r3, [pc, #412]	; (8000f00 <fsm_setting_run+0x55c>)
 8000d62:	2212      	movs	r2, #18
 8000d64:	601a      	str	r2, [r3, #0]
		  					checksavegreen=0;
 8000d66:	4b65      	ldr	r3, [pc, #404]	; (8000efc <fsm_setting_run+0x558>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
		  					setTimer(1, 487);
 8000d6c:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000d70:	2001      	movs	r0, #1
 8000d72:	f000 fdbf 	bl	80018f4 <setTimer>
		  					setTimer(2, 1000);
 8000d76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	f000 fdba 	bl	80018f4 <setTimer>
		  					setTimer(3, 500);
 8000d80:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 fdb5 	bl	80018f4 <setTimer>
		  				}
		  			  break;
 8000d8a:	e0ac      	b.n	8000ee6 <fsm_setting_run+0x542>
		  case INCREASE_VALUE_LED_YELLOW:
				if(checksaveyellow==0){
 8000d8c:	4b5e      	ldr	r3, [pc, #376]	; (8000f08 <fsm_setting_run+0x564>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d106      	bne.n	8000da2 <fsm_setting_run+0x3fe>
					Increase_Save_led7YELLOW_segment_run13();
 8000d94:	f000 fc5a 	bl	800164c <Increase_Save_led7YELLOW_segment_run13>
					++checksaveyellow;
 8000d98:	4b5b      	ldr	r3, [pc, #364]	; (8000f08 <fsm_setting_run+0x564>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	4a5a      	ldr	r2, [pc, #360]	; (8000f08 <fsm_setting_run+0x564>)
 8000da0:	6013      	str	r3, [r2, #0]
				}
				if(isTimerExpired(1)==1){
 8000da2:	2001      	movs	r0, #1
 8000da4:	f000 fdc6 	bl	8001934 <isTimerExpired>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d106      	bne.n	8000dbc <fsm_setting_run+0x418>
					led7_segment_run02();
 8000dae:	f000 f9dd 	bl	800116c <led7_segment_run02>
					setTimer(1, 487);
 8000db2:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000db6:	2001      	movs	r0, #1
 8000db8:	f000 fd9c 	bl	80018f4 <setTimer>
				}
				if(isTimerExpired(2)==1){
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	f000 fdb9 	bl	8001934 <isTimerExpired>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d106      	bne.n	8000dd6 <fsm_setting_run+0x432>
					Save_led7YELLOW_segment_run13();
 8000dc8:	f000 fc0a 	bl	80015e0 <Save_led7YELLOW_segment_run13>
					setTimer(2, 1000);
 8000dcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f000 fd8f 	bl	80018f4 <setTimer>
				}
				if(isTimerExpired(3)==1){
 8000dd6:	2003      	movs	r0, #3
 8000dd8:	f000 fdac 	bl	8001934 <isTimerExpired>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d108      	bne.n	8000df4 <fsm_setting_run+0x450>
					HAL_GPIO_TogglePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin);
 8000de2:	2188      	movs	r1, #136	; 0x88
 8000de4:	4849      	ldr	r0, [pc, #292]	; (8000f0c <fsm_setting_run+0x568>)
 8000de6:	f001 fa9a 	bl	800231e <HAL_GPIO_TogglePin>
					setTimer(3, 500);
 8000dea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000dee:	2003      	movs	r0, #3
 8000df0:	f000 fd80 	bl	80018f4 <setTimer>
				}
				if(isButtonPressed(0)==1){
 8000df4:	2000      	movs	r0, #0
 8000df6:	f7ff f9a9 	bl	800014c <isButtonPressed>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d102      	bne.n	8000e06 <fsm_setting_run+0x462>
					status= INIT;
 8000e00:	4b3f      	ldr	r3, [pc, #252]	; (8000f00 <fsm_setting_run+0x55c>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	601a      	str	r2, [r3, #0]
				}
				if(isButtonPressed(1)==1){
 8000e06:	2001      	movs	r0, #1
 8000e08:	f7ff f9a0 	bl	800014c <isButtonPressed>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d106      	bne.n	8000e20 <fsm_setting_run+0x47c>
					++checksaveyellow;
 8000e12:	4b3d      	ldr	r3, [pc, #244]	; (8000f08 <fsm_setting_run+0x564>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	3301      	adds	r3, #1
 8000e18:	4a3b      	ldr	r2, [pc, #236]	; (8000f08 <fsm_setting_run+0x564>)
 8000e1a:	6013      	str	r3, [r2, #0]
				    Increase_Save_led7YELLOW_segment_run13();
 8000e1c:	f000 fc16 	bl	800164c <Increase_Save_led7YELLOW_segment_run13>
				}
				if(isButtonPressed(2)==1){
 8000e20:	2002      	movs	r0, #2
 8000e22:	f7ff f993 	bl	800014c <isButtonPressed>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d15e      	bne.n	8000eea <fsm_setting_run+0x546>
					status=SET_VALUE_LED_YELLOW;
 8000e2c:	4b34      	ldr	r3, [pc, #208]	; (8000f00 <fsm_setting_run+0x55c>)
 8000e2e:	2215      	movs	r2, #21
 8000e30:	601a      	str	r2, [r3, #0]
					checksaveyellow=0;
 8000e32:	4b35      	ldr	r3, [pc, #212]	; (8000f08 <fsm_setting_run+0x564>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
				}
			  break;
 8000e38:	e057      	b.n	8000eea <fsm_setting_run+0x546>
		  case SET_VALUE_LED_YELLOW:
			          Turn_On_All_LED_YELLOW();
 8000e3a:	f000 fe8b 	bl	8001b54 <Turn_On_All_LED_YELLOW>
		  			  counteryellow13 = savecounteryellow13;
 8000e3e:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <fsm_setting_run+0x56c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a34      	ldr	r2, [pc, #208]	; (8000f14 <fsm_setting_run+0x570>)
 8000e44:	6013      	str	r3, [r2, #0]
		  			//  c=counteryellow13;
		  				if(checksaveyellow==0){
 8000e46:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <fsm_setting_run+0x564>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d104      	bne.n	8000e58 <fsm_setting_run+0x4b4>
		  					Save_led7YELLOW_segment_run13();
 8000e4e:	f000 fbc7 	bl	80015e0 <Save_led7YELLOW_segment_run13>
		  					checksaveyellow=1;
 8000e52:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <fsm_setting_run+0x564>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	601a      	str	r2, [r3, #0]
		  				}
		  				if(isTimerExpired(1)==1){
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f000 fd6b 	bl	8001934 <isTimerExpired>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d106      	bne.n	8000e72 <fsm_setting_run+0x4ce>
		  					led7_segment_run02();
 8000e64:	f000 f982 	bl	800116c <led7_segment_run02>
		  					setTimer(1, 487);
 8000e68:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f000 fd41 	bl	80018f4 <setTimer>
		  				}
		  				if(isTimerExpired(2)==1){
 8000e72:	2002      	movs	r0, #2
 8000e74:	f000 fd5e 	bl	8001934 <isTimerExpired>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d106      	bne.n	8000e8c <fsm_setting_run+0x4e8>
		  					Save_led7YELLOW_segment_run13();
 8000e7e:	f000 fbaf 	bl	80015e0 <Save_led7YELLOW_segment_run13>
		  					setTimer(2, 1000);
 8000e82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e86:	2002      	movs	r0, #2
 8000e88:	f000 fd34 	bl	80018f4 <setTimer>
		  				}
//		  				if(isTimerExpired(3)==1){
//		  					HAL_GPIO_TogglePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin);
//		  					setTimer(3, 500);
//		  				}
		  				if(isButtonPressed(0)==1){
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f7ff f95d 	bl	800014c <isButtonPressed>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d102      	bne.n	8000e9e <fsm_setting_run+0x4fa>
		  					status= INIT;
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <fsm_setting_run+0x55c>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	601a      	str	r2, [r3, #0]
		  				}
		  				if(isButtonPressed(1)==1){
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f7ff f954 	bl	800014c <isButtonPressed>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d121      	bne.n	8000eee <fsm_setting_run+0x54a>
		  					status=INCREASE_VALUE_LED_YELLOW;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <fsm_setting_run+0x55c>)
 8000eac:	2214      	movs	r2, #20
 8000eae:	601a      	str	r2, [r3, #0]
		  					checksaveyellow=0;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <fsm_setting_run+0x564>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
		  					setTimer(1, 487);
 8000eb6:	f240 11e7 	movw	r1, #487	; 0x1e7
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f000 fd1a 	bl	80018f4 <setTimer>
		  					setTimer(2, 1000);
 8000ec0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ec4:	2002      	movs	r0, #2
 8000ec6:	f000 fd15 	bl	80018f4 <setTimer>
		  					setTimer(3, 500);
 8000eca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ece:	2003      	movs	r0, #3
 8000ed0:	f000 fd10 	bl	80018f4 <setTimer>
		  				}
		  			  break;
 8000ed4:	e00b      	b.n	8000eee <fsm_setting_run+0x54a>
		  default:
			  break;
 8000ed6:	bf00      	nop
 8000ed8:	e00a      	b.n	8000ef0 <fsm_setting_run+0x54c>
			  break;
 8000eda:	bf00      	nop
 8000edc:	e008      	b.n	8000ef0 <fsm_setting_run+0x54c>
			  break;
 8000ede:	bf00      	nop
 8000ee0:	e006      	b.n	8000ef0 <fsm_setting_run+0x54c>
			  break;
 8000ee2:	bf00      	nop
 8000ee4:	e004      	b.n	8000ef0 <fsm_setting_run+0x54c>
		  			  break;
 8000ee6:	bf00      	nop
 8000ee8:	e002      	b.n	8000ef0 <fsm_setting_run+0x54c>
			  break;
 8000eea:	bf00      	nop
 8000eec:	e000      	b.n	8000ef0 <fsm_setting_run+0x54c>
		  			  break;
 8000eee:	bf00      	nop
      }
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200000c4 	.word	0x200000c4
 8000ef8:	20000058 	.word	0x20000058
 8000efc:	200000ac 	.word	0x200000ac
 8000f00:	200000b4 	.word	0x200000b4
 8000f04:	200000a4 	.word	0x200000a4
 8000f08:	200000b0 	.word	0x200000b0
 8000f0c:	40010800 	.word	0x40010800
 8000f10:	200000bc 	.word	0x200000bc
 8000f14:	20000054 	.word	0x20000054

08000f18 <set_led7_segement>:
int savecounterred13,savecountergreen13,savecounteryellow13 =0;
int checkcounterred,checkcountergreen,checkcounteryellow=0;
int a=5;
int b=3;
int c=2;
void set_led7_segement(){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, SEG0X_Pin|SEG1X_Pin|SEG2X_Pin|EN3_Pin
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <set_led7_segement+0x20>)
 8000f24:	f001 f9e3 	bl	80022ee <HAL_GPIO_WritePin>
		                          |SEG3X_Pin|SEG4X_Pin|SEG5X_Pin|SEG6X_Pin
		                          |EN0_Pin|EN1_Pin|EN2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA, SEG0Y_Pin|SEG1Y_Pin|SEG2Y_Pin|SEG3Y_Pin|SEG4Y_Pin|SEG5Y_Pin|SEG6Y_Pin, GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 8000f2e:	4803      	ldr	r0, [pc, #12]	; (8000f3c <set_led7_segement+0x24>)
 8000f30:	f001 f9dd 	bl	80022ee <HAL_GPIO_WritePin>
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40010c00 	.word	0x40010c00
 8000f3c:	40010800 	.word	0x40010800

08000f40 <display7SEGX>:
void display7SEGX(int num) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
      const uint8_t segmentMap[10] = {
 8000f48:	4a3f      	ldr	r2, [pc, #252]	; (8001048 <display7SEGX+0x108>)
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f50:	c303      	stmia	r3!, {r0, r1}
 8000f52:	801a      	strh	r2, [r3, #0]
          0b10111110,
          0b11100000,
          0b11111110,
          0b11110110
      };
      HAL_GPIO_WritePin(SEG0X_GPIO_Port, SEG0X_Pin, (segmentMap[num] & 0b10000000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000f54:	f107 020c 	add.w	r2, r7, #12
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	09db      	lsrs	r3, r3, #7
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	461a      	mov	r2, r3
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	4837      	ldr	r0, [pc, #220]	; (800104c <display7SEGX+0x10c>)
 8000f6e:	f001 f9be 	bl	80022ee <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG1X_GPIO_Port, SEG1X_Pin, (segmentMap[num] & 0b01000000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000f72:	f107 020c 	add.w	r2, r7, #12
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	bf0c      	ite	eq
 8000f84:	2301      	moveq	r3, #1
 8000f86:	2300      	movne	r3, #0
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	482f      	ldr	r0, [pc, #188]	; (800104c <display7SEGX+0x10c>)
 8000f90:	f001 f9ad 	bl	80022ee <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG2X_GPIO_Port, SEG2X_Pin, (segmentMap[num] & 0b00100000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000f94:	f107 020c 	add.w	r2, r7, #12
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	f003 0320 	and.w	r3, r3, #32
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bf0c      	ite	eq
 8000fa6:	2301      	moveq	r3, #1
 8000fa8:	2300      	movne	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	2104      	movs	r1, #4
 8000fb0:	4826      	ldr	r0, [pc, #152]	; (800104c <display7SEGX+0x10c>)
 8000fb2:	f001 f99c 	bl	80022ee <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG3X_GPIO_Port, SEG3X_Pin, (segmentMap[num] & 0b00010000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000fb6:	f107 020c 	add.w	r2, r7, #12
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	f003 0310 	and.w	r3, r3, #16
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	bf0c      	ite	eq
 8000fc8:	2301      	moveq	r3, #1
 8000fca:	2300      	movne	r3, #0
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	461a      	mov	r2, r3
 8000fd0:	2108      	movs	r1, #8
 8000fd2:	481e      	ldr	r0, [pc, #120]	; (800104c <display7SEGX+0x10c>)
 8000fd4:	f001 f98b 	bl	80022ee <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG4X_GPIO_Port, SEG4X_Pin, (segmentMap[num] & 0b00001000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000fd8:	f107 020c 	add.w	r2, r7, #12
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4413      	add	r3, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	bf0c      	ite	eq
 8000fea:	2301      	moveq	r3, #1
 8000fec:	2300      	movne	r3, #0
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	4815      	ldr	r0, [pc, #84]	; (800104c <display7SEGX+0x10c>)
 8000ff6:	f001 f97a 	bl	80022ee <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG5X_GPIO_Port, SEG5X_Pin, (segmentMap[num] & 0b00000100) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	2b00      	cmp	r3, #0
 800100a:	bf0c      	ite	eq
 800100c:	2301      	moveq	r3, #1
 800100e:	2300      	movne	r3, #0
 8001010:	b2db      	uxtb	r3, r3
 8001012:	461a      	mov	r2, r3
 8001014:	2120      	movs	r1, #32
 8001016:	480d      	ldr	r0, [pc, #52]	; (800104c <display7SEGX+0x10c>)
 8001018:	f001 f969 	bl	80022ee <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG6X_GPIO_Port, SEG6X_Pin, (segmentMap[num] & 0b00000010) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800101c:	f107 020c 	add.w	r2, r7, #12
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	bf0c      	ite	eq
 800102e:	2301      	moveq	r3, #1
 8001030:	2300      	movne	r3, #0
 8001032:	b2db      	uxtb	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	2140      	movs	r1, #64	; 0x40
 8001038:	4804      	ldr	r0, [pc, #16]	; (800104c <display7SEGX+0x10c>)
 800103a:	f001 f958 	bl	80022ee <HAL_GPIO_WritePin>
  }
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	08003330 	.word	0x08003330
 800104c:	40010c00 	.word	0x40010c00

08001050 <display7SEGY>:
void display7SEGY(int num) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
      const uint8_t segmentMap[10] = {
 8001058:	4a42      	ldr	r2, [pc, #264]	; (8001164 <display7SEGY+0x114>)
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001060:	c303      	stmia	r3!, {r0, r1}
 8001062:	801a      	strh	r2, [r3, #0]
          0b10111110,
          0b11100000,
          0b11111110,
          0b11110110
      };
      HAL_GPIO_WritePin(SEG0Y_GPIO_Port, SEG0Y_Pin, (segmentMap[num] & 0b10000000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001064:	f107 020c 	add.w	r2, r7, #12
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b25b      	sxtb	r3, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	b2db      	uxtb	r3, r3
 8001074:	09db      	lsrs	r3, r3, #7
 8001076:	b2db      	uxtb	r3, r3
 8001078:	461a      	mov	r2, r3
 800107a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107e:	483a      	ldr	r0, [pc, #232]	; (8001168 <display7SEGY+0x118>)
 8001080:	f001 f935 	bl	80022ee <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG1Y_GPIO_Port, SEG1Y_Pin, (segmentMap[num] & 0b01000000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001084:	f107 020c 	add.w	r2, r7, #12
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001092:	2b00      	cmp	r3, #0
 8001094:	bf0c      	ite	eq
 8001096:	2301      	moveq	r3, #1
 8001098:	2300      	movne	r3, #0
 800109a:	b2db      	uxtb	r3, r3
 800109c:	461a      	mov	r2, r3
 800109e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a2:	4831      	ldr	r0, [pc, #196]	; (8001168 <display7SEGY+0x118>)
 80010a4:	f001 f923 	bl	80022ee <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG2Y_GPIO_Port, SEG2Y_Pin, (segmentMap[num] & 0b00100000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80010a8:	f107 020c 	add.w	r2, r7, #12
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	f003 0320 	and.w	r3, r3, #32
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	bf0c      	ite	eq
 80010ba:	2301      	moveq	r3, #1
 80010bc:	2300      	movne	r3, #0
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	461a      	mov	r2, r3
 80010c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c6:	4828      	ldr	r0, [pc, #160]	; (8001168 <display7SEGY+0x118>)
 80010c8:	f001 f911 	bl	80022ee <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG3Y_GPIO_Port, SEG3Y_Pin, (segmentMap[num] & 0b00010000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80010cc:	f107 020c 	add.w	r2, r7, #12
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4413      	add	r3, r2
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	f003 0310 	and.w	r3, r3, #16
 80010da:	2b00      	cmp	r3, #0
 80010dc:	bf0c      	ite	eq
 80010de:	2301      	moveq	r3, #1
 80010e0:	2300      	movne	r3, #0
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	461a      	mov	r2, r3
 80010e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ea:	481f      	ldr	r0, [pc, #124]	; (8001168 <display7SEGY+0x118>)
 80010ec:	f001 f8ff 	bl	80022ee <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG4Y_GPIO_Port, SEG4Y_Pin, (segmentMap[num] & 0b00001000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80010f0:	f107 020c 	add.w	r2, r7, #12
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4413      	add	r3, r2
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	bf0c      	ite	eq
 8001102:	2301      	moveq	r3, #1
 8001104:	2300      	movne	r3, #0
 8001106:	b2db      	uxtb	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110e:	4816      	ldr	r0, [pc, #88]	; (8001168 <display7SEGY+0x118>)
 8001110:	f001 f8ed 	bl	80022ee <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG5Y_GPIO_Port, SEG5Y_Pin, (segmentMap[num] & 0b00000100) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001114:	f107 020c 	add.w	r2, r7, #12
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	2b00      	cmp	r3, #0
 8001124:	bf0c      	ite	eq
 8001126:	2301      	moveq	r3, #1
 8001128:	2300      	movne	r3, #0
 800112a:	b2db      	uxtb	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001132:	480d      	ldr	r0, [pc, #52]	; (8001168 <display7SEGY+0x118>)
 8001134:	f001 f8db 	bl	80022ee <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG6Y_GPIO_Port, SEG6Y_Pin, (segmentMap[num] & 0b00000010) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001138:	f107 020c 	add.w	r2, r7, #12
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4413      	add	r3, r2
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	bf0c      	ite	eq
 800114a:	2301      	moveq	r3, #1
 800114c:	2300      	movne	r3, #0
 800114e:	b2db      	uxtb	r3, r3
 8001150:	461a      	mov	r2, r3
 8001152:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001156:	4804      	ldr	r0, [pc, #16]	; (8001168 <display7SEGY+0x118>)
 8001158:	f001 f8c9 	bl	80022ee <HAL_GPIO_WritePin>
  }
 800115c:	bf00      	nop
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	08003330 	.word	0x08003330
 8001168:	40010800 	.word	0x40010800

0800116c <led7_segment_run02>:
void led7_segment_run02(){
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
//				counterred02=5;
//				counteryellow02=2;
//				countergreen02=3;
//			}
//	}
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001170:	2201      	movs	r2, #1
 8001172:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001176:	480e      	ldr	r0, [pc, #56]	; (80011b0 <led7_segment_run02+0x44>)
 8001178:	f001 f8b9 	bl	80022ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001182:	480b      	ldr	r0, [pc, #44]	; (80011b0 <led7_segment_run02+0x44>)
 8001184:	f001 f8b3 	bl	80022ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2180      	movs	r1, #128	; 0x80
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <led7_segment_run02+0x44>)
 800118e:	f001 f8ae 	bl	80022ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <led7_segment_run02+0x44>)
 800119a:	f001 f8a8 	bl	80022ee <HAL_GPIO_WritePin>
			display7SEGX(0);
 800119e:	2000      	movs	r0, #0
 80011a0:	f7ff fece 	bl	8000f40 <display7SEGX>
			display7SEGY(0);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f7ff ff53 	bl	8001050 <display7SEGY>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40010c00 	.word	0x40010c00

080011b4 <led7_segment_run13>:
void led7_segment_run13(){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	if(idx_led13>=(2*b+2*c+2)) idx_led13=0;
 80011b8:	4b91      	ldr	r3, [pc, #580]	; (8001400 <led7_segment_run13+0x24c>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b91      	ldr	r3, [pc, #580]	; (8001404 <led7_segment_run13+0x250>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4413      	add	r3, r2
 80011c2:	3301      	adds	r3, #1
 80011c4:	005a      	lsls	r2, r3, #1
 80011c6:	4b90      	ldr	r3, [pc, #576]	; (8001408 <led7_segment_run13+0x254>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	dc02      	bgt.n	80011d4 <led7_segment_run13+0x20>
 80011ce:	4b8e      	ldr	r3, [pc, #568]	; (8001408 <led7_segment_run13+0x254>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
	idx_led13++;
 80011d4:	4b8c      	ldr	r3, [pc, #560]	; (8001408 <led7_segment_run13+0x254>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	4a8b      	ldr	r2, [pc, #556]	; (8001408 <led7_segment_run13+0x254>)
 80011dc:	6013      	str	r3, [r2, #0]
	if(idx_led13<=b+1){
 80011de:	4b88      	ldr	r3, [pc, #544]	; (8001400 <led7_segment_run13+0x24c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	4b88      	ldr	r3, [pc, #544]	; (8001408 <led7_segment_run13+0x254>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	db26      	blt.n	800123a <led7_segment_run13+0x86>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f2:	4886      	ldr	r0, [pc, #536]	; (800140c <led7_segment_run13+0x258>)
 80011f4:	f001 f87b 	bl	80022ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fe:	4883      	ldr	r0, [pc, #524]	; (800140c <led7_segment_run13+0x258>)
 8001200:	f001 f875 	bl	80022ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001204:	2201      	movs	r2, #1
 8001206:	2180      	movs	r1, #128	; 0x80
 8001208:	4880      	ldr	r0, [pc, #512]	; (800140c <led7_segment_run13+0x258>)
 800120a:	f001 f870 	bl	80022ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800120e:	2201      	movs	r2, #1
 8001210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001214:	487d      	ldr	r0, [pc, #500]	; (800140c <led7_segment_run13+0x258>)
 8001216:	f001 f86a 	bl	80022ee <HAL_GPIO_WritePin>
		display7SEGX(counterred13--);
 800121a:	4b7d      	ldr	r3, [pc, #500]	; (8001410 <led7_segment_run13+0x25c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	1e5a      	subs	r2, r3, #1
 8001220:	497b      	ldr	r1, [pc, #492]	; (8001410 <led7_segment_run13+0x25c>)
 8001222:	600a      	str	r2, [r1, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fe8b 	bl	8000f40 <display7SEGX>
		display7SEGY(countergreen13--);
 800122a:	4b7a      	ldr	r3, [pc, #488]	; (8001414 <led7_segment_run13+0x260>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	1e5a      	subs	r2, r3, #1
 8001230:	4978      	ldr	r1, [pc, #480]	; (8001414 <led7_segment_run13+0x260>)
 8001232:	600a      	str	r2, [r1, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff0b 	bl	8001050 <display7SEGY>
	}
	if(idx_led13>b+1&&idx_led13<=(b+c+1)){
 800123a:	4b71      	ldr	r3, [pc, #452]	; (8001400 <led7_segment_run13+0x24c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	4b71      	ldr	r3, [pc, #452]	; (8001408 <led7_segment_run13+0x254>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	da47      	bge.n	80012d8 <led7_segment_run13+0x124>
 8001248:	4b6d      	ldr	r3, [pc, #436]	; (8001400 <led7_segment_run13+0x24c>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b6d      	ldr	r3, [pc, #436]	; (8001404 <led7_segment_run13+0x250>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4413      	add	r3, r2
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	4b6c      	ldr	r3, [pc, #432]	; (8001408 <led7_segment_run13+0x254>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	db3d      	blt.n	80012d8 <led7_segment_run13+0x124>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001262:	486a      	ldr	r0, [pc, #424]	; (800140c <led7_segment_run13+0x258>)
 8001264:	f001 f843 	bl	80022ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800126e:	4867      	ldr	r0, [pc, #412]	; (800140c <led7_segment_run13+0x258>)
 8001270:	f001 f83d 	bl	80022ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001274:	2201      	movs	r2, #1
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	4864      	ldr	r0, [pc, #400]	; (800140c <led7_segment_run13+0x258>)
 800127a:	f001 f838 	bl	80022ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001284:	4861      	ldr	r0, [pc, #388]	; (800140c <led7_segment_run13+0x258>)
 8001286:	f001 f832 	bl	80022ee <HAL_GPIO_WritePin>
		display7SEGX(counterred13--);
 800128a:	4b61      	ldr	r3, [pc, #388]	; (8001410 <led7_segment_run13+0x25c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	1e5a      	subs	r2, r3, #1
 8001290:	495f      	ldr	r1, [pc, #380]	; (8001410 <led7_segment_run13+0x25c>)
 8001292:	600a      	str	r2, [r1, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fe53 	bl	8000f40 <display7SEGX>
		display7SEGY(--counteryellow13);
 800129a:	4b5f      	ldr	r3, [pc, #380]	; (8001418 <led7_segment_run13+0x264>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	3b01      	subs	r3, #1
 80012a0:	4a5d      	ldr	r2, [pc, #372]	; (8001418 <led7_segment_run13+0x264>)
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b5c      	ldr	r3, [pc, #368]	; (8001418 <led7_segment_run13+0x264>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fed1 	bl	8001050 <display7SEGY>
			if(idx_led13>=(b+c+1)){
 80012ae:	4b54      	ldr	r3, [pc, #336]	; (8001400 <led7_segment_run13+0x24c>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4b54      	ldr	r3, [pc, #336]	; (8001404 <led7_segment_run13+0x250>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	441a      	add	r2, r3
 80012b8:	4b53      	ldr	r3, [pc, #332]	; (8001408 <led7_segment_run13+0x254>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	da0b      	bge.n	80012d8 <led7_segment_run13+0x124>
				counterred13=a;
 80012c0:	4b56      	ldr	r3, [pc, #344]	; (800141c <led7_segment_run13+0x268>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a52      	ldr	r2, [pc, #328]	; (8001410 <led7_segment_run13+0x25c>)
 80012c6:	6013      	str	r3, [r2, #0]
				counteryellow13=c;
 80012c8:	4b4e      	ldr	r3, [pc, #312]	; (8001404 <led7_segment_run13+0x250>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a52      	ldr	r2, [pc, #328]	; (8001418 <led7_segment_run13+0x264>)
 80012ce:	6013      	str	r3, [r2, #0]
				countergreen13=b;
 80012d0:	4b4b      	ldr	r3, [pc, #300]	; (8001400 <led7_segment_run13+0x24c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a4f      	ldr	r2, [pc, #316]	; (8001414 <led7_segment_run13+0x260>)
 80012d6:	6013      	str	r3, [r2, #0]
			}
	}
	if(idx_led13>(b+c+1)&&idx_led13<=(2*b+c+2)){
 80012d8:	4b49      	ldr	r3, [pc, #292]	; (8001400 <led7_segment_run13+0x24c>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b49      	ldr	r3, [pc, #292]	; (8001404 <led7_segment_run13+0x250>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4413      	add	r3, r2
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	4b48      	ldr	r3, [pc, #288]	; (8001408 <led7_segment_run13+0x254>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	da31      	bge.n	8001350 <led7_segment_run13+0x19c>
 80012ec:	4b44      	ldr	r3, [pc, #272]	; (8001400 <led7_segment_run13+0x24c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	005a      	lsls	r2, r3, #1
 80012f2:	4b44      	ldr	r3, [pc, #272]	; (8001404 <led7_segment_run13+0x250>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	1c9a      	adds	r2, r3, #2
 80012fa:	4b43      	ldr	r3, [pc, #268]	; (8001408 <led7_segment_run13+0x254>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	db26      	blt.n	8001350 <led7_segment_run13+0x19c>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001308:	4840      	ldr	r0, [pc, #256]	; (800140c <led7_segment_run13+0x258>)
 800130a:	f000 fff0 	bl	80022ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001314:	483d      	ldr	r0, [pc, #244]	; (800140c <led7_segment_run13+0x258>)
 8001316:	f000 ffea 	bl	80022ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800131a:	2201      	movs	r2, #1
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	483b      	ldr	r0, [pc, #236]	; (800140c <led7_segment_run13+0x258>)
 8001320:	f000 ffe5 	bl	80022ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001324:	2201      	movs	r2, #1
 8001326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800132a:	4838      	ldr	r0, [pc, #224]	; (800140c <led7_segment_run13+0x258>)
 800132c:	f000 ffdf 	bl	80022ee <HAL_GPIO_WritePin>
		display7SEGY(counterred13--);
 8001330:	4b37      	ldr	r3, [pc, #220]	; (8001410 <led7_segment_run13+0x25c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	1e5a      	subs	r2, r3, #1
 8001336:	4936      	ldr	r1, [pc, #216]	; (8001410 <led7_segment_run13+0x25c>)
 8001338:	600a      	str	r2, [r1, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fe88 	bl	8001050 <display7SEGY>
		display7SEGX(countergreen13--);
 8001340:	4b34      	ldr	r3, [pc, #208]	; (8001414 <led7_segment_run13+0x260>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	1e5a      	subs	r2, r3, #1
 8001346:	4933      	ldr	r1, [pc, #204]	; (8001414 <led7_segment_run13+0x260>)
 8001348:	600a      	str	r2, [r1, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fdf8 	bl	8000f40 <display7SEGX>
	}
	if(idx_led13>(2*b+c+2)&&idx_led13<=(2*b+2*c+2)){
 8001350:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <led7_segment_run13+0x24c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	005a      	lsls	r2, r3, #1
 8001356:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <led7_segment_run13+0x250>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	1c9a      	adds	r2, r3, #2
 800135e:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <led7_segment_run13+0x254>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	da4a      	bge.n	80013fc <led7_segment_run13+0x248>
 8001366:	4b26      	ldr	r3, [pc, #152]	; (8001400 <led7_segment_run13+0x24c>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <led7_segment_run13+0x250>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	3301      	adds	r3, #1
 8001372:	005a      	lsls	r2, r3, #1
 8001374:	4b24      	ldr	r3, [pc, #144]	; (8001408 <led7_segment_run13+0x254>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	db3f      	blt.n	80013fc <led7_segment_run13+0x248>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001382:	4822      	ldr	r0, [pc, #136]	; (800140c <led7_segment_run13+0x258>)
 8001384:	f000 ffb3 	bl	80022ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800138e:	481f      	ldr	r0, [pc, #124]	; (800140c <led7_segment_run13+0x258>)
 8001390:	f000 ffad 	bl	80022ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001394:	2201      	movs	r2, #1
 8001396:	2180      	movs	r1, #128	; 0x80
 8001398:	481c      	ldr	r0, [pc, #112]	; (800140c <led7_segment_run13+0x258>)
 800139a:	f000 ffa8 	bl	80022ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013a4:	4819      	ldr	r0, [pc, #100]	; (800140c <led7_segment_run13+0x258>)
 80013a6:	f000 ffa2 	bl	80022ee <HAL_GPIO_WritePin>
		display7SEGY(counterred13--);
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <led7_segment_run13+0x25c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	1e5a      	subs	r2, r3, #1
 80013b0:	4917      	ldr	r1, [pc, #92]	; (8001410 <led7_segment_run13+0x25c>)
 80013b2:	600a      	str	r2, [r1, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fe4b 	bl	8001050 <display7SEGY>
		display7SEGX(--counteryellow13);
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <led7_segment_run13+0x264>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	3b01      	subs	r3, #1
 80013c0:	4a15      	ldr	r2, [pc, #84]	; (8001418 <led7_segment_run13+0x264>)
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <led7_segment_run13+0x264>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fdb9 	bl	8000f40 <display7SEGX>
			if(idx_led13>=(2*b+2*c+2)){
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <led7_segment_run13+0x24c>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <led7_segment_run13+0x250>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	3301      	adds	r3, #1
 80013da:	005a      	lsls	r2, r3, #1
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <led7_segment_run13+0x254>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	dc0b      	bgt.n	80013fc <led7_segment_run13+0x248>
				counterred13=a;
 80013e4:	4b0d      	ldr	r3, [pc, #52]	; (800141c <led7_segment_run13+0x268>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a09      	ldr	r2, [pc, #36]	; (8001410 <led7_segment_run13+0x25c>)
 80013ea:	6013      	str	r3, [r2, #0]
				counteryellow13=c;
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <led7_segment_run13+0x250>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a09      	ldr	r2, [pc, #36]	; (8001418 <led7_segment_run13+0x264>)
 80013f2:	6013      	str	r3, [r2, #0]
				countergreen13=b;
 80013f4:	4b02      	ldr	r3, [pc, #8]	; (8001400 <led7_segment_run13+0x24c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a06      	ldr	r2, [pc, #24]	; (8001414 <led7_segment_run13+0x260>)
 80013fa:	6013      	str	r3, [r2, #0]
			}
	}
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000060 	.word	0x20000060
 8001404:	20000064 	.word	0x20000064
 8001408:	200000b8 	.word	0x200000b8
 800140c:	40010c00 	.word	0x40010c00
 8001410:	20000050 	.word	0x20000050
 8001414:	20000058 	.word	0x20000058
 8001418:	20000054 	.word	0x20000054
 800141c:	2000005c 	.word	0x2000005c

08001420 <Save_led7RED_segment_run13>:
//		break;
//	}
//}
void Save_led7_segment_run02(){
}
void Save_led7RED_segment_run13(){
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 7180 	mov.w	r1, #256	; 0x100
 800142a:	481b      	ldr	r0, [pc, #108]	; (8001498 <Save_led7RED_segment_run13+0x78>)
 800142c:	f000 ff5f 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001436:	4818      	ldr	r0, [pc, #96]	; (8001498 <Save_led7RED_segment_run13+0x78>)
 8001438:	f000 ff59 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800143c:	2201      	movs	r2, #1
 800143e:	2180      	movs	r1, #128	; 0x80
 8001440:	4815      	ldr	r0, [pc, #84]	; (8001498 <Save_led7RED_segment_run13+0x78>)
 8001442:	f000 ff54 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001446:	2201      	movs	r2, #1
 8001448:	f44f 7100 	mov.w	r1, #512	; 0x200
 800144c:	4812      	ldr	r0, [pc, #72]	; (8001498 <Save_led7RED_segment_run13+0x78>)
 800144e:	f000 ff4e 	bl	80022ee <HAL_GPIO_WritePin>
	if(checkcounterred==0){
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <Save_led7RED_segment_run13+0x7c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10b      	bne.n	8001472 <Save_led7RED_segment_run13+0x52>
		savecounterred13=++counterred13;
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <Save_led7RED_segment_run13+0x80>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <Save_led7RED_segment_run13+0x80>)
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <Save_led7RED_segment_run13+0x80>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <Save_led7RED_segment_run13+0x84>)
 800146a:	6013      	str	r3, [r2, #0]
		checkcounterred=1;
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <Save_led7RED_segment_run13+0x7c>)
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]
	}
	display7SEGX(savecounterred13++);
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <Save_led7RED_segment_run13+0x84>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	490a      	ldr	r1, [pc, #40]	; (80014a4 <Save_led7RED_segment_run13+0x84>)
 800147a:	600a      	str	r2, [r1, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fd5f 	bl	8000f40 <display7SEGX>
	display7SEGY(2);
 8001482:	2002      	movs	r0, #2
 8001484:	f7ff fde4 	bl	8001050 <display7SEGY>
	--savecounterred13;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <Save_led7RED_segment_run13+0x84>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	3b01      	subs	r3, #1
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <Save_led7RED_segment_run13+0x84>)
 8001490:	6013      	str	r3, [r2, #0]
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40010c00 	.word	0x40010c00
 800149c:	200000cc 	.word	0x200000cc
 80014a0:	20000050 	.word	0x20000050
 80014a4:	200000d0 	.word	0x200000d0

080014a8 <Increase_Save_led7RED_segment_run13>:
void Increase_Save_led7RED_segment_run13(){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b2:	4811      	ldr	r0, [pc, #68]	; (80014f8 <Increase_Save_led7RED_segment_run13+0x50>)
 80014b4:	f000 ff1b 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014be:	480e      	ldr	r0, [pc, #56]	; (80014f8 <Increase_Save_led7RED_segment_run13+0x50>)
 80014c0:	f000 ff15 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2180      	movs	r1, #128	; 0x80
 80014c8:	480b      	ldr	r0, [pc, #44]	; (80014f8 <Increase_Save_led7RED_segment_run13+0x50>)
 80014ca:	f000 ff10 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80014ce:	2201      	movs	r2, #1
 80014d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d4:	4808      	ldr	r0, [pc, #32]	; (80014f8 <Increase_Save_led7RED_segment_run13+0x50>)
 80014d6:	f000 ff0a 	bl	80022ee <HAL_GPIO_WritePin>
	display7SEGX(++savecounterred13);
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <Increase_Save_led7RED_segment_run13+0x54>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	4a06      	ldr	r2, [pc, #24]	; (80014fc <Increase_Save_led7RED_segment_run13+0x54>)
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <Increase_Save_led7RED_segment_run13+0x54>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fd29 	bl	8000f40 <display7SEGX>
	display7SEGY(2);
 80014ee:	2002      	movs	r0, #2
 80014f0:	f7ff fdae 	bl	8001050 <display7SEGY>
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40010c00 	.word	0x40010c00
 80014fc:	200000d0 	.word	0x200000d0

08001500 <Save_led7GREEN_segment_run13>:
void Save_led7GREEN_segment_run13(){
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800150a:	481b      	ldr	r0, [pc, #108]	; (8001578 <Save_led7GREEN_segment_run13+0x78>)
 800150c:	f000 feef 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001516:	4818      	ldr	r0, [pc, #96]	; (8001578 <Save_led7GREEN_segment_run13+0x78>)
 8001518:	f000 fee9 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800151c:	2201      	movs	r2, #1
 800151e:	2180      	movs	r1, #128	; 0x80
 8001520:	4815      	ldr	r0, [pc, #84]	; (8001578 <Save_led7GREEN_segment_run13+0x78>)
 8001522:	f000 fee4 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001526:	2201      	movs	r2, #1
 8001528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800152c:	4812      	ldr	r0, [pc, #72]	; (8001578 <Save_led7GREEN_segment_run13+0x78>)
 800152e:	f000 fede 	bl	80022ee <HAL_GPIO_WritePin>
	if(checkcountergreen==0){
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <Save_led7GREEN_segment_run13+0x7c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10b      	bne.n	8001552 <Save_led7GREEN_segment_run13+0x52>
		savecountergreen13=++countergreen13;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <Save_led7GREEN_segment_run13+0x80>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <Save_led7GREEN_segment_run13+0x80>)
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <Save_led7GREEN_segment_run13+0x80>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <Save_led7GREEN_segment_run13+0x84>)
 800154a:	6013      	str	r3, [r2, #0]
		checkcountergreen=1;
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <Save_led7GREEN_segment_run13+0x7c>)
 800154e:	2201      	movs	r2, #1
 8001550:	601a      	str	r2, [r3, #0]
	}
	display7SEGX(savecountergreen13++);
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <Save_led7GREEN_segment_run13+0x84>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	490a      	ldr	r1, [pc, #40]	; (8001584 <Save_led7GREEN_segment_run13+0x84>)
 800155a:	600a      	str	r2, [r1, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fcef 	bl	8000f40 <display7SEGX>
	display7SEGY(3);
 8001562:	2003      	movs	r0, #3
 8001564:	f7ff fd74 	bl	8001050 <display7SEGY>
	--savecountergreen13;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <Save_led7GREEN_segment_run13+0x84>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	3b01      	subs	r3, #1
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <Save_led7GREEN_segment_run13+0x84>)
 8001570:	6013      	str	r3, [r2, #0]
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40010c00 	.word	0x40010c00
 800157c:	200000c8 	.word	0x200000c8
 8001580:	20000058 	.word	0x20000058
 8001584:	200000c4 	.word	0x200000c4

08001588 <Increase_Save_led7GREEN_segment_run13>:
void Increase_Save_led7GREEN_segment_run13(){
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001592:	4811      	ldr	r0, [pc, #68]	; (80015d8 <Increase_Save_led7GREEN_segment_run13+0x50>)
 8001594:	f000 feab 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800159e:	480e      	ldr	r0, [pc, #56]	; (80015d8 <Increase_Save_led7GREEN_segment_run13+0x50>)
 80015a0:	f000 fea5 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	2180      	movs	r1, #128	; 0x80
 80015a8:	480b      	ldr	r0, [pc, #44]	; (80015d8 <Increase_Save_led7GREEN_segment_run13+0x50>)
 80015aa:	f000 fea0 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015b4:	4808      	ldr	r0, [pc, #32]	; (80015d8 <Increase_Save_led7GREEN_segment_run13+0x50>)
 80015b6:	f000 fe9a 	bl	80022ee <HAL_GPIO_WritePin>
	display7SEGX(++savecountergreen13);
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <Increase_Save_led7GREEN_segment_run13+0x54>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	4a06      	ldr	r2, [pc, #24]	; (80015dc <Increase_Save_led7GREEN_segment_run13+0x54>)
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <Increase_Save_led7GREEN_segment_run13+0x54>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fcb9 	bl	8000f40 <display7SEGX>
	display7SEGY(3);
 80015ce:	2003      	movs	r0, #3
 80015d0:	f7ff fd3e 	bl	8001050 <display7SEGY>
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40010c00 	.word	0x40010c00
 80015dc:	200000c4 	.word	0x200000c4

080015e0 <Save_led7YELLOW_segment_run13>:
void Save_led7YELLOW_segment_run13(){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80015e4:	2200      	movs	r2, #0
 80015e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ea:	4814      	ldr	r0, [pc, #80]	; (800163c <Save_led7YELLOW_segment_run13+0x5c>)
 80015ec:	f000 fe7f 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f6:	4811      	ldr	r0, [pc, #68]	; (800163c <Save_led7YELLOW_segment_run13+0x5c>)
 80015f8:	f000 fe79 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2180      	movs	r1, #128	; 0x80
 8001600:	480e      	ldr	r0, [pc, #56]	; (800163c <Save_led7YELLOW_segment_run13+0x5c>)
 8001602:	f000 fe74 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001606:	2201      	movs	r2, #1
 8001608:	f44f 7100 	mov.w	r1, #512	; 0x200
 800160c:	480b      	ldr	r0, [pc, #44]	; (800163c <Save_led7YELLOW_segment_run13+0x5c>)
 800160e:	f000 fe6e 	bl	80022ee <HAL_GPIO_WritePin>
	if(checkcounteryellow==0){
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <Save_led7YELLOW_segment_run13+0x60>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d106      	bne.n	8001628 <Save_led7YELLOW_segment_run13+0x48>
		savecounteryellow13=counteryellow13;
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <Save_led7YELLOW_segment_run13+0x64>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <Save_led7YELLOW_segment_run13+0x68>)
 8001620:	6013      	str	r3, [r2, #0]
		checkcounteryellow=1;
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <Save_led7YELLOW_segment_run13+0x60>)
 8001624:	2201      	movs	r2, #1
 8001626:	601a      	str	r2, [r3, #0]
	}
	display7SEGX(savecounteryellow13);
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <Save_led7YELLOW_segment_run13+0x68>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fc87 	bl	8000f40 <display7SEGX>
	display7SEGY(4);
 8001632:	2004      	movs	r0, #4
 8001634:	f7ff fd0c 	bl	8001050 <display7SEGY>
	//--savecounteryellow13;
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40010c00 	.word	0x40010c00
 8001640:	200000c0 	.word	0x200000c0
 8001644:	20000054 	.word	0x20000054
 8001648:	200000bc 	.word	0x200000bc

0800164c <Increase_Save_led7YELLOW_segment_run13>:
void Increase_Save_led7YELLOW_segment_run13(){
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001656:	4811      	ldr	r0, [pc, #68]	; (800169c <Increase_Save_led7YELLOW_segment_run13+0x50>)
 8001658:	f000 fe49 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001662:	480e      	ldr	r0, [pc, #56]	; (800169c <Increase_Save_led7YELLOW_segment_run13+0x50>)
 8001664:	f000 fe43 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001668:	2201      	movs	r2, #1
 800166a:	2180      	movs	r1, #128	; 0x80
 800166c:	480b      	ldr	r0, [pc, #44]	; (800169c <Increase_Save_led7YELLOW_segment_run13+0x50>)
 800166e:	f000 fe3e 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001672:	2201      	movs	r2, #1
 8001674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001678:	4808      	ldr	r0, [pc, #32]	; (800169c <Increase_Save_led7YELLOW_segment_run13+0x50>)
 800167a:	f000 fe38 	bl	80022ee <HAL_GPIO_WritePin>
	display7SEGX(++savecounteryellow13);
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <Increase_Save_led7YELLOW_segment_run13+0x54>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <Increase_Save_led7YELLOW_segment_run13+0x54>)
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <Increase_Save_led7YELLOW_segment_run13+0x54>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fc57 	bl	8000f40 <display7SEGX>
	display7SEGY(4);
 8001692:	2004      	movs	r0, #4
 8001694:	f7ff fcdc 	bl	8001050 <display7SEGY>
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40010c00 	.word	0x40010c00
 80016a0:	200000bc 	.word	0x200000bc

080016a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a8:	f000 fb20 	bl	8001cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ac:	f000 f816 	bl	80016dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b0:	f000 f89c 	bl	80017ec <MX_GPIO_Init>
  MX_TIM2_Init();
 80016b4:	f000 f84e 	bl	8001754 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 80016b8:	4806      	ldr	r0, [pc, #24]	; (80016d4 <main+0x30>)
 80016ba:	f001 fa75 	bl	8002ba8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <main+0x34>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]
  while (1)
  {
//	  if(isButtonPressed(0)==1){
//		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
//	  }
	  fsm_automatic_run();
 80016c4:	f7fe fdf6 	bl	80002b4 <fsm_automatic_run>
	  fsm_manual_run();
 80016c8:	f7ff f808 	bl	80006dc <fsm_manual_run>
	  fsm_setting_run();
 80016cc:	f7ff f96a 	bl	80009a4 <fsm_setting_run>
	  fsm_automatic_run();
 80016d0:	e7f8      	b.n	80016c4 <main+0x20>
 80016d2:	bf00      	nop
 80016d4:	200000d4 	.word	0x200000d4
 80016d8:	200000b4 	.word	0x200000b4

080016dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b090      	sub	sp, #64	; 0x40
 80016e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e2:	f107 0318 	add.w	r3, r7, #24
 80016e6:	2228      	movs	r2, #40	; 0x28
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f001 fe0c 	bl	8003308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016fe:	2302      	movs	r3, #2
 8001700:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001702:	2301      	movs	r3, #1
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001706:	2310      	movs	r3, #16
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800170a:	2300      	movs	r3, #0
 800170c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170e:	f107 0318 	add.w	r3, r7, #24
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fe1c 	bl	8002350 <HAL_RCC_OscConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800171e:	f000 f8e3 	bl	80018e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001722:	230f      	movs	r3, #15
 8001724:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f001 f888 	bl	8002850 <HAL_RCC_ClockConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001746:	f000 f8cf 	bl	80018e8 <Error_Handler>
  }
}
 800174a:	bf00      	nop
 800174c:	3740      	adds	r7, #64	; 0x40
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	463b      	mov	r3, r7
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <MX_TIM2_Init+0x94>)
 8001772:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001776:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001778:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <MX_TIM2_Init+0x94>)
 800177a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800177e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <MX_TIM2_Init+0x94>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <MX_TIM2_Init+0x94>)
 8001788:	2209      	movs	r2, #9
 800178a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178c:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <MX_TIM2_Init+0x94>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <MX_TIM2_Init+0x94>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001798:	4813      	ldr	r0, [pc, #76]	; (80017e8 <MX_TIM2_Init+0x94>)
 800179a:	f001 f9b5 	bl	8002b08 <HAL_TIM_Base_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017a4:	f000 f8a0 	bl	80018e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	4619      	mov	r1, r3
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <MX_TIM2_Init+0x94>)
 80017b6:	f001 fb33 	bl	8002e20 <HAL_TIM_ConfigClockSource>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017c0:	f000 f892 	bl	80018e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c4:	2300      	movs	r3, #0
 80017c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017cc:	463b      	mov	r3, r7
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_TIM2_Init+0x94>)
 80017d2:	f001 fd0b 	bl	80031ec <HAL_TIMEx_MasterConfigSynchronization>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017dc:	f000 f884 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200000d4 	.word	0x200000d4

080017ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001800:	4b2f      	ldr	r3, [pc, #188]	; (80018c0 <MX_GPIO_Init+0xd4>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a2e      	ldr	r2, [pc, #184]	; (80018c0 <MX_GPIO_Init+0xd4>)
 8001806:	f043 0310 	orr.w	r3, r3, #16
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <MX_GPIO_Init+0xd4>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001818:	4b29      	ldr	r3, [pc, #164]	; (80018c0 <MX_GPIO_Init+0xd4>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a28      	ldr	r2, [pc, #160]	; (80018c0 <MX_GPIO_Init+0xd4>)
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <MX_GPIO_Init+0xd4>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <MX_GPIO_Init+0xd4>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	4a22      	ldr	r2, [pc, #136]	; (80018c0 <MX_GPIO_Init+0xd4>)
 8001836:	f043 0308 	orr.w	r3, r3, #8
 800183a:	6193      	str	r3, [r2, #24]
 800183c:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <MX_GPIO_Init+0xd4>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED2_Pin
 8001848:	2200      	movs	r2, #0
 800184a:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 800184e:	481d      	ldr	r0, [pc, #116]	; (80018c4 <MX_GPIO_Init+0xd8>)
 8001850:	f000 fd4d 	bl	80022ee <HAL_GPIO_WritePin>
                          |LED_RED_Pin|LED_GREEN2_Pin|LED_YELLOW2_Pin|SEG0Y_Pin
                          |SEG1Y_Pin|SEG2Y_Pin|SEG3Y_Pin|SEG4Y_Pin
                          |SEG5Y_Pin|SEG6Y_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0X_Pin|SEG1X_Pin|SEG2X_Pin|EN3_Pin
 8001854:	2200      	movs	r2, #0
 8001856:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800185a:	481b      	ldr	r0, [pc, #108]	; (80018c8 <MX_GPIO_Init+0xdc>)
 800185c:	f000 fd47 	bl	80022ee <HAL_GPIO_WritePin>
                          |SEG3X_Pin|SEG4X_Pin|SEG5X_Pin|SEG6X_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin;
 8001860:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001864:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800186a:	2301      	movs	r3, #1
 800186c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186e:	f107 0310 	add.w	r3, r7, #16
 8001872:	4619      	mov	r1, r3
 8001874:	4815      	ldr	r0, [pc, #84]	; (80018cc <MX_GPIO_Init+0xe0>)
 8001876:	f000 fba9 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED1_Pin LED_GREEN1_Pin LED_YELLOW1_Pin LED_RED2_Pin
                           LED_RED_Pin LED_GREEN2_Pin LED_YELLOW2_Pin SEG0Y_Pin
                           SEG1Y_Pin SEG2Y_Pin SEG3Y_Pin SEG4Y_Pin
                           SEG5Y_Pin SEG6Y_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED2_Pin
 800187a:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800187e:	613b      	str	r3, [r7, #16]
                          |LED_RED_Pin|LED_GREEN2_Pin|LED_YELLOW2_Pin|SEG0Y_Pin
                          |SEG1Y_Pin|SEG2Y_Pin|SEG3Y_Pin|SEG4Y_Pin
                          |SEG5Y_Pin|SEG6Y_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2302      	movs	r3, #2
 800188a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	4619      	mov	r1, r3
 8001892:	480c      	ldr	r0, [pc, #48]	; (80018c4 <MX_GPIO_Init+0xd8>)
 8001894:	f000 fb9a 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0X_Pin SEG1X_Pin SEG2X_Pin EN3_Pin
                           SEG3X_Pin SEG4X_Pin SEG5X_Pin SEG6X_Pin
                           EN0_Pin EN1_Pin EN2_Pin */
  GPIO_InitStruct.Pin = SEG0X_Pin|SEG1X_Pin|SEG2X_Pin|EN3_Pin
 8001898:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800189c:	613b      	str	r3, [r7, #16]
                          |SEG3X_Pin|SEG4X_Pin|SEG5X_Pin|SEG6X_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189e:	2301      	movs	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2302      	movs	r3, #2
 80018a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018aa:	f107 0310 	add.w	r3, r7, #16
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_GPIO_Init+0xdc>)
 80018b2:	f000 fb8b 	bl	8001fcc <HAL_GPIO_Init>

}
 80018b6:	bf00      	nop
 80018b8:	3720      	adds	r7, #32
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40010800 	.word	0x40010800
 80018c8:	40010c00 	.word	0x40010c00
 80018cc:	40011000 	.word	0x40011000

080018d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	    timerRun();
 80018d8:	f000 f846 	bl	8001968 <timerRun>
		getKeyInput();
 80018dc:	f7fe fc60 	bl	80001a0 <getKeyInput>
 }
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ec:	b672      	cpsid	i
}
 80018ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <Error_Handler+0x8>
	...

080018f4 <setTimer>:
#define TIMER_TICK 10

int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];

void setTimer(int index, int value){
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
	timer_counter[index]=value/TIMER_TICK;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	4a09      	ldr	r2, [pc, #36]	; (8001928 <setTimer+0x34>)
 8001902:	fb82 1203 	smull	r1, r2, r2, r3
 8001906:	1092      	asrs	r2, r2, #2
 8001908:	17db      	asrs	r3, r3, #31
 800190a:	1ad2      	subs	r2, r2, r3
 800190c:	4907      	ldr	r1, [pc, #28]	; (800192c <setTimer+0x38>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index]=0;
 8001914:	4a06      	ldr	r2, [pc, #24]	; (8001930 <setTimer+0x3c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2100      	movs	r1, #0
 800191a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	66666667 	.word	0x66666667
 800192c:	2000011c 	.word	0x2000011c
 8001930:	20000144 	.word	0x20000144

08001934 <isTimerExpired>:

int isTimerExpired(int index){
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	if(timer_flag[index]==1){
 800193c:	4a09      	ldr	r2, [pc, #36]	; (8001964 <isTimerExpired+0x30>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d106      	bne.n	8001956 <isTimerExpired+0x22>
		timer_flag[index]=0;
 8001948:	4a06      	ldr	r2, [pc, #24]	; (8001964 <isTimerExpired+0x30>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2100      	movs	r1, #0
 800194e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <isTimerExpired+0x24>
	}
	return 0;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000144 	.word	0x20000144

08001968 <timerRun>:

void timerRun(){
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_COUNTER;i++){
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	e01c      	b.n	80019ae <timerRun+0x46>
		if(timer_counter[i]>0){
 8001974:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <timerRun+0x58>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197c:	2b00      	cmp	r3, #0
 800197e:	dd13      	ble.n	80019a8 <timerRun+0x40>
			timer_counter[i]--;
 8001980:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <timerRun+0x58>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001988:	1e5a      	subs	r2, r3, #1
 800198a:	490d      	ldr	r1, [pc, #52]	; (80019c0 <timerRun+0x58>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i]<=0) timer_flag[i]=1;
 8001992:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <timerRun+0x58>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199a:	2b00      	cmp	r3, #0
 800199c:	dc04      	bgt.n	80019a8 <timerRun+0x40>
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <timerRun+0x5c>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2101      	movs	r1, #1
 80019a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<MAX_COUNTER;i++){
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3301      	adds	r3, #1
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b09      	cmp	r3, #9
 80019b2:	dddf      	ble.n	8001974 <timerRun+0xc>
		}
	}
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	2000011c 	.word	0x2000011c
 80019c4:	20000144 	.word	0x20000144

080019c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_MspInit+0x5c>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <HAL_MspInit+0x5c>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6193      	str	r3, [r2, #24]
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_MspInit+0x5c>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <HAL_MspInit+0x5c>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <HAL_MspInit+0x5c>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f0:	61d3      	str	r3, [r2, #28]
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <HAL_MspInit+0x5c>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_MspInit+0x60>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_MspInit+0x60>)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010000 	.word	0x40010000

08001a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a3c:	d113      	bne.n	8001a66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_TIM_Base_MspInit+0x44>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <HAL_TIM_Base_MspInit+0x44>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	61d3      	str	r3, [r2, #28]
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_TIM_Base_MspInit+0x44>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2100      	movs	r1, #0
 8001a5a:	201c      	movs	r0, #28
 8001a5c:	f000 fa7f 	bl	8001f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a60:	201c      	movs	r0, #28
 8001a62:	f000 fa98 	bl	8001f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000

08001a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <NMI_Handler+0x4>

08001a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <HardFault_Handler+0x4>

08001a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <MemManage_Handler+0x4>

08001a86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8a:	e7fe      	b.n	8001a8a <BusFault_Handler+0x4>

08001a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <UsageFault_Handler+0x4>

08001a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aba:	f000 f95d 	bl	8001d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <TIM2_IRQHandler+0x10>)
 8001aca:	f001 f8b9 	bl	8002c40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200000d4 	.word	0x200000d4

08001ad8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <set_led>:
 *  Created on: 29 thg 10, 2024
 *      Author: ADMIN
 */
#include "traffic_light.h"

void set_led(){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED1_Pin|LED_YELLOW2_Pin
 8001ae8:	2201      	movs	r2, #1
 8001aea:	21fe      	movs	r1, #254	; 0xfe
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <set_led+0x14>)
 8001aee:	f000 fbfe 	bl	80022ee <HAL_GPIO_WritePin>
	                          |LED_RED_Pin|LED_GREEN2_Pin|LED_RED2_Pin, GPIO_PIN_SET);
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40010800 	.word	0x40010800

08001afc <Turn_On_All_LED_RED>:

void Turn_On_All_LED_RED(){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin , RESET);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2112      	movs	r1, #18
 8001b04:	4807      	ldr	r0, [pc, #28]	; (8001b24 <Turn_On_All_LED_RED+0x28>)
 8001b06:	f000 fbf2 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin , SET);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	2144      	movs	r1, #68	; 0x44
 8001b0e:	4805      	ldr	r0, [pc, #20]	; (8001b24 <Turn_On_All_LED_RED+0x28>)
 8001b10:	f000 fbed 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin , SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	2188      	movs	r1, #136	; 0x88
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <Turn_On_All_LED_RED+0x28>)
 8001b1a:	f000 fbe8 	bl	80022ee <HAL_GPIO_WritePin>
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40010800 	.word	0x40010800

08001b28 <Turn_On_All_LED_GREEN>:
void Turn_On_All_LED_GREEN(){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin , RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2144      	movs	r1, #68	; 0x44
 8001b30:	4807      	ldr	r0, [pc, #28]	; (8001b50 <Turn_On_All_LED_GREEN+0x28>)
 8001b32:	f000 fbdc 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin , SET);
 8001b36:	2201      	movs	r2, #1
 8001b38:	2112      	movs	r1, #18
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <Turn_On_All_LED_GREEN+0x28>)
 8001b3c:	f000 fbd7 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin , SET);
 8001b40:	2201      	movs	r2, #1
 8001b42:	2188      	movs	r1, #136	; 0x88
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <Turn_On_All_LED_GREEN+0x28>)
 8001b46:	f000 fbd2 	bl	80022ee <HAL_GPIO_WritePin>
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40010800 	.word	0x40010800

08001b54 <Turn_On_All_LED_YELLOW>:
void Turn_On_All_LED_YELLOW(){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin , RESET);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2188      	movs	r1, #136	; 0x88
 8001b5c:	4807      	ldr	r0, [pc, #28]	; (8001b7c <Turn_On_All_LED_YELLOW+0x28>)
 8001b5e:	f000 fbc6 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin , SET);
 8001b62:	2201      	movs	r2, #1
 8001b64:	2144      	movs	r1, #68	; 0x44
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <Turn_On_All_LED_YELLOW+0x28>)
 8001b68:	f000 fbc1 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin , SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	2112      	movs	r1, #18
 8001b70:	4802      	ldr	r0, [pc, #8]	; (8001b7c <Turn_On_All_LED_YELLOW+0x28>)
 8001b72:	f000 fbbc 	bl	80022ee <HAL_GPIO_WritePin>
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40010800 	.word	0x40010800

08001b80 <LED_RED1_GREEN2>:
void LED_RED1_GREEN2(){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	2110      	movs	r1, #16
 8001b88:	480e      	ldr	r0, [pc, #56]	; (8001bc4 <LED_RED1_GREEN2+0x44>)
 8001b8a:	f000 fbb0 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2104      	movs	r1, #4
 8001b92:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <LED_RED1_GREEN2+0x44>)
 8001b94:	f000 fbab 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2108      	movs	r1, #8
 8001b9c:	4809      	ldr	r0, [pc, #36]	; (8001bc4 <LED_RED1_GREEN2+0x44>)
 8001b9e:	f000 fba6 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	2180      	movs	r1, #128	; 0x80
 8001ba6:	4807      	ldr	r0, [pc, #28]	; (8001bc4 <LED_RED1_GREEN2+0x44>)
 8001ba8:	f000 fba1 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2102      	movs	r1, #2
 8001bb0:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <LED_RED1_GREEN2+0x44>)
 8001bb2:	f000 fb9c 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2140      	movs	r1, #64	; 0x40
 8001bba:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <LED_RED1_GREEN2+0x44>)
 8001bbc:	f000 fb97 	bl	80022ee <HAL_GPIO_WritePin>
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40010800 	.word	0x40010800

08001bc8 <LED_RED1_YELLOW2>:

void LED_RED1_YELLOW2(){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2110      	movs	r1, #16
 8001bd0:	480e      	ldr	r0, [pc, #56]	; (8001c0c <LED_RED1_YELLOW2+0x44>)
 8001bd2:	f000 fb8c 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2104      	movs	r1, #4
 8001bda:	480c      	ldr	r0, [pc, #48]	; (8001c0c <LED_RED1_YELLOW2+0x44>)
 8001bdc:	f000 fb87 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001be0:	2201      	movs	r2, #1
 8001be2:	2108      	movs	r1, #8
 8001be4:	4809      	ldr	r0, [pc, #36]	; (8001c0c <LED_RED1_YELLOW2+0x44>)
 8001be6:	f000 fb82 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8001bea:	2201      	movs	r2, #1
 8001bec:	2140      	movs	r1, #64	; 0x40
 8001bee:	4807      	ldr	r0, [pc, #28]	; (8001c0c <LED_RED1_YELLOW2+0x44>)
 8001bf0:	f000 fb7d 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2102      	movs	r1, #2
 8001bf8:	4804      	ldr	r0, [pc, #16]	; (8001c0c <LED_RED1_YELLOW2+0x44>)
 8001bfa:	f000 fb78 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2180      	movs	r1, #128	; 0x80
 8001c02:	4802      	ldr	r0, [pc, #8]	; (8001c0c <LED_RED1_YELLOW2+0x44>)
 8001c04:	f000 fb73 	bl	80022ee <HAL_GPIO_WritePin>
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40010800 	.word	0x40010800

08001c10 <LED_GREEN1_RED2>:

void LED_GREEN1_RED2(){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001c14:	2201      	movs	r2, #1
 8001c16:	2102      	movs	r1, #2
 8001c18:	480e      	ldr	r0, [pc, #56]	; (8001c54 <LED_GREEN1_RED2+0x44>)
 8001c1a:	f000 fb68 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001c1e:	2201      	movs	r2, #1
 8001c20:	2180      	movs	r1, #128	; 0x80
 8001c22:	480c      	ldr	r0, [pc, #48]	; (8001c54 <LED_GREEN1_RED2+0x44>)
 8001c24:	f000 fb63 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2108      	movs	r1, #8
 8001c2c:	4809      	ldr	r0, [pc, #36]	; (8001c54 <LED_GREEN1_RED2+0x44>)
 8001c2e:	f000 fb5e 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8001c32:	2201      	movs	r2, #1
 8001c34:	2140      	movs	r1, #64	; 0x40
 8001c36:	4807      	ldr	r0, [pc, #28]	; (8001c54 <LED_GREEN1_RED2+0x44>)
 8001c38:	f000 fb59 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2104      	movs	r1, #4
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <LED_GREEN1_RED2+0x44>)
 8001c42:	f000 fb54 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2110      	movs	r1, #16
 8001c4a:	4802      	ldr	r0, [pc, #8]	; (8001c54 <LED_GREEN1_RED2+0x44>)
 8001c4c:	f000 fb4f 	bl	80022ee <HAL_GPIO_WritePin>
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40010800 	.word	0x40010800

08001c58 <LED_YELLOW1_RED2>:

void LED_YELLOW1_RED2(){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2102      	movs	r1, #2
 8001c60:	480e      	ldr	r0, [pc, #56]	; (8001c9c <LED_YELLOW1_RED2+0x44>)
 8001c62:	f000 fb44 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001c66:	2201      	movs	r2, #1
 8001c68:	2180      	movs	r1, #128	; 0x80
 8001c6a:	480c      	ldr	r0, [pc, #48]	; (8001c9c <LED_YELLOW1_RED2+0x44>)
 8001c6c:	f000 fb3f 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001c70:	2201      	movs	r2, #1
 8001c72:	2104      	movs	r1, #4
 8001c74:	4809      	ldr	r0, [pc, #36]	; (8001c9c <LED_YELLOW1_RED2+0x44>)
 8001c76:	f000 fb3a 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	2140      	movs	r1, #64	; 0x40
 8001c7e:	4807      	ldr	r0, [pc, #28]	; (8001c9c <LED_YELLOW1_RED2+0x44>)
 8001c80:	f000 fb35 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2108      	movs	r1, #8
 8001c88:	4804      	ldr	r0, [pc, #16]	; (8001c9c <LED_YELLOW1_RED2+0x44>)
 8001c8a:	f000 fb30 	bl	80022ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2110      	movs	r1, #16
 8001c92:	4802      	ldr	r0, [pc, #8]	; (8001c9c <LED_YELLOW1_RED2+0x44>)
 8001c94:	f000 fb2b 	bl	80022ee <HAL_GPIO_WritePin>
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40010800 	.word	0x40010800

08001ca0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca0:	f7ff ff1a 	bl	8001ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca4:	480b      	ldr	r0, [pc, #44]	; (8001cd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ca6:	490c      	ldr	r1, [pc, #48]	; (8001cd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ca8:	4a0c      	ldr	r2, [pc, #48]	; (8001cdc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cac:	e002      	b.n	8001cb4 <LoopCopyDataInit>

08001cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb2:	3304      	adds	r3, #4

08001cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb8:	d3f9      	bcc.n	8001cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cba:	4a09      	ldr	r2, [pc, #36]	; (8001ce0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cbc:	4c09      	ldr	r4, [pc, #36]	; (8001ce4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc0:	e001      	b.n	8001cc6 <LoopFillZerobss>

08001cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc4:	3204      	adds	r2, #4

08001cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc8:	d3fb      	bcc.n	8001cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cca:	f001 faf9 	bl	80032c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cce:	f7ff fce9 	bl	80016a4 <main>
  bx lr
 8001cd2:	4770      	bx	lr
  ldr r0, =_sdata
 8001cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001cdc:	08003368 	.word	0x08003368
  ldr r2, =_sbss
 8001ce0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001ce4:	20000170 	.word	0x20000170

08001ce8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC1_2_IRQHandler>
	...

08001cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <HAL_Init+0x28>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a07      	ldr	r2, [pc, #28]	; (8001d14 <HAL_Init+0x28>)
 8001cf6:	f043 0310 	orr.w	r3, r3, #16
 8001cfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cfc:	2003      	movs	r0, #3
 8001cfe:	f000 f923 	bl	8001f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d02:	200f      	movs	r0, #15
 8001d04:	f000 f808 	bl	8001d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d08:	f7ff fe5e 	bl	80019c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40022000 	.word	0x40022000

08001d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_InitTick+0x54>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_InitTick+0x58>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 f93b 	bl	8001fb2 <HAL_SYSTICK_Config>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00e      	b.n	8001d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b0f      	cmp	r3, #15
 8001d4a:	d80a      	bhi.n	8001d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f000 f903 	bl	8001f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d58:	4a06      	ldr	r2, [pc, #24]	; (8001d74 <HAL_InitTick+0x5c>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e000      	b.n	8001d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000068 	.word	0x20000068
 8001d70:	20000070 	.word	0x20000070
 8001d74:	2000006c 	.word	0x2000006c

08001d78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_IncTick+0x1c>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_IncTick+0x20>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4413      	add	r3, r2
 8001d88:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <HAL_IncTick+0x20>)
 8001d8a:	6013      	str	r3, [r2, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	20000070 	.word	0x20000070
 8001d98:	2000016c 	.word	0x2000016c

08001d9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001da0:	4b02      	ldr	r3, [pc, #8]	; (8001dac <HAL_GetTick+0x10>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	2000016c 	.word	0x2000016c

08001db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de2:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	60d3      	str	r3, [r2, #12]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <__NVIC_GetPriorityGrouping+0x18>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	f003 0307 	and.w	r3, r3, #7
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	db0b      	blt.n	8001e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	f003 021f 	and.w	r2, r3, #31
 8001e2c:	4906      	ldr	r1, [pc, #24]	; (8001e48 <__NVIC_EnableIRQ+0x34>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	2001      	movs	r0, #1
 8001e36:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	; (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	; (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f1c3 0307 	rsb	r3, r3, #7
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	bf28      	it	cs
 8001ebe:	2304      	movcs	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d902      	bls.n	8001ed0 <NVIC_EncodePriority+0x30>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3b03      	subs	r3, #3
 8001ece:	e000      	b.n	8001ed2 <NVIC_EncodePriority+0x32>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43d9      	mvns	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	4313      	orrs	r3, r2
         );
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	; 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f14:	d301      	bcc.n	8001f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00f      	b.n	8001f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <SysTick_Config+0x40>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f22:	210f      	movs	r1, #15
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295
 8001f28:	f7ff ff90 	bl	8001e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <SysTick_Config+0x40>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f32:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <SysTick_Config+0x40>)
 8001f34:	2207      	movs	r2, #7
 8001f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	e000e010 	.word	0xe000e010

08001f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff2d 	bl	8001db0 <__NVIC_SetPriorityGrouping>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f70:	f7ff ff42 	bl	8001df8 <__NVIC_GetPriorityGrouping>
 8001f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	6978      	ldr	r0, [r7, #20]
 8001f7c:	f7ff ff90 	bl	8001ea0 <NVIC_EncodePriority>
 8001f80:	4602      	mov	r2, r0
 8001f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff5f 	bl	8001e4c <__NVIC_SetPriority>
}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff35 	bl	8001e14 <__NVIC_EnableIRQ>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ffa2 	bl	8001f04 <SysTick_Config>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b08b      	sub	sp, #44	; 0x2c
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fde:	e148      	b.n	8002272 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f040 8137 	bne.w	800226c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4aa3      	ldr	r2, [pc, #652]	; (8002290 <HAL_GPIO_Init+0x2c4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d05e      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 8002008:	4aa1      	ldr	r2, [pc, #644]	; (8002290 <HAL_GPIO_Init+0x2c4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d875      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 800200e:	4aa1      	ldr	r2, [pc, #644]	; (8002294 <HAL_GPIO_Init+0x2c8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d058      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 8002014:	4a9f      	ldr	r2, [pc, #636]	; (8002294 <HAL_GPIO_Init+0x2c8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d86f      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 800201a:	4a9f      	ldr	r2, [pc, #636]	; (8002298 <HAL_GPIO_Init+0x2cc>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d052      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 8002020:	4a9d      	ldr	r2, [pc, #628]	; (8002298 <HAL_GPIO_Init+0x2cc>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d869      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 8002026:	4a9d      	ldr	r2, [pc, #628]	; (800229c <HAL_GPIO_Init+0x2d0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d04c      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 800202c:	4a9b      	ldr	r2, [pc, #620]	; (800229c <HAL_GPIO_Init+0x2d0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d863      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 8002032:	4a9b      	ldr	r2, [pc, #620]	; (80022a0 <HAL_GPIO_Init+0x2d4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d046      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
 8002038:	4a99      	ldr	r2, [pc, #612]	; (80022a0 <HAL_GPIO_Init+0x2d4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d85d      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 800203e:	2b12      	cmp	r3, #18
 8002040:	d82a      	bhi.n	8002098 <HAL_GPIO_Init+0xcc>
 8002042:	2b12      	cmp	r3, #18
 8002044:	d859      	bhi.n	80020fa <HAL_GPIO_Init+0x12e>
 8002046:	a201      	add	r2, pc, #4	; (adr r2, 800204c <HAL_GPIO_Init+0x80>)
 8002048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204c:	080020c7 	.word	0x080020c7
 8002050:	080020a1 	.word	0x080020a1
 8002054:	080020b3 	.word	0x080020b3
 8002058:	080020f5 	.word	0x080020f5
 800205c:	080020fb 	.word	0x080020fb
 8002060:	080020fb 	.word	0x080020fb
 8002064:	080020fb 	.word	0x080020fb
 8002068:	080020fb 	.word	0x080020fb
 800206c:	080020fb 	.word	0x080020fb
 8002070:	080020fb 	.word	0x080020fb
 8002074:	080020fb 	.word	0x080020fb
 8002078:	080020fb 	.word	0x080020fb
 800207c:	080020fb 	.word	0x080020fb
 8002080:	080020fb 	.word	0x080020fb
 8002084:	080020fb 	.word	0x080020fb
 8002088:	080020fb 	.word	0x080020fb
 800208c:	080020fb 	.word	0x080020fb
 8002090:	080020a9 	.word	0x080020a9
 8002094:	080020bd 	.word	0x080020bd
 8002098:	4a82      	ldr	r2, [pc, #520]	; (80022a4 <HAL_GPIO_Init+0x2d8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800209e:	e02c      	b.n	80020fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	623b      	str	r3, [r7, #32]
          break;
 80020a6:	e029      	b.n	80020fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	3304      	adds	r3, #4
 80020ae:	623b      	str	r3, [r7, #32]
          break;
 80020b0:	e024      	b.n	80020fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	3308      	adds	r3, #8
 80020b8:	623b      	str	r3, [r7, #32]
          break;
 80020ba:	e01f      	b.n	80020fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	330c      	adds	r3, #12
 80020c2:	623b      	str	r3, [r7, #32]
          break;
 80020c4:	e01a      	b.n	80020fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d102      	bne.n	80020d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020ce:	2304      	movs	r3, #4
 80020d0:	623b      	str	r3, [r7, #32]
          break;
 80020d2:	e013      	b.n	80020fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d105      	bne.n	80020e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020dc:	2308      	movs	r3, #8
 80020de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	611a      	str	r2, [r3, #16]
          break;
 80020e6:	e009      	b.n	80020fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020e8:	2308      	movs	r3, #8
 80020ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	615a      	str	r2, [r3, #20]
          break;
 80020f2:	e003      	b.n	80020fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020f4:	2300      	movs	r3, #0
 80020f6:	623b      	str	r3, [r7, #32]
          break;
 80020f8:	e000      	b.n	80020fc <HAL_GPIO_Init+0x130>
          break;
 80020fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2bff      	cmp	r3, #255	; 0xff
 8002100:	d801      	bhi.n	8002106 <HAL_GPIO_Init+0x13a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	e001      	b.n	800210a <HAL_GPIO_Init+0x13e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3304      	adds	r3, #4
 800210a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2bff      	cmp	r3, #255	; 0xff
 8002110:	d802      	bhi.n	8002118 <HAL_GPIO_Init+0x14c>
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	e002      	b.n	800211e <HAL_GPIO_Init+0x152>
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	3b08      	subs	r3, #8
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	210f      	movs	r1, #15
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	401a      	ands	r2, r3
 8002130:	6a39      	ldr	r1, [r7, #32]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	431a      	orrs	r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8090 	beq.w	800226c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800214c:	4b56      	ldr	r3, [pc, #344]	; (80022a8 <HAL_GPIO_Init+0x2dc>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4a55      	ldr	r2, [pc, #340]	; (80022a8 <HAL_GPIO_Init+0x2dc>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6193      	str	r3, [r2, #24]
 8002158:	4b53      	ldr	r3, [pc, #332]	; (80022a8 <HAL_GPIO_Init+0x2dc>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002164:	4a51      	ldr	r2, [pc, #324]	; (80022ac <HAL_GPIO_Init+0x2e0>)
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	089b      	lsrs	r3, r3, #2
 800216a:	3302      	adds	r3, #2
 800216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002170:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	220f      	movs	r2, #15
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4013      	ands	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a49      	ldr	r2, [pc, #292]	; (80022b0 <HAL_GPIO_Init+0x2e4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00d      	beq.n	80021ac <HAL_GPIO_Init+0x1e0>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a48      	ldr	r2, [pc, #288]	; (80022b4 <HAL_GPIO_Init+0x2e8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d007      	beq.n	80021a8 <HAL_GPIO_Init+0x1dc>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a47      	ldr	r2, [pc, #284]	; (80022b8 <HAL_GPIO_Init+0x2ec>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_GPIO_Init+0x1d8>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e004      	b.n	80021ae <HAL_GPIO_Init+0x1e2>
 80021a4:	2303      	movs	r3, #3
 80021a6:	e002      	b.n	80021ae <HAL_GPIO_Init+0x1e2>
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <HAL_GPIO_Init+0x1e2>
 80021ac:	2300      	movs	r3, #0
 80021ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b0:	f002 0203 	and.w	r2, r2, #3
 80021b4:	0092      	lsls	r2, r2, #2
 80021b6:	4093      	lsls	r3, r2
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021be:	493b      	ldr	r1, [pc, #236]	; (80022ac <HAL_GPIO_Init+0x2e0>)
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	3302      	adds	r3, #2
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d006      	beq.n	80021e6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021d8:	4b38      	ldr	r3, [pc, #224]	; (80022bc <HAL_GPIO_Init+0x2f0>)
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	4937      	ldr	r1, [pc, #220]	; (80022bc <HAL_GPIO_Init+0x2f0>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	608b      	str	r3, [r1, #8]
 80021e4:	e006      	b.n	80021f4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021e6:	4b35      	ldr	r3, [pc, #212]	; (80022bc <HAL_GPIO_Init+0x2f0>)
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	4933      	ldr	r1, [pc, #204]	; (80022bc <HAL_GPIO_Init+0x2f0>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d006      	beq.n	800220e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002200:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <HAL_GPIO_Init+0x2f0>)
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	492d      	ldr	r1, [pc, #180]	; (80022bc <HAL_GPIO_Init+0x2f0>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	60cb      	str	r3, [r1, #12]
 800220c:	e006      	b.n	800221c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800220e:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <HAL_GPIO_Init+0x2f0>)
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	43db      	mvns	r3, r3
 8002216:	4929      	ldr	r1, [pc, #164]	; (80022bc <HAL_GPIO_Init+0x2f0>)
 8002218:	4013      	ands	r3, r2
 800221a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d006      	beq.n	8002236 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002228:	4b24      	ldr	r3, [pc, #144]	; (80022bc <HAL_GPIO_Init+0x2f0>)
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	4923      	ldr	r1, [pc, #140]	; (80022bc <HAL_GPIO_Init+0x2f0>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]
 8002234:	e006      	b.n	8002244 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002236:	4b21      	ldr	r3, [pc, #132]	; (80022bc <HAL_GPIO_Init+0x2f0>)
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	43db      	mvns	r3, r3
 800223e:	491f      	ldr	r1, [pc, #124]	; (80022bc <HAL_GPIO_Init+0x2f0>)
 8002240:	4013      	ands	r3, r2
 8002242:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d006      	beq.n	800225e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <HAL_GPIO_Init+0x2f0>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4919      	ldr	r1, [pc, #100]	; (80022bc <HAL_GPIO_Init+0x2f0>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]
 800225c:	e006      	b.n	800226c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800225e:	4b17      	ldr	r3, [pc, #92]	; (80022bc <HAL_GPIO_Init+0x2f0>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	43db      	mvns	r3, r3
 8002266:	4915      	ldr	r1, [pc, #84]	; (80022bc <HAL_GPIO_Init+0x2f0>)
 8002268:	4013      	ands	r3, r2
 800226a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	3301      	adds	r3, #1
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	f47f aeaf 	bne.w	8001fe0 <HAL_GPIO_Init+0x14>
  }
}
 8002282:	bf00      	nop
 8002284:	bf00      	nop
 8002286:	372c      	adds	r7, #44	; 0x2c
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	10320000 	.word	0x10320000
 8002294:	10310000 	.word	0x10310000
 8002298:	10220000 	.word	0x10220000
 800229c:	10210000 	.word	0x10210000
 80022a0:	10120000 	.word	0x10120000
 80022a4:	10110000 	.word	0x10110000
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40010000 	.word	0x40010000
 80022b0:	40010800 	.word	0x40010800
 80022b4:	40010c00 	.word	0x40010c00
 80022b8:	40011000 	.word	0x40011000
 80022bc:	40010400 	.word	0x40010400

080022c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	887b      	ldrh	r3, [r7, #2]
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	e001      	b.n	80022e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	460b      	mov	r3, r1
 80022f8:	807b      	strh	r3, [r7, #2]
 80022fa:	4613      	mov	r3, r2
 80022fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022fe:	787b      	ldrb	r3, [r7, #1]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002304:	887a      	ldrh	r2, [r7, #2]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800230a:	e003      	b.n	8002314 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800230c:	887b      	ldrh	r3, [r7, #2]
 800230e:	041a      	lsls	r2, r3, #16
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	611a      	str	r2, [r3, #16]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr

0800231e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002330:	887a      	ldrh	r2, [r7, #2]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4013      	ands	r3, r2
 8002336:	041a      	lsls	r2, r3, #16
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	43d9      	mvns	r1, r3
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	400b      	ands	r3, r1
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	611a      	str	r2, [r3, #16]
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e26c      	b.n	800283c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 8087 	beq.w	800247e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002370:	4b92      	ldr	r3, [pc, #584]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	2b04      	cmp	r3, #4
 800237a:	d00c      	beq.n	8002396 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800237c:	4b8f      	ldr	r3, [pc, #572]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b08      	cmp	r3, #8
 8002386:	d112      	bne.n	80023ae <HAL_RCC_OscConfig+0x5e>
 8002388:	4b8c      	ldr	r3, [pc, #560]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002394:	d10b      	bne.n	80023ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002396:	4b89      	ldr	r3, [pc, #548]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d06c      	beq.n	800247c <HAL_RCC_OscConfig+0x12c>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d168      	bne.n	800247c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e246      	b.n	800283c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b6:	d106      	bne.n	80023c6 <HAL_RCC_OscConfig+0x76>
 80023b8:	4b80      	ldr	r3, [pc, #512]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a7f      	ldr	r2, [pc, #508]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	e02e      	b.n	8002424 <HAL_RCC_OscConfig+0xd4>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x98>
 80023ce:	4b7b      	ldr	r3, [pc, #492]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a7a      	ldr	r2, [pc, #488]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	4b78      	ldr	r3, [pc, #480]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a77      	ldr	r2, [pc, #476]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e01d      	b.n	8002424 <HAL_RCC_OscConfig+0xd4>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0xbc>
 80023f2:	4b72      	ldr	r3, [pc, #456]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a71      	ldr	r2, [pc, #452]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80023f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b6f      	ldr	r3, [pc, #444]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a6e      	ldr	r2, [pc, #440]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e00b      	b.n	8002424 <HAL_RCC_OscConfig+0xd4>
 800240c:	4b6b      	ldr	r3, [pc, #428]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a6a      	ldr	r2, [pc, #424]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b68      	ldr	r3, [pc, #416]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a67      	ldr	r2, [pc, #412]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 800241e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002422:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d013      	beq.n	8002454 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7ff fcb6 	bl	8001d9c <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002434:	f7ff fcb2 	bl	8001d9c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e1fa      	b.n	800283c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	4b5d      	ldr	r3, [pc, #372]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0xe4>
 8002452:	e014      	b.n	800247e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7ff fca2 	bl	8001d9c <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800245c:	f7ff fc9e 	bl	8001d9c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e1e6      	b.n	800283c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246e:	4b53      	ldr	r3, [pc, #332]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x10c>
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d063      	beq.n	8002552 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800248a:	4b4c      	ldr	r3, [pc, #304]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00b      	beq.n	80024ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002496:	4b49      	ldr	r3, [pc, #292]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d11c      	bne.n	80024dc <HAL_RCC_OscConfig+0x18c>
 80024a2:	4b46      	ldr	r3, [pc, #280]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d116      	bne.n	80024dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ae:	4b43      	ldr	r3, [pc, #268]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_RCC_OscConfig+0x176>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d001      	beq.n	80024c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e1ba      	b.n	800283c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c6:	4b3d      	ldr	r3, [pc, #244]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4939      	ldr	r1, [pc, #228]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024da:	e03a      	b.n	8002552 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d020      	beq.n	8002526 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e4:	4b36      	ldr	r3, [pc, #216]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7ff fc57 	bl	8001d9c <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f2:	f7ff fc53 	bl	8001d9c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e19b      	b.n	800283c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002504:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002510:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4927      	ldr	r1, [pc, #156]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002520:	4313      	orrs	r3, r2
 8002522:	600b      	str	r3, [r1, #0]
 8002524:	e015      	b.n	8002552 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002526:	4b26      	ldr	r3, [pc, #152]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7ff fc36 	bl	8001d9c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002534:	f7ff fc32 	bl	8001d9c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e17a      	b.n	800283c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002546:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d03a      	beq.n	80025d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d019      	beq.n	800259a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002566:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <HAL_RCC_OscConfig+0x274>)
 8002568:	2201      	movs	r2, #1
 800256a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256c:	f7ff fc16 	bl	8001d9c <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002574:	f7ff fc12 	bl	8001d9c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e15a      	b.n	800283c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <HAL_RCC_OscConfig+0x26c>)
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002592:	2001      	movs	r0, #1
 8002594:	f000 fa9a 	bl	8002acc <RCC_Delay>
 8002598:	e01c      	b.n	80025d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <HAL_RCC_OscConfig+0x274>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a0:	f7ff fbfc 	bl	8001d9c <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a6:	e00f      	b.n	80025c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a8:	f7ff fbf8 	bl	8001d9c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d908      	bls.n	80025c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e140      	b.n	800283c <HAL_RCC_OscConfig+0x4ec>
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	42420000 	.word	0x42420000
 80025c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c8:	4b9e      	ldr	r3, [pc, #632]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1e9      	bne.n	80025a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80a6 	beq.w	800272e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e2:	2300      	movs	r3, #0
 80025e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e6:	4b97      	ldr	r3, [pc, #604]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10d      	bne.n	800260e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f2:	4b94      	ldr	r3, [pc, #592]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	4a93      	ldr	r2, [pc, #588]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fc:	61d3      	str	r3, [r2, #28]
 80025fe:	4b91      	ldr	r3, [pc, #580]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260a:	2301      	movs	r3, #1
 800260c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260e:	4b8e      	ldr	r3, [pc, #568]	; (8002848 <HAL_RCC_OscConfig+0x4f8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d118      	bne.n	800264c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261a:	4b8b      	ldr	r3, [pc, #556]	; (8002848 <HAL_RCC_OscConfig+0x4f8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a8a      	ldr	r2, [pc, #552]	; (8002848 <HAL_RCC_OscConfig+0x4f8>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002626:	f7ff fbb9 	bl	8001d9c <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262e:	f7ff fbb5 	bl	8001d9c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b64      	cmp	r3, #100	; 0x64
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e0fd      	b.n	800283c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	4b81      	ldr	r3, [pc, #516]	; (8002848 <HAL_RCC_OscConfig+0x4f8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d106      	bne.n	8002662 <HAL_RCC_OscConfig+0x312>
 8002654:	4b7b      	ldr	r3, [pc, #492]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	4a7a      	ldr	r2, [pc, #488]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6213      	str	r3, [r2, #32]
 8002660:	e02d      	b.n	80026be <HAL_RCC_OscConfig+0x36e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0x334>
 800266a:	4b76      	ldr	r3, [pc, #472]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4a75      	ldr	r2, [pc, #468]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	6213      	str	r3, [r2, #32]
 8002676:	4b73      	ldr	r3, [pc, #460]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4a72      	ldr	r2, [pc, #456]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 800267c:	f023 0304 	bic.w	r3, r3, #4
 8002680:	6213      	str	r3, [r2, #32]
 8002682:	e01c      	b.n	80026be <HAL_RCC_OscConfig+0x36e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b05      	cmp	r3, #5
 800268a:	d10c      	bne.n	80026a6 <HAL_RCC_OscConfig+0x356>
 800268c:	4b6d      	ldr	r3, [pc, #436]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4a6c      	ldr	r2, [pc, #432]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 8002692:	f043 0304 	orr.w	r3, r3, #4
 8002696:	6213      	str	r3, [r2, #32]
 8002698:	4b6a      	ldr	r3, [pc, #424]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	4a69      	ldr	r2, [pc, #420]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6213      	str	r3, [r2, #32]
 80026a4:	e00b      	b.n	80026be <HAL_RCC_OscConfig+0x36e>
 80026a6:	4b67      	ldr	r3, [pc, #412]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	4a66      	ldr	r2, [pc, #408]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	6213      	str	r3, [r2, #32]
 80026b2:	4b64      	ldr	r3, [pc, #400]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	4a63      	ldr	r2, [pc, #396]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	f023 0304 	bic.w	r3, r3, #4
 80026bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d015      	beq.n	80026f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c6:	f7ff fb69 	bl	8001d9c <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026cc:	e00a      	b.n	80026e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ce:	f7ff fb65 	bl	8001d9c <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026dc:	4293      	cmp	r3, r2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e0ab      	b.n	800283c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e4:	4b57      	ldr	r3, [pc, #348]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0ee      	beq.n	80026ce <HAL_RCC_OscConfig+0x37e>
 80026f0:	e014      	b.n	800271c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f2:	f7ff fb53 	bl	8001d9c <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f8:	e00a      	b.n	8002710 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fa:	f7ff fb4f 	bl	8001d9c <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f241 3288 	movw	r2, #5000	; 0x1388
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e095      	b.n	800283c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002710:	4b4c      	ldr	r3, [pc, #304]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1ee      	bne.n	80026fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800271c:	7dfb      	ldrb	r3, [r7, #23]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d105      	bne.n	800272e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002722:	4b48      	ldr	r3, [pc, #288]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	4a47      	ldr	r2, [pc, #284]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 8002728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800272c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 8081 	beq.w	800283a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002738:	4b42      	ldr	r3, [pc, #264]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 030c 	and.w	r3, r3, #12
 8002740:	2b08      	cmp	r3, #8
 8002742:	d061      	beq.n	8002808 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d146      	bne.n	80027da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274c:	4b3f      	ldr	r3, [pc, #252]	; (800284c <HAL_RCC_OscConfig+0x4fc>)
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002752:	f7ff fb23 	bl	8001d9c <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275a:	f7ff fb1f 	bl	8001d9c <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e067      	b.n	800283c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276c:	4b35      	ldr	r3, [pc, #212]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f0      	bne.n	800275a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002780:	d108      	bne.n	8002794 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002782:	4b30      	ldr	r3, [pc, #192]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	492d      	ldr	r1, [pc, #180]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002794:	4b2b      	ldr	r3, [pc, #172]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a19      	ldr	r1, [r3, #32]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	430b      	orrs	r3, r1
 80027a6:	4927      	ldr	r1, [pc, #156]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ac:	4b27      	ldr	r3, [pc, #156]	; (800284c <HAL_RCC_OscConfig+0x4fc>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7ff faf3 	bl	8001d9c <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ba:	f7ff faef 	bl	8001d9c <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e037      	b.n	800283c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027cc:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x46a>
 80027d8:	e02f      	b.n	800283a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027da:	4b1c      	ldr	r3, [pc, #112]	; (800284c <HAL_RCC_OscConfig+0x4fc>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7ff fadc 	bl	8001d9c <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e8:	f7ff fad8 	bl	8001d9c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e020      	b.n	800283c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x498>
 8002806:	e018      	b.n	800283a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e013      	b.n	800283c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_RCC_OscConfig+0x4f4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	429a      	cmp	r2, r3
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d001      	beq.n	800283a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40021000 	.word	0x40021000
 8002848:	40007000 	.word	0x40007000
 800284c:	42420060 	.word	0x42420060

08002850 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0d0      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002864:	4b6a      	ldr	r3, [pc, #424]	; (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d910      	bls.n	8002894 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002872:	4b67      	ldr	r3, [pc, #412]	; (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 0207 	bic.w	r2, r3, #7
 800287a:	4965      	ldr	r1, [pc, #404]	; (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	4313      	orrs	r3, r2
 8002880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002882:	4b63      	ldr	r3, [pc, #396]	; (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0b8      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d020      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028ac:	4b59      	ldr	r3, [pc, #356]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4a58      	ldr	r2, [pc, #352]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c4:	4b53      	ldr	r3, [pc, #332]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	4a52      	ldr	r2, [pc, #328]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80028ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d0:	4b50      	ldr	r3, [pc, #320]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	494d      	ldr	r1, [pc, #308]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d040      	beq.n	8002970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d107      	bne.n	8002906 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f6:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d115      	bne.n	800292e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e07f      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d107      	bne.n	800291e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290e:	4b41      	ldr	r3, [pc, #260]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e073      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291e:	4b3d      	ldr	r3, [pc, #244]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e06b      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800292e:	4b39      	ldr	r3, [pc, #228]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f023 0203 	bic.w	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4936      	ldr	r1, [pc, #216]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002940:	f7ff fa2c 	bl	8001d9c <HAL_GetTick>
 8002944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002946:	e00a      	b.n	800295e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002948:	f7ff fa28 	bl	8001d9c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	; 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e053      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295e:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 020c 	and.w	r2, r3, #12
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	429a      	cmp	r2, r3
 800296e:	d1eb      	bne.n	8002948 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002970:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d210      	bcs.n	80029a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 0207 	bic.w	r2, r3, #7
 8002986:	4922      	ldr	r1, [pc, #136]	; (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <HAL_RCC_ClockConfig+0x1c0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e032      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4916      	ldr	r1, [pc, #88]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029ca:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	490e      	ldr	r1, [pc, #56]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029de:	f000 f821 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 80029e2:	4602      	mov	r2, r0
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_ClockConfig+0x1c4>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	490a      	ldr	r1, [pc, #40]	; (8002a18 <HAL_RCC_ClockConfig+0x1c8>)
 80029f0:	5ccb      	ldrb	r3, [r1, r3]
 80029f2:	fa22 f303 	lsr.w	r3, r2, r3
 80029f6:	4a09      	ldr	r2, [pc, #36]	; (8002a1c <HAL_RCC_ClockConfig+0x1cc>)
 80029f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_RCC_ClockConfig+0x1d0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff f98a 	bl	8001d18 <HAL_InitTick>

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40022000 	.word	0x40022000
 8002a14:	40021000 	.word	0x40021000
 8002a18:	0800333c 	.word	0x0800333c
 8002a1c:	20000068 	.word	0x20000068
 8002a20:	2000006c 	.word	0x2000006c

08002a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d002      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x30>
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d003      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0x36>
 8002a52:	e027      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a54:	4b19      	ldr	r3, [pc, #100]	; (8002abc <HAL_RCC_GetSysClockFreq+0x98>)
 8002a56:	613b      	str	r3, [r7, #16]
      break;
 8002a58:	e027      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	0c9b      	lsrs	r3, r3, #18
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	4a17      	ldr	r2, [pc, #92]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a64:	5cd3      	ldrb	r3, [r2, r3]
 8002a66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d010      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a72:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	0c5b      	lsrs	r3, r3, #17
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	4a11      	ldr	r2, [pc, #68]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a7e:	5cd3      	ldrb	r3, [r2, r3]
 8002a80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a0d      	ldr	r2, [pc, #52]	; (8002abc <HAL_RCC_GetSysClockFreq+0x98>)
 8002a86:	fb02 f203 	mul.w	r2, r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	e004      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a98:	fb02 f303 	mul.w	r3, r2, r3
 8002a9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	613b      	str	r3, [r7, #16]
      break;
 8002aa2:	e002      	b.n	8002aaa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <HAL_RCC_GetSysClockFreq+0x98>)
 8002aa6:	613b      	str	r3, [r7, #16]
      break;
 8002aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aaa:	693b      	ldr	r3, [r7, #16]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	007a1200 	.word	0x007a1200
 8002ac0:	0800334c 	.word	0x0800334c
 8002ac4:	0800335c 	.word	0x0800335c
 8002ac8:	003d0900 	.word	0x003d0900

08002acc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <RCC_Delay+0x34>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <RCC_Delay+0x38>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	0a5b      	lsrs	r3, r3, #9
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	fb02 f303 	mul.w	r3, r2, r3
 8002ae6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ae8:	bf00      	nop
  }
  while (Delay --);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1e5a      	subs	r2, r3, #1
 8002aee:	60fa      	str	r2, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f9      	bne.n	8002ae8 <RCC_Delay+0x1c>
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	20000068 	.word	0x20000068
 8002b04:	10624dd3 	.word	0x10624dd3

08002b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e041      	b.n	8002b9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fe ff7c 	bl	8001a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3304      	adds	r3, #4
 8002b44:	4619      	mov	r1, r3
 8002b46:	4610      	mov	r0, r2
 8002b48:	f000 fa56 	bl	8002ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d001      	beq.n	8002bc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e035      	b.n	8002c2c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a16      	ldr	r2, [pc, #88]	; (8002c38 <HAL_TIM_Base_Start_IT+0x90>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d009      	beq.n	8002bf6 <HAL_TIM_Base_Start_IT+0x4e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bea:	d004      	beq.n	8002bf6 <HAL_TIM_Base_Start_IT+0x4e>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a12      	ldr	r2, [pc, #72]	; (8002c3c <HAL_TIM_Base_Start_IT+0x94>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d111      	bne.n	8002c1a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2b06      	cmp	r3, #6
 8002c06:	d010      	beq.n	8002c2a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c18:	e007      	b.n	8002c2a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0201 	orr.w	r2, r2, #1
 8002c28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40012c00 	.word	0x40012c00
 8002c3c:	40000400 	.word	0x40000400

08002c40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d020      	beq.n	8002ca4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01b      	beq.n	8002ca4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0202 	mvn.w	r2, #2
 8002c74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f998 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002c90:	e005      	b.n	8002c9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f98b 	bl	8002fae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f99a 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d020      	beq.n	8002cf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d01b      	beq.n	8002cf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0204 	mvn.w	r2, #4
 8002cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f972 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002cdc:	e005      	b.n	8002cea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f965 	bl	8002fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f974 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d020      	beq.n	8002d3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d01b      	beq.n	8002d3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0208 	mvn.w	r2, #8
 8002d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2204      	movs	r2, #4
 8002d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f94c 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002d28:	e005      	b.n	8002d36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f93f 	bl	8002fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f94e 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d020      	beq.n	8002d88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01b      	beq.n	8002d88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0210 	mvn.w	r2, #16
 8002d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f926 	bl	8002fc0 <HAL_TIM_IC_CaptureCallback>
 8002d74:	e005      	b.n	8002d82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f919 	bl	8002fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f928 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00c      	beq.n	8002dac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d007      	beq.n	8002dac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0201 	mvn.w	r2, #1
 8002da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fe fd92 	bl	80018d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00c      	beq.n	8002dd0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d007      	beq.n	8002dd0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fa6f 	bl	80032ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00c      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f8f8 	bl	8002fe4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00c      	beq.n	8002e18 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d007      	beq.n	8002e18 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0220 	mvn.w	r2, #32
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fa42 	bl	800329c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_TIM_ConfigClockSource+0x1c>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e0b4      	b.n	8002fa6 <HAL_TIM_ConfigClockSource+0x186>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e74:	d03e      	beq.n	8002ef4 <HAL_TIM_ConfigClockSource+0xd4>
 8002e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e7a:	f200 8087 	bhi.w	8002f8c <HAL_TIM_ConfigClockSource+0x16c>
 8002e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e82:	f000 8086 	beq.w	8002f92 <HAL_TIM_ConfigClockSource+0x172>
 8002e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8a:	d87f      	bhi.n	8002f8c <HAL_TIM_ConfigClockSource+0x16c>
 8002e8c:	2b70      	cmp	r3, #112	; 0x70
 8002e8e:	d01a      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0xa6>
 8002e90:	2b70      	cmp	r3, #112	; 0x70
 8002e92:	d87b      	bhi.n	8002f8c <HAL_TIM_ConfigClockSource+0x16c>
 8002e94:	2b60      	cmp	r3, #96	; 0x60
 8002e96:	d050      	beq.n	8002f3a <HAL_TIM_ConfigClockSource+0x11a>
 8002e98:	2b60      	cmp	r3, #96	; 0x60
 8002e9a:	d877      	bhi.n	8002f8c <HAL_TIM_ConfigClockSource+0x16c>
 8002e9c:	2b50      	cmp	r3, #80	; 0x50
 8002e9e:	d03c      	beq.n	8002f1a <HAL_TIM_ConfigClockSource+0xfa>
 8002ea0:	2b50      	cmp	r3, #80	; 0x50
 8002ea2:	d873      	bhi.n	8002f8c <HAL_TIM_ConfigClockSource+0x16c>
 8002ea4:	2b40      	cmp	r3, #64	; 0x40
 8002ea6:	d058      	beq.n	8002f5a <HAL_TIM_ConfigClockSource+0x13a>
 8002ea8:	2b40      	cmp	r3, #64	; 0x40
 8002eaa:	d86f      	bhi.n	8002f8c <HAL_TIM_ConfigClockSource+0x16c>
 8002eac:	2b30      	cmp	r3, #48	; 0x30
 8002eae:	d064      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0x15a>
 8002eb0:	2b30      	cmp	r3, #48	; 0x30
 8002eb2:	d86b      	bhi.n	8002f8c <HAL_TIM_ConfigClockSource+0x16c>
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d060      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0x15a>
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d867      	bhi.n	8002f8c <HAL_TIM_ConfigClockSource+0x16c>
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d05c      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0x15a>
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d05a      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0x15a>
 8002ec4:	e062      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6899      	ldr	r1, [r3, #8]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f000 f96a 	bl	80031ae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ee8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	609a      	str	r2, [r3, #8]
      break;
 8002ef2:	e04f      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6899      	ldr	r1, [r3, #8]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f000 f953 	bl	80031ae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f16:	609a      	str	r2, [r3, #8]
      break;
 8002f18:	e03c      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	6859      	ldr	r1, [r3, #4]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	461a      	mov	r2, r3
 8002f28:	f000 f8ca 	bl	80030c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2150      	movs	r1, #80	; 0x50
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 f921 	bl	800317a <TIM_ITRx_SetConfig>
      break;
 8002f38:	e02c      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6818      	ldr	r0, [r3, #0]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6859      	ldr	r1, [r3, #4]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	461a      	mov	r2, r3
 8002f48:	f000 f8e8 	bl	800311c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2160      	movs	r1, #96	; 0x60
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 f911 	bl	800317a <TIM_ITRx_SetConfig>
      break;
 8002f58:	e01c      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	6859      	ldr	r1, [r3, #4]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	461a      	mov	r2, r3
 8002f68:	f000 f8aa 	bl	80030c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2140      	movs	r1, #64	; 0x40
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 f901 	bl	800317a <TIM_ITRx_SetConfig>
      break;
 8002f78:	e00c      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4619      	mov	r1, r3
 8002f84:	4610      	mov	r0, r2
 8002f86:	f000 f8f8 	bl	800317a <TIM_ITRx_SetConfig>
      break;
 8002f8a:	e003      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f90:	e000      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr
	...

08002ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a2b      	ldr	r2, [pc, #172]	; (80030b8 <TIM_Base_SetConfig+0xc0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d007      	beq.n	8003020 <TIM_Base_SetConfig+0x28>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003016:	d003      	beq.n	8003020 <TIM_Base_SetConfig+0x28>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a28      	ldr	r2, [pc, #160]	; (80030bc <TIM_Base_SetConfig+0xc4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d108      	bne.n	8003032 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a20      	ldr	r2, [pc, #128]	; (80030b8 <TIM_Base_SetConfig+0xc0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d007      	beq.n	800304a <TIM_Base_SetConfig+0x52>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003040:	d003      	beq.n	800304a <TIM_Base_SetConfig+0x52>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a1d      	ldr	r2, [pc, #116]	; (80030bc <TIM_Base_SetConfig+0xc4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d108      	bne.n	800305c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4313      	orrs	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <TIM_Base_SetConfig+0xc0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d103      	bne.n	8003090 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f023 0201 	bic.w	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	611a      	str	r2, [r3, #16]
  }
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40000400 	.word	0x40000400

080030c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	f023 0201 	bic.w	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f023 030a 	bic.w	r3, r3, #10
 80030fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	621a      	str	r2, [r3, #32]
}
 8003112:	bf00      	nop
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f023 0210 	bic.w	r2, r3, #16
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	031b      	lsls	r3, r3, #12
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003158:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	621a      	str	r2, [r3, #32]
}
 8003170:	bf00      	nop
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr

0800317a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800317a:	b480      	push	{r7}
 800317c:	b085      	sub	sp, #20
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	f043 0307 	orr.w	r3, r3, #7
 800319c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	609a      	str	r2, [r3, #8]
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b087      	sub	sp, #28
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	021a      	lsls	r2, r3, #8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	609a      	str	r2, [r3, #8]
}
 80031e2:	bf00      	nop
 80031e4:	371c      	adds	r7, #28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003200:	2302      	movs	r3, #2
 8003202:	e041      	b.n	8003288 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a14      	ldr	r2, [pc, #80]	; (8003294 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d009      	beq.n	800325c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d004      	beq.n	800325c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a10      	ldr	r2, [pc, #64]	; (8003298 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d10c      	bne.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003262:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	4313      	orrs	r3, r2
 800326c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40000400 	.word	0x40000400

0800329c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <__libc_init_array>:
 80032c0:	b570      	push	{r4, r5, r6, lr}
 80032c2:	2600      	movs	r6, #0
 80032c4:	4d0c      	ldr	r5, [pc, #48]	; (80032f8 <__libc_init_array+0x38>)
 80032c6:	4c0d      	ldr	r4, [pc, #52]	; (80032fc <__libc_init_array+0x3c>)
 80032c8:	1b64      	subs	r4, r4, r5
 80032ca:	10a4      	asrs	r4, r4, #2
 80032cc:	42a6      	cmp	r6, r4
 80032ce:	d109      	bne.n	80032e4 <__libc_init_array+0x24>
 80032d0:	f000 f822 	bl	8003318 <_init>
 80032d4:	2600      	movs	r6, #0
 80032d6:	4d0a      	ldr	r5, [pc, #40]	; (8003300 <__libc_init_array+0x40>)
 80032d8:	4c0a      	ldr	r4, [pc, #40]	; (8003304 <__libc_init_array+0x44>)
 80032da:	1b64      	subs	r4, r4, r5
 80032dc:	10a4      	asrs	r4, r4, #2
 80032de:	42a6      	cmp	r6, r4
 80032e0:	d105      	bne.n	80032ee <__libc_init_array+0x2e>
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
 80032e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e8:	4798      	blx	r3
 80032ea:	3601      	adds	r6, #1
 80032ec:	e7ee      	b.n	80032cc <__libc_init_array+0xc>
 80032ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80032f2:	4798      	blx	r3
 80032f4:	3601      	adds	r6, #1
 80032f6:	e7f2      	b.n	80032de <__libc_init_array+0x1e>
 80032f8:	08003360 	.word	0x08003360
 80032fc:	08003360 	.word	0x08003360
 8003300:	08003360 	.word	0x08003360
 8003304:	08003364 	.word	0x08003364

08003308 <memset>:
 8003308:	4603      	mov	r3, r0
 800330a:	4402      	add	r2, r0
 800330c:	4293      	cmp	r3, r2
 800330e:	d100      	bne.n	8003312 <memset+0xa>
 8003310:	4770      	bx	lr
 8003312:	f803 1b01 	strb.w	r1, [r3], #1
 8003316:	e7f9      	b.n	800330c <memset+0x4>

08003318 <_init>:
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331a:	bf00      	nop
 800331c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331e:	bc08      	pop	{r3}
 8003320:	469e      	mov	lr, r3
 8003322:	4770      	bx	lr

08003324 <_fini>:
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003326:	bf00      	nop
 8003328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332a:	bc08      	pop	{r3}
 800332c:	469e      	mov	lr, r3
 800332e:	4770      	bx	lr
