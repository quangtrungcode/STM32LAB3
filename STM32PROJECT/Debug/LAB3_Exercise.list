
LAB3_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000305c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003168  08003168  00013168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003198  08003198  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003198  08003198  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003198  08003198  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003198  08003198  00013198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800319c  0800319c  0001319c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080031a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000074  08003214  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003214  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e2d  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e28  00000000  00000000  00029eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002bcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002c7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172e3  00000000  00000000  0002d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2cf  00000000  00000000  0004443b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082786  00000000  00000000  0005270a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4e90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002980  00000000  00000000  000d4ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003150 	.word	0x08003150

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003150 	.word	0x08003150

0800014c <isButtonPressed>:
int KeyReg2[NUM_BUTTONS]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int KeyReg3[NUM_BUTTONS]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int TimerForKeyPress[NUM_BUTTONS]={200,200,200};
GPIO_TypeDef* Button_GPIO_Port[NUM_BUTTONS]={Button0_GPIO_Port,Button1_GPIO_Port,Button2_GPIO_Port};
uint16_t Button_Pin[NUM_BUTTONS]={Button0_Pin,Button1_Pin,Button2_Pin};
int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(Button_flag[index]==1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		Button_flag[index]=0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000090 	.word	0x20000090

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	Button_flag[index]=1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000090 	.word	0x20000090

080001a0 <getKeyInput>:
//				KeyReg3=NORMAL_STATE;
//			}
//		}
//	}
//}
void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e06d      	b.n	8000288 <getKeyInput+0xe8>
		KeyReg0[i] = KeyReg1[i];
 80001ac:	4a3a      	ldr	r2, [pc, #232]	; (8000298 <getKeyInput+0xf8>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4939      	ldr	r1, [pc, #228]	; (800029c <getKeyInput+0xfc>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001bc:	4a38      	ldr	r2, [pc, #224]	; (80002a0 <getKeyInput+0x100>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4934      	ldr	r1, [pc, #208]	; (8000298 <getKeyInput+0xf8>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(Button_GPIO_Port[i], Button_Pin[i]); // Assuming GPIO ports/pins are in arrays
 80001cc:	4a35      	ldr	r2, [pc, #212]	; (80002a4 <getKeyInput+0x104>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4934      	ldr	r1, [pc, #208]	; (80002a8 <getKeyInput+0x108>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001dc:	4619      	mov	r1, r3
 80001de:	4610      	mov	r0, r2
 80001e0:	f001 ff8a 	bl	80020f8 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a2d      	ldr	r2, [pc, #180]	; (80002a0 <getKeyInput+0x100>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80001f0:	4a2a      	ldr	r2, [pc, #168]	; (800029c <getKeyInput+0xfc>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4927      	ldr	r1, [pc, #156]	; (8000298 <getKeyInput+0xf8>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d13e      	bne.n	8000282 <getKeyInput+0xe2>
 8000204:	4a24      	ldr	r2, [pc, #144]	; (8000298 <getKeyInput+0xf8>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4924      	ldr	r1, [pc, #144]	; (80002a0 <getKeyInput+0x100>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d134      	bne.n	8000282 <getKeyInput+0xe2>
			if (KeyReg3[i] != KeyReg2[i]) {
 8000218:	4a24      	ldr	r2, [pc, #144]	; (80002ac <getKeyInput+0x10c>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	491f      	ldr	r1, [pc, #124]	; (80002a0 <getKeyInput+0x100>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d016      	beq.n	800025a <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 800022c:	4a1c      	ldr	r2, [pc, #112]	; (80002a0 <getKeyInput+0x100>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	491d      	ldr	r1, [pc, #116]	; (80002ac <getKeyInput+0x10c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE) {
 800023c:	4a18      	ldr	r2, [pc, #96]	; (80002a0 <getKeyInput+0x100>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d11c      	bne.n	8000282 <getKeyInput+0xe2>
					subKeyProcess(i);  // Assuming a modified subKeyProcess that accepts button index
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f7ff ff99 	bl	8000180 <subKeyProcess>
					TimerForKeyPress[i] = 200;
 800024e:	4a18      	ldr	r2, [pc, #96]	; (80002b0 <getKeyInput+0x110>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	21c8      	movs	r1, #200	; 0xc8
 8000254:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000258:	e013      	b.n	8000282 <getKeyInput+0xe2>
				}
			} else {
				TimerForKeyPress[i]--;
 800025a:	4a15      	ldr	r2, [pc, #84]	; (80002b0 <getKeyInput+0x110>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	1e5a      	subs	r2, r3, #1
 8000264:	4912      	ldr	r1, [pc, #72]	; (80002b0 <getKeyInput+0x110>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimerForKeyPress[i] == 0) {
 800026c:	4a10      	ldr	r2, [pc, #64]	; (80002b0 <getKeyInput+0x110>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d104      	bne.n	8000282 <getKeyInput+0xe2>
					KeyReg3[i] = NORMAL_STATE;
 8000278:	4a0c      	ldr	r2, [pc, #48]	; (80002ac <getKeyInput+0x10c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2101      	movs	r1, #1
 800027e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	3301      	adds	r3, #1
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b02      	cmp	r3, #2
 800028c:	dd8e      	ble.n	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	2000000c 	.word	0x2000000c
 800029c:	20000000 	.word	0x20000000
 80002a0:	20000018 	.word	0x20000018
 80002a4:	2000003c 	.word	0x2000003c
 80002a8:	20000048 	.word	0x20000048
 80002ac:	20000024 	.word	0x20000024
 80002b0:	20000030 	.word	0x20000030

080002b4 <fsm_automatic_run>:
#include "fsm_automatic.h"
#include "global.h"

int counter=0;
int checkstatus=0;
void fsm_automatic_run(){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	switch(status){
 80002b8:	4bd0      	ldr	r3, [pc, #832]	; (80005fc <fsm_automatic_run+0x348>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	3b01      	subs	r3, #1
 80002be:	2b04      	cmp	r3, #4
 80002c0:	f200 8190 	bhi.w	80005e4 <fsm_automatic_run+0x330>
 80002c4:	a201      	add	r2, pc, #4	; (adr r2, 80002cc <fsm_automatic_run+0x18>)
 80002c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ca:	bf00      	nop
 80002cc:	080002e1 	.word	0x080002e1
 80002d0:	08000319 	.word	0x08000319
 80002d4:	080003cd 	.word	0x080003cd
 80002d8:	08000481 	.word	0x08000481
 80002dc:	08000533 	.word	0x08000533
		case INIT:
			 //  counter=0;
               set_led();
 80002e0:	f001 fb1c 	bl	800191c <set_led>
               set_led7_segement();
 80002e4:	f000 fdce 	bl	8000e84 <set_led7_segement>
               status=AUTO_RED1_GREEN2;
 80002e8:	4bc4      	ldr	r3, [pc, #784]	; (80005fc <fsm_automatic_run+0x348>)
 80002ea:	2202      	movs	r2, #2
 80002ec:	601a      	str	r2, [r3, #0]
               setTimer(0, b*1000);
 80002ee:	4bc4      	ldr	r3, [pc, #784]	; (8000600 <fsm_automatic_run+0x34c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002f6:	fb02 f303 	mul.w	r3, r2, r3
 80002fa:	4619      	mov	r1, r3
 80002fc:	2000      	movs	r0, #0
 80002fe:	f001 fa15 	bl	800172c <setTimer>
               setTimer(1, 443);
 8000302:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000306:	2001      	movs	r0, #1
 8000308:	f001 fa10 	bl	800172c <setTimer>
               setTimer(2, 1000);
 800030c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000310:	2002      	movs	r0, #2
 8000312:	f001 fa0b 	bl	800172c <setTimer>
			break;
 8000316:	e16e      	b.n	80005f6 <fsm_automatic_run+0x342>
		case AUTO_RED1_GREEN2:
			LED_RED1_GREEN2();
 8000318:	f001 fb4e 	bl	80019b8 <LED_RED1_GREEN2>
			if(counter==0){
 800031c:	4bb9      	ldr	r3, [pc, #740]	; (8000604 <fsm_automatic_run+0x350>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d104      	bne.n	800032e <fsm_automatic_run+0x7a>
			led7_segment_run13();
 8000324:	f000 fefc 	bl	8001120 <led7_segment_run13>
			counter=1;
 8000328:	4bb6      	ldr	r3, [pc, #728]	; (8000604 <fsm_automatic_run+0x350>)
 800032a:	2201      	movs	r2, #1
 800032c:	601a      	str	r2, [r3, #0]
			}
			if(isTimerExpired(1)==1){
 800032e:	2001      	movs	r0, #1
 8000330:	f001 fa1c 	bl	800176c <isTimerExpired>
 8000334:	4603      	mov	r3, r0
 8000336:	2b01      	cmp	r3, #1
 8000338:	d106      	bne.n	8000348 <fsm_automatic_run+0x94>
				led7_segment_run02();
 800033a:	f000 fecd 	bl	80010d8 <led7_segment_run02>
				setTimer(1, 443);
 800033e:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000342:	2001      	movs	r0, #1
 8000344:	f001 f9f2 	bl	800172c <setTimer>
			}
			if(isTimerExpired(2)==1){
 8000348:	2002      	movs	r0, #2
 800034a:	f001 fa0f 	bl	800176c <isTimerExpired>
 800034e:	4603      	mov	r3, r0
 8000350:	2b01      	cmp	r3, #1
 8000352:	d106      	bne.n	8000362 <fsm_automatic_run+0xae>
					led7_segment_run13();
 8000354:	f000 fee4 	bl	8001120 <led7_segment_run13>
					setTimer(2, 1000);
 8000358:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800035c:	2002      	movs	r0, #2
 800035e:	f001 f9e5 	bl	800172c <setTimer>
			}
			if(isTimerExpired(0)==1){
 8000362:	2000      	movs	r0, #0
 8000364:	f001 fa02 	bl	800176c <isTimerExpired>
 8000368:	4603      	mov	r3, r0
 800036a:	2b01      	cmp	r3, #1
 800036c:	d10c      	bne.n	8000388 <fsm_automatic_run+0xd4>
				status=AUTO_RED1_YELLOW2;
 800036e:	4ba3      	ldr	r3, [pc, #652]	; (80005fc <fsm_automatic_run+0x348>)
 8000370:	2203      	movs	r2, #3
 8000372:	601a      	str	r2, [r3, #0]
				setTimer(0, c*1000);
 8000374:	4ba4      	ldr	r3, [pc, #656]	; (8000608 <fsm_automatic_run+0x354>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800037c:	fb02 f303 	mul.w	r3, r2, r3
 8000380:	4619      	mov	r1, r3
 8000382:	2000      	movs	r0, #0
 8000384:	f001 f9d2 	bl	800172c <setTimer>
				//counter=0;
			}
			if(isButtonPressed(0)==1){
 8000388:	2000      	movs	r0, #0
 800038a:	f7ff fedf 	bl	800014c <isButtonPressed>
 800038e:	4603      	mov	r3, r0
 8000390:	2b01      	cmp	r3, #1
 8000392:	f040 8129 	bne.w	80005e8 <fsm_automatic_run+0x334>
		//		 HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
				status=MAN_RED;
 8000396:	4b99      	ldr	r3, [pc, #612]	; (80005fc <fsm_automatic_run+0x348>)
 8000398:	220c      	movs	r2, #12
 800039a:	601a      	str	r2, [r3, #0]
			//	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
				setTimer(1, 443);
 800039c:	f240 11bb 	movw	r1, #443	; 0x1bb
 80003a0:	2001      	movs	r0, #1
 80003a2:	f001 f9c3 	bl	800172c <setTimer>
				setTimer(2, 1000);
 80003a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003aa:	2002      	movs	r0, #2
 80003ac:	f001 f9be 	bl	800172c <setTimer>
				setTimer(3, 500);
 80003b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80003b4:	2003      	movs	r0, #3
 80003b6:	f001 f9b9 	bl	800172c <setTimer>
				setTimer(4, 10000);
 80003ba:	f242 7110 	movw	r1, #10000	; 0x2710
 80003be:	2004      	movs	r0, #4
 80003c0:	f001 f9b4 	bl	800172c <setTimer>
				checkstatus=4;
 80003c4:	4b91      	ldr	r3, [pc, #580]	; (800060c <fsm_automatic_run+0x358>)
 80003c6:	2204      	movs	r2, #4
 80003c8:	601a      	str	r2, [r3, #0]
			}
			break;
 80003ca:	e10d      	b.n	80005e8 <fsm_automatic_run+0x334>
		case AUTO_RED1_YELLOW2:
			LED_RED1_YELLOW2();
 80003cc:	f001 fb18 	bl	8001a00 <LED_RED1_YELLOW2>
			if(counter==0){
 80003d0:	4b8c      	ldr	r3, [pc, #560]	; (8000604 <fsm_automatic_run+0x350>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d104      	bne.n	80003e2 <fsm_automatic_run+0x12e>
			led7_segment_run13();
 80003d8:	f000 fea2 	bl	8001120 <led7_segment_run13>
			counter=1;
 80003dc:	4b89      	ldr	r3, [pc, #548]	; (8000604 <fsm_automatic_run+0x350>)
 80003de:	2201      	movs	r2, #1
 80003e0:	601a      	str	r2, [r3, #0]
			}
			if(isTimerExpired(1)==1){
 80003e2:	2001      	movs	r0, #1
 80003e4:	f001 f9c2 	bl	800176c <isTimerExpired>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d106      	bne.n	80003fc <fsm_automatic_run+0x148>
				led7_segment_run02();
 80003ee:	f000 fe73 	bl	80010d8 <led7_segment_run02>
				setTimer(1, 443);
 80003f2:	f240 11bb 	movw	r1, #443	; 0x1bb
 80003f6:	2001      	movs	r0, #1
 80003f8:	f001 f998 	bl	800172c <setTimer>
			}
			if(isTimerExpired(2)==1){
 80003fc:	2002      	movs	r0, #2
 80003fe:	f001 f9b5 	bl	800176c <isTimerExpired>
 8000402:	4603      	mov	r3, r0
 8000404:	2b01      	cmp	r3, #1
 8000406:	d106      	bne.n	8000416 <fsm_automatic_run+0x162>
							led7_segment_run13();
 8000408:	f000 fe8a 	bl	8001120 <led7_segment_run13>
							setTimer(2, 1000);
 800040c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000410:	2002      	movs	r0, #2
 8000412:	f001 f98b 	bl	800172c <setTimer>
			}
			if(isTimerExpired(0)==1){
 8000416:	2000      	movs	r0, #0
 8000418:	f001 f9a8 	bl	800176c <isTimerExpired>
 800041c:	4603      	mov	r3, r0
 800041e:	2b01      	cmp	r3, #1
 8000420:	d10c      	bne.n	800043c <fsm_automatic_run+0x188>
				status=AUTO_GREEN1_RED2;
 8000422:	4b76      	ldr	r3, [pc, #472]	; (80005fc <fsm_automatic_run+0x348>)
 8000424:	2204      	movs	r2, #4
 8000426:	601a      	str	r2, [r3, #0]
				setTimer(0, b*1000);
 8000428:	4b75      	ldr	r3, [pc, #468]	; (8000600 <fsm_automatic_run+0x34c>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000430:	fb02 f303 	mul.w	r3, r2, r3
 8000434:	4619      	mov	r1, r3
 8000436:	2000      	movs	r0, #0
 8000438:	f001 f978 	bl	800172c <setTimer>
	              // counter=0;
			}
			if(isButtonPressed(0)==1){
 800043c:	2000      	movs	r0, #0
 800043e:	f7ff fe85 	bl	800014c <isButtonPressed>
 8000442:	4603      	mov	r3, r0
 8000444:	2b01      	cmp	r3, #1
 8000446:	f040 80d1 	bne.w	80005ec <fsm_automatic_run+0x338>
				status=MAN_RED;
 800044a:	4b6c      	ldr	r3, [pc, #432]	; (80005fc <fsm_automatic_run+0x348>)
 800044c:	220c      	movs	r2, #12
 800044e:	601a      	str	r2, [r3, #0]
				setTimer(1, 443);
 8000450:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000454:	2001      	movs	r0, #1
 8000456:	f001 f969 	bl	800172c <setTimer>
				setTimer(2, 1000);
 800045a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800045e:	2002      	movs	r0, #2
 8000460:	f001 f964 	bl	800172c <setTimer>
				setTimer(3, 500);
 8000464:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000468:	2003      	movs	r0, #3
 800046a:	f001 f95f 	bl	800172c <setTimer>
				setTimer(5, 10000);
 800046e:	f242 7110 	movw	r1, #10000	; 0x2710
 8000472:	2005      	movs	r0, #5
 8000474:	f001 f95a 	bl	800172c <setTimer>
				checkstatus=5;
 8000478:	4b64      	ldr	r3, [pc, #400]	; (800060c <fsm_automatic_run+0x358>)
 800047a:	2205      	movs	r2, #5
 800047c:	601a      	str	r2, [r3, #0]
			}
			break;
 800047e:	e0b5      	b.n	80005ec <fsm_automatic_run+0x338>
		case AUTO_GREEN1_RED2:
			LED_GREEN1_RED2();
 8000480:	f001 fae2 	bl	8001a48 <LED_GREEN1_RED2>
			if(counter==0){
 8000484:	4b5f      	ldr	r3, [pc, #380]	; (8000604 <fsm_automatic_run+0x350>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d104      	bne.n	8000496 <fsm_automatic_run+0x1e2>
			led7_segment_run13();
 800048c:	f000 fe48 	bl	8001120 <led7_segment_run13>
			counter=1;
 8000490:	4b5c      	ldr	r3, [pc, #368]	; (8000604 <fsm_automatic_run+0x350>)
 8000492:	2201      	movs	r2, #1
 8000494:	601a      	str	r2, [r3, #0]
			}
			if(isTimerExpired(1)==1){
 8000496:	2001      	movs	r0, #1
 8000498:	f001 f968 	bl	800176c <isTimerExpired>
 800049c:	4603      	mov	r3, r0
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d106      	bne.n	80004b0 <fsm_automatic_run+0x1fc>
				led7_segment_run02();
 80004a2:	f000 fe19 	bl	80010d8 <led7_segment_run02>
				setTimer(1, 443);
 80004a6:	f240 11bb 	movw	r1, #443	; 0x1bb
 80004aa:	2001      	movs	r0, #1
 80004ac:	f001 f93e 	bl	800172c <setTimer>
			}
			if(isTimerExpired(2)==1){
 80004b0:	2002      	movs	r0, #2
 80004b2:	f001 f95b 	bl	800176c <isTimerExpired>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d106      	bne.n	80004ca <fsm_automatic_run+0x216>
							led7_segment_run13();
 80004bc:	f000 fe30 	bl	8001120 <led7_segment_run13>
							setTimer(2, 1000);
 80004c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004c4:	2002      	movs	r0, #2
 80004c6:	f001 f931 	bl	800172c <setTimer>
			}
			if(isTimerExpired(0)==1){
 80004ca:	2000      	movs	r0, #0
 80004cc:	f001 f94e 	bl	800176c <isTimerExpired>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d10c      	bne.n	80004f0 <fsm_automatic_run+0x23c>
				status=AUTO_YELLOW1_RED2;
 80004d6:	4b49      	ldr	r3, [pc, #292]	; (80005fc <fsm_automatic_run+0x348>)
 80004d8:	2205      	movs	r2, #5
 80004da:	601a      	str	r2, [r3, #0]
				setTimer(0, c*1000);
 80004dc:	4b4a      	ldr	r3, [pc, #296]	; (8000608 <fsm_automatic_run+0x354>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004e4:	fb02 f303 	mul.w	r3, r2, r3
 80004e8:	4619      	mov	r1, r3
 80004ea:	2000      	movs	r0, #0
 80004ec:	f001 f91e 	bl	800172c <setTimer>
	             //  counter=0;
			}
			if(isButtonPressed(0)==1){
 80004f0:	2000      	movs	r0, #0
 80004f2:	f7ff fe2b 	bl	800014c <isButtonPressed>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d179      	bne.n	80005f0 <fsm_automatic_run+0x33c>
				status=MAN_RED;
 80004fc:	4b3f      	ldr	r3, [pc, #252]	; (80005fc <fsm_automatic_run+0x348>)
 80004fe:	220c      	movs	r2, #12
 8000500:	601a      	str	r2, [r3, #0]
				setTimer(1, 443);
 8000502:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000506:	2001      	movs	r0, #1
 8000508:	f001 f910 	bl	800172c <setTimer>
				setTimer(2, 1000);
 800050c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000510:	2002      	movs	r0, #2
 8000512:	f001 f90b 	bl	800172c <setTimer>
				setTimer(3, 500);
 8000516:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800051a:	2003      	movs	r0, #3
 800051c:	f001 f906 	bl	800172c <setTimer>
				setTimer(6, 10000);
 8000520:	f242 7110 	movw	r1, #10000	; 0x2710
 8000524:	2006      	movs	r0, #6
 8000526:	f001 f901 	bl	800172c <setTimer>
				checkstatus=6;
 800052a:	4b38      	ldr	r3, [pc, #224]	; (800060c <fsm_automatic_run+0x358>)
 800052c:	2206      	movs	r2, #6
 800052e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000530:	e05e      	b.n	80005f0 <fsm_automatic_run+0x33c>
		case AUTO_YELLOW1_RED2:
			LED_YELLOW1_RED2();
 8000532:	f001 faad 	bl	8001a90 <LED_YELLOW1_RED2>
			if(counter==0){
 8000536:	4b33      	ldr	r3, [pc, #204]	; (8000604 <fsm_automatic_run+0x350>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d104      	bne.n	8000548 <fsm_automatic_run+0x294>
			led7_segment_run13();
 800053e:	f000 fdef 	bl	8001120 <led7_segment_run13>
			counter=1;
 8000542:	4b30      	ldr	r3, [pc, #192]	; (8000604 <fsm_automatic_run+0x350>)
 8000544:	2201      	movs	r2, #1
 8000546:	601a      	str	r2, [r3, #0]
			}
			if(isTimerExpired(1)==1){
 8000548:	2001      	movs	r0, #1
 800054a:	f001 f90f 	bl	800176c <isTimerExpired>
 800054e:	4603      	mov	r3, r0
 8000550:	2b01      	cmp	r3, #1
 8000552:	d106      	bne.n	8000562 <fsm_automatic_run+0x2ae>
				led7_segment_run02();
 8000554:	f000 fdc0 	bl	80010d8 <led7_segment_run02>
				setTimer(1, 443);
 8000558:	f240 11bb 	movw	r1, #443	; 0x1bb
 800055c:	2001      	movs	r0, #1
 800055e:	f001 f8e5 	bl	800172c <setTimer>
			}
			if(isTimerExpired(2)==1){
 8000562:	2002      	movs	r0, #2
 8000564:	f001 f902 	bl	800176c <isTimerExpired>
 8000568:	4603      	mov	r3, r0
 800056a:	2b01      	cmp	r3, #1
 800056c:	d106      	bne.n	800057c <fsm_automatic_run+0x2c8>
							led7_segment_run13();
 800056e:	f000 fdd7 	bl	8001120 <led7_segment_run13>
							setTimer(2, 1000);
 8000572:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000576:	2002      	movs	r0, #2
 8000578:	f001 f8d8 	bl	800172c <setTimer>
			}
			if(isTimerExpired(0)==1){
 800057c:	2000      	movs	r0, #0
 800057e:	f001 f8f5 	bl	800176c <isTimerExpired>
 8000582:	4603      	mov	r3, r0
 8000584:	2b01      	cmp	r3, #1
 8000586:	d10c      	bne.n	80005a2 <fsm_automatic_run+0x2ee>
				status=AUTO_RED1_GREEN2;
 8000588:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <fsm_automatic_run+0x348>)
 800058a:	2202      	movs	r2, #2
 800058c:	601a      	str	r2, [r3, #0]
				setTimer(0, b*1000);
 800058e:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <fsm_automatic_run+0x34c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000596:	fb02 f303 	mul.w	r3, r2, r3
 800059a:	4619      	mov	r1, r3
 800059c:	2000      	movs	r0, #0
 800059e:	f001 f8c5 	bl	800172c <setTimer>
	            //   setTimer(1, 443);
	            //   setTimer(2, 1000);
			}
			if(isButtonPressed(0)==1){
 80005a2:	2000      	movs	r0, #0
 80005a4:	f7ff fdd2 	bl	800014c <isButtonPressed>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d122      	bne.n	80005f4 <fsm_automatic_run+0x340>
				status=MAN_RED;
 80005ae:	4b13      	ldr	r3, [pc, #76]	; (80005fc <fsm_automatic_run+0x348>)
 80005b0:	220c      	movs	r2, #12
 80005b2:	601a      	str	r2, [r3, #0]
				setTimer(1, 443);
 80005b4:	f240 11bb 	movw	r1, #443	; 0x1bb
 80005b8:	2001      	movs	r0, #1
 80005ba:	f001 f8b7 	bl	800172c <setTimer>
				setTimer(2, 1000);
 80005be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005c2:	2002      	movs	r0, #2
 80005c4:	f001 f8b2 	bl	800172c <setTimer>
				setTimer(3, 500);
 80005c8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005cc:	2003      	movs	r0, #3
 80005ce:	f001 f8ad 	bl	800172c <setTimer>
				setTimer(7, 10000);
 80005d2:	f242 7110 	movw	r1, #10000	; 0x2710
 80005d6:	2007      	movs	r0, #7
 80005d8:	f001 f8a8 	bl	800172c <setTimer>
				checkstatus=7;
 80005dc:	4b0b      	ldr	r3, [pc, #44]	; (800060c <fsm_automatic_run+0x358>)
 80005de:	2207      	movs	r2, #7
 80005e0:	601a      	str	r2, [r3, #0]
			}
			break;
 80005e2:	e007      	b.n	80005f4 <fsm_automatic_run+0x340>
		default:
			break;
 80005e4:	bf00      	nop
 80005e6:	e006      	b.n	80005f6 <fsm_automatic_run+0x342>
			break;
 80005e8:	bf00      	nop
 80005ea:	e004      	b.n	80005f6 <fsm_automatic_run+0x342>
			break;
 80005ec:	bf00      	nop
 80005ee:	e002      	b.n	80005f6 <fsm_automatic_run+0x342>
			break;
 80005f0:	bf00      	nop
 80005f2:	e000      	b.n	80005f6 <fsm_automatic_run+0x342>
			break;
 80005f4:	bf00      	nop
	}
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	200000ac 	.word	0x200000ac
 8000600:	20000060 	.word	0x20000060
 8000604:	2000009c 	.word	0x2000009c
 8000608:	20000064 	.word	0x20000064
 800060c:	200000a0 	.word	0x200000a0

08000610 <fsm_manual_run>:
 */
#include "fsm_manual.h"
#include "global.h"

int check=0;
void fsm_manual_run(){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	switch(status){
 8000614:	4ba6      	ldr	r3, [pc, #664]	; (80008b0 <fsm_manual_run+0x2a0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3b0c      	subs	r3, #12
 800061a:	2b04      	cmp	r3, #4
 800061c:	f200 81c4 	bhi.w	80009a8 <fsm_manual_run+0x398>
 8000620:	a201      	add	r2, pc, #4	; (adr r2, 8000628 <fsm_manual_run+0x18>)
 8000622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000626:	bf00      	nop
 8000628:	0800063d 	.word	0x0800063d
 800062c:	080008d9 	.word	0x080008d9
 8000630:	08000965 	.word	0x08000965
 8000634:	080009a9 	.word	0x080009a9
 8000638:	080009a9 	.word	0x080009a9
	case MAN_RED:
//		HAL_Delay(1000);
//		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		//HAL_GPIO_WritePin(GPIOA, LED_RED_Pin, RESET);
		if(check==0){
 800063c:	4b9d      	ldr	r3, [pc, #628]	; (80008b4 <fsm_manual_run+0x2a4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d106      	bne.n	8000652 <fsm_manual_run+0x42>
			Turn_On_All_LED_RED();
 8000644:	f001 f976 	bl	8001934 <Turn_On_All_LED_RED>
			Save_led7RED_segment_run13();
 8000648:	f000 fe94 	bl	8001374 <Save_led7RED_segment_run13>
			check=1;
 800064c:	4b99      	ldr	r3, [pc, #612]	; (80008b4 <fsm_manual_run+0x2a4>)
 800064e:	2201      	movs	r2, #1
 8000650:	601a      	str	r2, [r3, #0]
		}
		if(isTimerExpired(1)==1){
 8000652:	2001      	movs	r0, #1
 8000654:	f001 f88a 	bl	800176c <isTimerExpired>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d106      	bne.n	800066c <fsm_manual_run+0x5c>
			led7_segment_run02();
 800065e:	f000 fd3b 	bl	80010d8 <led7_segment_run02>
			setTimer(1, 443);
 8000662:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000666:	2001      	movs	r0, #1
 8000668:	f001 f860 	bl	800172c <setTimer>
		}
		if(isTimerExpired(2)==1){
 800066c:	2002      	movs	r0, #2
 800066e:	f001 f87d 	bl	800176c <isTimerExpired>
 8000672:	4603      	mov	r3, r0
 8000674:	2b01      	cmp	r3, #1
 8000676:	d106      	bne.n	8000686 <fsm_manual_run+0x76>
			Save_led7RED_segment_run13();
 8000678:	f000 fe7c 	bl	8001374 <Save_led7RED_segment_run13>
			setTimer(2, 1000);
 800067c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000680:	2002      	movs	r0, #2
 8000682:	f001 f853 	bl	800172c <setTimer>
		}
		if(isTimerExpired(3)==1){
 8000686:	2003      	movs	r0, #3
 8000688:	f001 f870 	bl	800176c <isTimerExpired>
 800068c:	4603      	mov	r3, r0
 800068e:	2b01      	cmp	r3, #1
 8000690:	d108      	bne.n	80006a4 <fsm_manual_run+0x94>
			HAL_GPIO_TogglePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin);
 8000692:	2112      	movs	r1, #18
 8000694:	4888      	ldr	r0, [pc, #544]	; (80008b8 <fsm_manual_run+0x2a8>)
 8000696:	f001 fd5e 	bl	8002156 <HAL_GPIO_TogglePin>
			setTimer(3, 500);
 800069a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800069e:	2003      	movs	r0, #3
 80006a0:	f001 f844 	bl	800172c <setTimer>
		}
		if(isTimerExpired(4)==1){
 80006a4:	2004      	movs	r0, #4
 80006a6:	f001 f861 	bl	800176c <isTimerExpired>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d123      	bne.n	80006f8 <fsm_manual_run+0xe8>
			status=AUTO_RED1_GREEN2;
 80006b0:	4b7f      	ldr	r3, [pc, #508]	; (80008b0 <fsm_manual_run+0x2a0>)
 80006b2:	2202      	movs	r2, #2
 80006b4:	601a      	str	r2, [r3, #0]
			++countergreen13;
 80006b6:	4b81      	ldr	r3, [pc, #516]	; (80008bc <fsm_manual_run+0x2ac>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	3301      	adds	r3, #1
 80006bc:	4a7f      	ldr	r2, [pc, #508]	; (80008bc <fsm_manual_run+0x2ac>)
 80006be:	6013      	str	r3, [r2, #0]
			//counterred13;
			counter=0;
 80006c0:	4b7f      	ldr	r3, [pc, #508]	; (80008c0 <fsm_manual_run+0x2b0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
            setTimer(1, 443);
 80006c6:	f240 11bb 	movw	r1, #443	; 0x1bb
 80006ca:	2001      	movs	r0, #1
 80006cc:	f001 f82e 	bl	800172c <setTimer>
            setTimer(2, 1000);
 80006d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006d4:	2002      	movs	r0, #2
 80006d6:	f001 f829 	bl	800172c <setTimer>
			--idx_led13;
 80006da:	4b7a      	ldr	r3, [pc, #488]	; (80008c4 <fsm_manual_run+0x2b4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3b01      	subs	r3, #1
 80006e0:	4a78      	ldr	r2, [pc, #480]	; (80008c4 <fsm_manual_run+0x2b4>)
 80006e2:	6013      	str	r3, [r2, #0]
			setTimer(0, countergreen13*1000);
 80006e4:	4b75      	ldr	r3, [pc, #468]	; (80008bc <fsm_manual_run+0x2ac>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006ec:	fb02 f303 	mul.w	r3, r2, r3
 80006f0:	4619      	mov	r1, r3
 80006f2:	2000      	movs	r0, #0
 80006f4:	f001 f81a 	bl	800172c <setTimer>
		}
		if(isTimerExpired(5)==1){
 80006f8:	2005      	movs	r0, #5
 80006fa:	f001 f837 	bl	800176c <isTimerExpired>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b01      	cmp	r3, #1
 8000702:	d130      	bne.n	8000766 <fsm_manual_run+0x156>
			status=AUTO_RED1_YELLOW2;
 8000704:	4b6a      	ldr	r3, [pc, #424]	; (80008b0 <fsm_manual_run+0x2a0>)
 8000706:	2203      	movs	r2, #3
 8000708:	601a      	str	r2, [r3, #0]
			if(counterred13!=a) {
 800070a:	4b6f      	ldr	r3, [pc, #444]	; (80008c8 <fsm_manual_run+0x2b8>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4b6f      	ldr	r3, [pc, #444]	; (80008cc <fsm_manual_run+0x2bc>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	429a      	cmp	r2, r3
 8000714:	d005      	beq.n	8000722 <fsm_manual_run+0x112>
				++counteryellow13;
 8000716:	4b6e      	ldr	r3, [pc, #440]	; (80008d0 <fsm_manual_run+0x2c0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	4a6c      	ldr	r2, [pc, #432]	; (80008d0 <fsm_manual_run+0x2c0>)
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	e005      	b.n	800072e <fsm_manual_run+0x11e>
			}
			else{
				counterred13=1;
 8000722:	4b69      	ldr	r3, [pc, #420]	; (80008c8 <fsm_manual_run+0x2b8>)
 8000724:	2201      	movs	r2, #1
 8000726:	601a      	str	r2, [r3, #0]
				counteryellow13=1;
 8000728:	4b69      	ldr	r3, [pc, #420]	; (80008d0 <fsm_manual_run+0x2c0>)
 800072a:	2201      	movs	r2, #1
 800072c:	601a      	str	r2, [r3, #0]
			}
			counter=0;
 800072e:	4b64      	ldr	r3, [pc, #400]	; (80008c0 <fsm_manual_run+0x2b0>)
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
            setTimer(1, 443);
 8000734:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000738:	2001      	movs	r0, #1
 800073a:	f000 fff7 	bl	800172c <setTimer>
            setTimer(2, 1000);
 800073e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000742:	2002      	movs	r0, #2
 8000744:	f000 fff2 	bl	800172c <setTimer>
			--idx_led13;
 8000748:	4b5e      	ldr	r3, [pc, #376]	; (80008c4 <fsm_manual_run+0x2b4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3b01      	subs	r3, #1
 800074e:	4a5d      	ldr	r2, [pc, #372]	; (80008c4 <fsm_manual_run+0x2b4>)
 8000750:	6013      	str	r3, [r2, #0]
			setTimer(0, counteryellow13*1000);
 8000752:	4b5f      	ldr	r3, [pc, #380]	; (80008d0 <fsm_manual_run+0x2c0>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800075a:	fb02 f303 	mul.w	r3, r2, r3
 800075e:	4619      	mov	r1, r3
 8000760:	2000      	movs	r0, #0
 8000762:	f000 ffe3 	bl	800172c <setTimer>
		}
		if(isTimerExpired(6)==1){
 8000766:	2006      	movs	r0, #6
 8000768:	f001 f800 	bl	800176c <isTimerExpired>
 800076c:	4603      	mov	r3, r0
 800076e:	2b01      	cmp	r3, #1
 8000770:	d123      	bne.n	80007ba <fsm_manual_run+0x1aa>
			status=AUTO_GREEN1_RED2;
 8000772:	4b4f      	ldr	r3, [pc, #316]	; (80008b0 <fsm_manual_run+0x2a0>)
 8000774:	2204      	movs	r2, #4
 8000776:	601a      	str	r2, [r3, #0]
			++countergreen13;
 8000778:	4b50      	ldr	r3, [pc, #320]	; (80008bc <fsm_manual_run+0x2ac>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	4a4f      	ldr	r2, [pc, #316]	; (80008bc <fsm_manual_run+0x2ac>)
 8000780:	6013      	str	r3, [r2, #0]
			//++counterred13;
			--idx_led13;
 8000782:	4b50      	ldr	r3, [pc, #320]	; (80008c4 <fsm_manual_run+0x2b4>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	3b01      	subs	r3, #1
 8000788:	4a4e      	ldr	r2, [pc, #312]	; (80008c4 <fsm_manual_run+0x2b4>)
 800078a:	6013      	str	r3, [r2, #0]
			counter=0;
 800078c:	4b4c      	ldr	r3, [pc, #304]	; (80008c0 <fsm_manual_run+0x2b0>)
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
            setTimer(1, 443);
 8000792:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000796:	2001      	movs	r0, #1
 8000798:	f000 ffc8 	bl	800172c <setTimer>
            setTimer(2, 1000);
 800079c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007a0:	2002      	movs	r0, #2
 80007a2:	f000 ffc3 	bl	800172c <setTimer>
			setTimer(0, countergreen13*1000);
 80007a6:	4b45      	ldr	r3, [pc, #276]	; (80008bc <fsm_manual_run+0x2ac>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007ae:	fb02 f303 	mul.w	r3, r2, r3
 80007b2:	4619      	mov	r1, r3
 80007b4:	2000      	movs	r0, #0
 80007b6:	f000 ffb9 	bl	800172c <setTimer>
		}
		if(isTimerExpired(7)==1){
 80007ba:	2007      	movs	r0, #7
 80007bc:	f000 ffd6 	bl	800176c <isTimerExpired>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d130      	bne.n	8000828 <fsm_manual_run+0x218>
			status=AUTO_YELLOW1_RED2;
 80007c6:	4b3a      	ldr	r3, [pc, #232]	; (80008b0 <fsm_manual_run+0x2a0>)
 80007c8:	2205      	movs	r2, #5
 80007ca:	601a      	str	r2, [r3, #0]
			if(counterred13!=a) {
 80007cc:	4b3e      	ldr	r3, [pc, #248]	; (80008c8 <fsm_manual_run+0x2b8>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b3e      	ldr	r3, [pc, #248]	; (80008cc <fsm_manual_run+0x2bc>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d005      	beq.n	80007e4 <fsm_manual_run+0x1d4>
				++counteryellow13;
 80007d8:	4b3d      	ldr	r3, [pc, #244]	; (80008d0 <fsm_manual_run+0x2c0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	3301      	adds	r3, #1
 80007de:	4a3c      	ldr	r2, [pc, #240]	; (80008d0 <fsm_manual_run+0x2c0>)
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	e005      	b.n	80007f0 <fsm_manual_run+0x1e0>
			}
			else{
				counterred13=1;
 80007e4:	4b38      	ldr	r3, [pc, #224]	; (80008c8 <fsm_manual_run+0x2b8>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	601a      	str	r2, [r3, #0]
				counteryellow13=1;
 80007ea:	4b39      	ldr	r3, [pc, #228]	; (80008d0 <fsm_manual_run+0x2c0>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	601a      	str	r2, [r3, #0]
			}
			--idx_led13;
 80007f0:	4b34      	ldr	r3, [pc, #208]	; (80008c4 <fsm_manual_run+0x2b4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	4a33      	ldr	r2, [pc, #204]	; (80008c4 <fsm_manual_run+0x2b4>)
 80007f8:	6013      	str	r3, [r2, #0]
			counter=0;
 80007fa:	4b31      	ldr	r3, [pc, #196]	; (80008c0 <fsm_manual_run+0x2b0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
            setTimer(1, 443);
 8000800:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000804:	2001      	movs	r0, #1
 8000806:	f000 ff91 	bl	800172c <setTimer>
            setTimer(2, 1000);
 800080a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800080e:	2002      	movs	r0, #2
 8000810:	f000 ff8c 	bl	800172c <setTimer>
			setTimer(0, counteryellow13*1000);
 8000814:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <fsm_manual_run+0x2c0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800081c:	fb02 f303 	mul.w	r3, r2, r3
 8000820:	4619      	mov	r1, r3
 8000822:	2000      	movs	r0, #0
 8000824:	f000 ff82 	bl	800172c <setTimer>
		}
		if(isButtonPressed(0)==1){
 8000828:	2000      	movs	r0, #0
 800082a:	f7ff fc8f 	bl	800014c <isButtonPressed>
 800082e:	4603      	mov	r3, r0
 8000830:	2b01      	cmp	r3, #1
 8000832:	d119      	bne.n	8000868 <fsm_manual_run+0x258>
			status= MAN_GREEN;
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <fsm_manual_run+0x2a0>)
 8000836:	220d      	movs	r2, #13
 8000838:	601a      	str	r2, [r3, #0]
			check=0;
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <fsm_manual_run+0x2a4>)
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
			setTimer(1, 443);
 8000840:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000844:	2001      	movs	r0, #1
 8000846:	f000 ff71 	bl	800172c <setTimer>
			setTimer(2, 1000);
 800084a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800084e:	2002      	movs	r0, #2
 8000850:	f000 ff6c 	bl	800172c <setTimer>
			setTimer(3, 500);
 8000854:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000858:	2003      	movs	r0, #3
 800085a:	f000 ff67 	bl	800172c <setTimer>
			setTimer(4, 10000);
 800085e:	f242 7110 	movw	r1, #10000	; 0x2710
 8000862:	2004      	movs	r0, #4
 8000864:	f000 ff62 	bl	800172c <setTimer>
		}
		if(isButtonPressed(1)==1){
 8000868:	2001      	movs	r0, #1
 800086a:	f7ff fc6f 	bl	800014c <isButtonPressed>
 800086e:	4603      	mov	r3, r0
 8000870:	2b01      	cmp	r3, #1
 8000872:	d118      	bne.n	80008a6 <fsm_manual_run+0x296>
			status=INCREASE_VALUE_LED_RED;
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <fsm_manual_run+0x2a0>)
 8000876:	220f      	movs	r2, #15
 8000878:	601a      	str	r2, [r3, #0]
			//Increase_Save_led7RED_segment_run13();
			setTimer(1, 443);
 800087a:	f240 11bb 	movw	r1, #443	; 0x1bb
 800087e:	2001      	movs	r0, #1
 8000880:	f000 ff54 	bl	800172c <setTimer>
			setTimer(2, 1000);
 8000884:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000888:	2002      	movs	r0, #2
 800088a:	f000 ff4f 	bl	800172c <setTimer>
			setTimer(3, 500);
 800088e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000892:	2003      	movs	r0, #3
 8000894:	f000 ff4a 	bl	800172c <setTimer>
			setTimer(checkstatus, 10000);
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <fsm_manual_run+0x2c4>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f242 7110 	movw	r1, #10000	; 0x2710
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 ff43 	bl	800172c <setTimer>
		}
		if(isButtonPressed(2)==1){
 80008a6:	2002      	movs	r0, #2
 80008a8:	f7ff fc50 	bl	800014c <isButtonPressed>

		}
		break;
 80008ac:	e081      	b.n	80009b2 <fsm_manual_run+0x3a2>
 80008ae:	bf00      	nop
 80008b0:	200000ac 	.word	0x200000ac
 80008b4:	200000a4 	.word	0x200000a4
 80008b8:	40010800 	.word	0x40010800
 80008bc:	20000058 	.word	0x20000058
 80008c0:	2000009c 	.word	0x2000009c
 80008c4:	200000b0 	.word	0x200000b0
 80008c8:	20000050 	.word	0x20000050
 80008cc:	2000005c 	.word	0x2000005c
 80008d0:	20000054 	.word	0x20000054
 80008d4:	200000a0 	.word	0x200000a0
	case INCREASE_VALUE_LED_RED:
		break;
	case SET_VALUE_LED_RED:
		break;
	case MAN_GREEN:
		if(check==0){
 80008d8:	4b37      	ldr	r3, [pc, #220]	; (80009b8 <fsm_manual_run+0x3a8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d106      	bne.n	80008ee <fsm_manual_run+0x2de>
			Turn_On_All_LED_GREEN();
 80008e0:	f001 f83e 	bl	8001960 <Turn_On_All_LED_GREEN>
			Save_led7GREEN_segment_run13();
 80008e4:	f000 fdb6 	bl	8001454 <Save_led7GREEN_segment_run13>
			check=1;
 80008e8:	4b33      	ldr	r3, [pc, #204]	; (80009b8 <fsm_manual_run+0x3a8>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
		}
		if(isTimerExpired(1)==1){
 80008ee:	2001      	movs	r0, #1
 80008f0:	f000 ff3c 	bl	800176c <isTimerExpired>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d106      	bne.n	8000908 <fsm_manual_run+0x2f8>
			led7_segment_run02();
 80008fa:	f000 fbed 	bl	80010d8 <led7_segment_run02>
			setTimer(1, 443);
 80008fe:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000902:	2001      	movs	r0, #1
 8000904:	f000 ff12 	bl	800172c <setTimer>
		}
		if(isTimerExpired(2)==1){
 8000908:	2002      	movs	r0, #2
 800090a:	f000 ff2f 	bl	800176c <isTimerExpired>
 800090e:	4603      	mov	r3, r0
 8000910:	2b01      	cmp	r3, #1
 8000912:	d106      	bne.n	8000922 <fsm_manual_run+0x312>
			Save_led7GREEN_segment_run13();
 8000914:	f000 fd9e 	bl	8001454 <Save_led7GREEN_segment_run13>
			setTimer(2, 1000);
 8000918:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800091c:	2002      	movs	r0, #2
 800091e:	f000 ff05 	bl	800172c <setTimer>
		}
		if(isTimerExpired(3)==1){
 8000922:	2003      	movs	r0, #3
 8000924:	f000 ff22 	bl	800176c <isTimerExpired>
 8000928:	4603      	mov	r3, r0
 800092a:	2b01      	cmp	r3, #1
 800092c:	d108      	bne.n	8000940 <fsm_manual_run+0x330>
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin);
 800092e:	2144      	movs	r1, #68	; 0x44
 8000930:	4822      	ldr	r0, [pc, #136]	; (80009bc <fsm_manual_run+0x3ac>)
 8000932:	f001 fc10 	bl	8002156 <HAL_GPIO_TogglePin>
			setTimer(3, 500);
 8000936:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800093a:	2003      	movs	r0, #3
 800093c:	f000 fef6 	bl	800172c <setTimer>
		}
		if(isButtonPressed(0)==1){
 8000940:	2000      	movs	r0, #0
 8000942:	f7ff fc03 	bl	800014c <isButtonPressed>
 8000946:	4603      	mov	r3, r0
 8000948:	2b01      	cmp	r3, #1
 800094a:	d12f      	bne.n	80009ac <fsm_manual_run+0x39c>
			status= MAN_YELLOW;
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <fsm_manual_run+0x3b0>)
 800094e:	220e      	movs	r2, #14
 8000950:	601a      	str	r2, [r3, #0]
			check=0;
 8000952:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <fsm_manual_run+0x3a8>)
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
			setTimer(3, 500);
 8000958:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800095c:	2003      	movs	r0, #3
 800095e:	f000 fee5 	bl	800172c <setTimer>
		}
		break;
 8000962:	e023      	b.n	80009ac <fsm_manual_run+0x39c>
	case MAN_YELLOW:
		if(check==0){
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <fsm_manual_run+0x3a8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d104      	bne.n	8000976 <fsm_manual_run+0x366>
			Turn_On_All_LED_YELLOW();
 800096c:	f001 f80e 	bl	800198c <Turn_On_All_LED_YELLOW>
			check=1;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <fsm_manual_run+0x3a8>)
 8000972:	2201      	movs	r2, #1
 8000974:	601a      	str	r2, [r3, #0]
		}
		if(isTimerExpired(3)==1){
 8000976:	2003      	movs	r0, #3
 8000978:	f000 fef8 	bl	800176c <isTimerExpired>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d108      	bne.n	8000994 <fsm_manual_run+0x384>
			HAL_GPIO_TogglePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin);
 8000982:	2188      	movs	r1, #136	; 0x88
 8000984:	480d      	ldr	r0, [pc, #52]	; (80009bc <fsm_manual_run+0x3ac>)
 8000986:	f001 fbe6 	bl	8002156 <HAL_GPIO_TogglePin>
			setTimer(3, 500);
 800098a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800098e:	2003      	movs	r0, #3
 8000990:	f000 fecc 	bl	800172c <setTimer>
		}
		if(isButtonPressed(0)==1){
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff fbd9 	bl	800014c <isButtonPressed>
 800099a:	4603      	mov	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	d107      	bne.n	80009b0 <fsm_manual_run+0x3a0>
//            set_led7_segement();
//            setTimer(0, 3000);
//            setTimer(1, 443);
//            setTimer(2, 1000);
//            counter=0;
			status=INIT;
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <fsm_manual_run+0x3b0>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	601a      	str	r2, [r3, #0]
		}
		break;
 80009a6:	e003      	b.n	80009b0 <fsm_manual_run+0x3a0>
	default:
		break;
 80009a8:	bf00      	nop
 80009aa:	e002      	b.n	80009b2 <fsm_manual_run+0x3a2>
		break;
 80009ac:	bf00      	nop
 80009ae:	e000      	b.n	80009b2 <fsm_manual_run+0x3a2>
		break;
 80009b0:	bf00      	nop
	}
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200000a4 	.word	0x200000a4
 80009bc:	40010800 	.word	0x40010800
 80009c0:	200000ac 	.word	0x200000ac

080009c4 <fsm_setting_run>:
 *      Author: ADMIN
 */
#include "fsm_setting.h"

int checksave=0;
void fsm_setting_run(){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
      switch(status){
 80009c8:	4b81      	ldr	r3, [pc, #516]	; (8000bd0 <fsm_setting_run+0x20c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d003      	beq.n	80009d8 <fsm_setting_run+0x14>
 80009d0:	2b10      	cmp	r3, #16
 80009d2:	f000 817c 	beq.w	8000cce <fsm_setting_run+0x30a>
					setTimer(3, 500);
					setTimer(checkstatus, 10000);
				}
			  break;
		  default:
			  break;
 80009d6:	e237      	b.n	8000e48 <fsm_setting_run+0x484>
				if(checksave==0){
 80009d8:	4b7e      	ldr	r3, [pc, #504]	; (8000bd4 <fsm_setting_run+0x210>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d106      	bne.n	80009ee <fsm_setting_run+0x2a>
					Increase_Save_led7RED_segment_run13();
 80009e0:	f000 fd0c 	bl	80013fc <Increase_Save_led7RED_segment_run13>
					++checksave;
 80009e4:	4b7b      	ldr	r3, [pc, #492]	; (8000bd4 <fsm_setting_run+0x210>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	4a7a      	ldr	r2, [pc, #488]	; (8000bd4 <fsm_setting_run+0x210>)
 80009ec:	6013      	str	r3, [r2, #0]
				if(isTimerExpired(1)==1){
 80009ee:	2001      	movs	r0, #1
 80009f0:	f000 febc 	bl	800176c <isTimerExpired>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d106      	bne.n	8000a08 <fsm_setting_run+0x44>
					led7_segment_run02();
 80009fa:	f000 fb6d 	bl	80010d8 <led7_segment_run02>
					setTimer(1, 400);
 80009fe:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000a02:	2001      	movs	r0, #1
 8000a04:	f000 fe92 	bl	800172c <setTimer>
				if(isTimerExpired(2)==1){
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f000 feaf 	bl	800176c <isTimerExpired>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d106      	bne.n	8000a22 <fsm_setting_run+0x5e>
					Save_led7RED_segment_run13();
 8000a14:	f000 fcae 	bl	8001374 <Save_led7RED_segment_run13>
					setTimer(2, 1000);
 8000a18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a1c:	2002      	movs	r0, #2
 8000a1e:	f000 fe85 	bl	800172c <setTimer>
				if(isTimerExpired(3)==1){
 8000a22:	2003      	movs	r0, #3
 8000a24:	f000 fea2 	bl	800176c <isTimerExpired>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d108      	bne.n	8000a40 <fsm_setting_run+0x7c>
					HAL_GPIO_TogglePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin);
 8000a2e:	2112      	movs	r1, #18
 8000a30:	4869      	ldr	r0, [pc, #420]	; (8000bd8 <fsm_setting_run+0x214>)
 8000a32:	f001 fb90 	bl	8002156 <HAL_GPIO_TogglePin>
					setTimer(3, 500);
 8000a36:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	f000 fe76 	bl	800172c <setTimer>
				if(isTimerExpired(4)==1){
 8000a40:	2004      	movs	r0, #4
 8000a42:	f000 fe93 	bl	800176c <isTimerExpired>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d12d      	bne.n	8000aa8 <fsm_setting_run+0xe4>
					status=AUTO_RED1_GREEN2;
 8000a4c:	4b60      	ldr	r3, [pc, #384]	; (8000bd0 <fsm_setting_run+0x20c>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	601a      	str	r2, [r3, #0]
					counter=0;
 8000a52:	4b62      	ldr	r3, [pc, #392]	; (8000bdc <fsm_setting_run+0x218>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
					++countergreen13;
 8000a58:	4b61      	ldr	r3, [pc, #388]	; (8000be0 <fsm_setting_run+0x21c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	4a60      	ldr	r2, [pc, #384]	; (8000be0 <fsm_setting_run+0x21c>)
 8000a60:	6013      	str	r3, [r2, #0]
					counterred13=savecounterred13-checksave;
 8000a62:	4b60      	ldr	r3, [pc, #384]	; (8000be4 <fsm_setting_run+0x220>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	4b5b      	ldr	r3, [pc, #364]	; (8000bd4 <fsm_setting_run+0x210>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	4a5e      	ldr	r2, [pc, #376]	; (8000be8 <fsm_setting_run+0x224>)
 8000a6e:	6013      	str	r3, [r2, #0]
					checksave=0;
 8000a70:	4b58      	ldr	r3, [pc, #352]	; (8000bd4 <fsm_setting_run+0x210>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
					--idx_led13;
 8000a76:	4b5d      	ldr	r3, [pc, #372]	; (8000bec <fsm_setting_run+0x228>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	4a5b      	ldr	r2, [pc, #364]	; (8000bec <fsm_setting_run+0x228>)
 8000a7e:	6013      	str	r3, [r2, #0]
					setTimer(0, countergreen13*1000);
 8000a80:	4b57      	ldr	r3, [pc, #348]	; (8000be0 <fsm_setting_run+0x21c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a88:	fb02 f303 	mul.w	r3, r2, r3
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 fe4c 	bl	800172c <setTimer>
		               setTimer(1, 443);
 8000a94:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f000 fe47 	bl	800172c <setTimer>
		               setTimer(2, 1000);
 8000a9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f000 fe42 	bl	800172c <setTimer>
				if(isTimerExpired(5)==1){
 8000aa8:	2005      	movs	r0, #5
 8000aaa:	f000 fe5f 	bl	800176c <isTimerExpired>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d13a      	bne.n	8000b2a <fsm_setting_run+0x166>
					status=AUTO_RED1_YELLOW2;
 8000ab4:	4b46      	ldr	r3, [pc, #280]	; (8000bd0 <fsm_setting_run+0x20c>)
 8000ab6:	2203      	movs	r2, #3
 8000ab8:	601a      	str	r2, [r3, #0]
					counter=0;
 8000aba:	4b48      	ldr	r3, [pc, #288]	; (8000bdc <fsm_setting_run+0x218>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
					if(counterred13!=a) {
 8000ac0:	4b49      	ldr	r3, [pc, #292]	; (8000be8 <fsm_setting_run+0x224>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b4a      	ldr	r3, [pc, #296]	; (8000bf0 <fsm_setting_run+0x22c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d00c      	beq.n	8000ae6 <fsm_setting_run+0x122>
						++counteryellow13;
 8000acc:	4b49      	ldr	r3, [pc, #292]	; (8000bf4 <fsm_setting_run+0x230>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	4a48      	ldr	r2, [pc, #288]	; (8000bf4 <fsm_setting_run+0x230>)
 8000ad4:	6013      	str	r3, [r2, #0]
						counterred13=savecounterred13-checksave;
 8000ad6:	4b43      	ldr	r3, [pc, #268]	; (8000be4 <fsm_setting_run+0x220>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	4b3e      	ldr	r3, [pc, #248]	; (8000bd4 <fsm_setting_run+0x210>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	4a41      	ldr	r2, [pc, #260]	; (8000be8 <fsm_setting_run+0x224>)
 8000ae2:	6013      	str	r3, [r2, #0]
 8000ae4:	e005      	b.n	8000af2 <fsm_setting_run+0x12e>
						counterred13=1;
 8000ae6:	4b40      	ldr	r3, [pc, #256]	; (8000be8 <fsm_setting_run+0x224>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	601a      	str	r2, [r3, #0]
						counteryellow13=1;
 8000aec:	4b41      	ldr	r3, [pc, #260]	; (8000bf4 <fsm_setting_run+0x230>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	601a      	str	r2, [r3, #0]
					checksave=0;
 8000af2:	4b38      	ldr	r3, [pc, #224]	; (8000bd4 <fsm_setting_run+0x210>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
					--idx_led13;
 8000af8:	4b3c      	ldr	r3, [pc, #240]	; (8000bec <fsm_setting_run+0x228>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	4a3b      	ldr	r2, [pc, #236]	; (8000bec <fsm_setting_run+0x228>)
 8000b00:	6013      	str	r3, [r2, #0]
					setTimer(0, counteryellow13*1000);
 8000b02:	4b3c      	ldr	r3, [pc, #240]	; (8000bf4 <fsm_setting_run+0x230>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b0a:	fb02 f303 	mul.w	r3, r2, r3
 8000b0e:	4619      	mov	r1, r3
 8000b10:	2000      	movs	r0, #0
 8000b12:	f000 fe0b 	bl	800172c <setTimer>
		               setTimer(1, 443);
 8000b16:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f000 fe06 	bl	800172c <setTimer>
		               setTimer(2, 1000);
 8000b20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b24:	2002      	movs	r0, #2
 8000b26:	f000 fe01 	bl	800172c <setTimer>
				if(isTimerExpired(6)==1){
 8000b2a:	2006      	movs	r0, #6
 8000b2c:	f000 fe1e 	bl	800176c <isTimerExpired>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d12d      	bne.n	8000b92 <fsm_setting_run+0x1ce>
					status=AUTO_GREEN1_RED2;
 8000b36:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <fsm_setting_run+0x20c>)
 8000b38:	2204      	movs	r2, #4
 8000b3a:	601a      	str	r2, [r3, #0]
					counter=0;
 8000b3c:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <fsm_setting_run+0x218>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
					++countergreen13;
 8000b42:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <fsm_setting_run+0x21c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	3301      	adds	r3, #1
 8000b48:	4a25      	ldr	r2, [pc, #148]	; (8000be0 <fsm_setting_run+0x21c>)
 8000b4a:	6013      	str	r3, [r2, #0]
					counterred13=savecounterred13-checksave;
 8000b4c:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <fsm_setting_run+0x220>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <fsm_setting_run+0x210>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	4a24      	ldr	r2, [pc, #144]	; (8000be8 <fsm_setting_run+0x224>)
 8000b58:	6013      	str	r3, [r2, #0]
					checksave=0;
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <fsm_setting_run+0x210>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
					--idx_led13;
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <fsm_setting_run+0x228>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	4a21      	ldr	r2, [pc, #132]	; (8000bec <fsm_setting_run+0x228>)
 8000b68:	6013      	str	r3, [r2, #0]
					setTimer(0, countergreen13*1000);
 8000b6a:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <fsm_setting_run+0x21c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b72:	fb02 f303 	mul.w	r3, r2, r3
 8000b76:	4619      	mov	r1, r3
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f000 fdd7 	bl	800172c <setTimer>
		               setTimer(1, 443);
 8000b7e:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000b82:	2001      	movs	r0, #1
 8000b84:	f000 fdd2 	bl	800172c <setTimer>
		               setTimer(2, 1000);
 8000b88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f000 fdcd 	bl	800172c <setTimer>
				if(isTimerExpired(7)==1){
 8000b92:	2007      	movs	r0, #7
 8000b94:	f000 fdea 	bl	800176c <isTimerExpired>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d14e      	bne.n	8000c3c <fsm_setting_run+0x278>
					status=AUTO_YELLOW1_RED2;
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <fsm_setting_run+0x20c>)
 8000ba0:	2205      	movs	r2, #5
 8000ba2:	601a      	str	r2, [r3, #0]
					counter=0;
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <fsm_setting_run+0x218>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
					if(counterred13!=a) {
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <fsm_setting_run+0x224>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <fsm_setting_run+0x22c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d020      	beq.n	8000bf8 <fsm_setting_run+0x234>
						++counteryellow13;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <fsm_setting_run+0x230>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <fsm_setting_run+0x230>)
 8000bbe:	6013      	str	r3, [r2, #0]
						counterred13=savecounterred13-checksave;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <fsm_setting_run+0x220>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <fsm_setting_run+0x210>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <fsm_setting_run+0x224>)
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	e019      	b.n	8000c04 <fsm_setting_run+0x240>
 8000bd0:	200000ac 	.word	0x200000ac
 8000bd4:	200000a8 	.word	0x200000a8
 8000bd8:	40010800 	.word	0x40010800
 8000bdc:	2000009c 	.word	0x2000009c
 8000be0:	20000058 	.word	0x20000058
 8000be4:	200000c0 	.word	0x200000c0
 8000be8:	20000050 	.word	0x20000050
 8000bec:	200000b0 	.word	0x200000b0
 8000bf0:	2000005c 	.word	0x2000005c
 8000bf4:	20000054 	.word	0x20000054
						counterred13=1;
 8000bf8:	4b94      	ldr	r3, [pc, #592]	; (8000e4c <fsm_setting_run+0x488>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	601a      	str	r2, [r3, #0]
						counteryellow13=1;
 8000bfe:	4b94      	ldr	r3, [pc, #592]	; (8000e50 <fsm_setting_run+0x48c>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	601a      	str	r2, [r3, #0]
					checksave=0;
 8000c04:	4b93      	ldr	r3, [pc, #588]	; (8000e54 <fsm_setting_run+0x490>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
					--idx_led13;
 8000c0a:	4b93      	ldr	r3, [pc, #588]	; (8000e58 <fsm_setting_run+0x494>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	4a91      	ldr	r2, [pc, #580]	; (8000e58 <fsm_setting_run+0x494>)
 8000c12:	6013      	str	r3, [r2, #0]
					setTimer(0, counteryellow13*1000);
 8000c14:	4b8e      	ldr	r3, [pc, #568]	; (8000e50 <fsm_setting_run+0x48c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	4619      	mov	r1, r3
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 fd82 	bl	800172c <setTimer>
		               setTimer(1, 443);
 8000c28:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f000 fd7d 	bl	800172c <setTimer>
		               setTimer(2, 1000);
 8000c32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c36:	2002      	movs	r0, #2
 8000c38:	f000 fd78 	bl	800172c <setTimer>
				if(isButtonPressed(0)==1){
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff fa85 	bl	800014c <isButtonPressed>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d119      	bne.n	8000c7c <fsm_setting_run+0x2b8>
					status= MAN_GREEN;
 8000c48:	4b84      	ldr	r3, [pc, #528]	; (8000e5c <fsm_setting_run+0x498>)
 8000c4a:	220d      	movs	r2, #13
 8000c4c:	601a      	str	r2, [r3, #0]
					check=0;
 8000c4e:	4b84      	ldr	r3, [pc, #528]	; (8000e60 <fsm_setting_run+0x49c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
					setTimer(1, 400);
 8000c54:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000c58:	2001      	movs	r0, #1
 8000c5a:	f000 fd67 	bl	800172c <setTimer>
					setTimer(2, 1000);
 8000c5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c62:	2002      	movs	r0, #2
 8000c64:	f000 fd62 	bl	800172c <setTimer>
					setTimer(3, 500);
 8000c68:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 fd5d 	bl	800172c <setTimer>
					setTimer(4, 10000);
 8000c72:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c76:	2004      	movs	r0, #4
 8000c78:	f000 fd58 	bl	800172c <setTimer>
				if(isButtonPressed(1)==1){
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff fa65 	bl	800014c <isButtonPressed>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d10d      	bne.n	8000ca4 <fsm_setting_run+0x2e0>
					++checksave;
 8000c88:	4b72      	ldr	r3, [pc, #456]	; (8000e54 <fsm_setting_run+0x490>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	4a71      	ldr	r2, [pc, #452]	; (8000e54 <fsm_setting_run+0x490>)
 8000c90:	6013      	str	r3, [r2, #0]
				    Increase_Save_led7RED_segment_run13();
 8000c92:	f000 fbb3 	bl	80013fc <Increase_Save_led7RED_segment_run13>
				    setTimer(checkstatus, 10000);
 8000c96:	4b73      	ldr	r3, [pc, #460]	; (8000e64 <fsm_setting_run+0x4a0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 fd44 	bl	800172c <setTimer>
				if(isButtonPressed(2)==1){
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	f7ff fa51 	bl	800014c <isButtonPressed>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	f040 80c8 	bne.w	8000e42 <fsm_setting_run+0x47e>
					status=SET_VALUE_LED_RED;
 8000cb2:	4b6a      	ldr	r3, [pc, #424]	; (8000e5c <fsm_setting_run+0x498>)
 8000cb4:	2210      	movs	r2, #16
 8000cb6:	601a      	str	r2, [r3, #0]
					checksave=0;
 8000cb8:	4b66      	ldr	r3, [pc, #408]	; (8000e54 <fsm_setting_run+0x490>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
					  setTimer(checkstatus, 10000);
 8000cbe:	4b69      	ldr	r3, [pc, #420]	; (8000e64 <fsm_setting_run+0x4a0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f242 7110 	movw	r1, #10000	; 0x2710
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 fd30 	bl	800172c <setTimer>
			  break;
 8000ccc:	e0b9      	b.n	8000e42 <fsm_setting_run+0x47e>
			  counterred13 = savecounterred13;
 8000cce:	4b66      	ldr	r3, [pc, #408]	; (8000e68 <fsm_setting_run+0x4a4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a5e      	ldr	r2, [pc, #376]	; (8000e4c <fsm_setting_run+0x488>)
 8000cd4:	6013      	str	r3, [r2, #0]
			  countergreen13=counterred13-counteryellow13;
 8000cd6:	4b5d      	ldr	r3, [pc, #372]	; (8000e4c <fsm_setting_run+0x488>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4b5d      	ldr	r3, [pc, #372]	; (8000e50 <fsm_setting_run+0x48c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	4a62      	ldr	r2, [pc, #392]	; (8000e6c <fsm_setting_run+0x4a8>)
 8000ce2:	6013      	str	r3, [r2, #0]
			  counteryellow13=counterred13-countergreen13;
 8000ce4:	4b59      	ldr	r3, [pc, #356]	; (8000e4c <fsm_setting_run+0x488>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b60      	ldr	r3, [pc, #384]	; (8000e6c <fsm_setting_run+0x4a8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	4a58      	ldr	r2, [pc, #352]	; (8000e50 <fsm_setting_run+0x48c>)
 8000cf0:	6013      	str	r3, [r2, #0]
			  a=counterred13;
 8000cf2:	4b56      	ldr	r3, [pc, #344]	; (8000e4c <fsm_setting_run+0x488>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a5e      	ldr	r2, [pc, #376]	; (8000e70 <fsm_setting_run+0x4ac>)
 8000cf8:	6013      	str	r3, [r2, #0]
			  b=countergreen13;
 8000cfa:	4b5c      	ldr	r3, [pc, #368]	; (8000e6c <fsm_setting_run+0x4a8>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a5d      	ldr	r2, [pc, #372]	; (8000e74 <fsm_setting_run+0x4b0>)
 8000d00:	6013      	str	r3, [r2, #0]
			  c=counteryellow13;
 8000d02:	4b53      	ldr	r3, [pc, #332]	; (8000e50 <fsm_setting_run+0x48c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a5c      	ldr	r2, [pc, #368]	; (8000e78 <fsm_setting_run+0x4b4>)
 8000d08:	6013      	str	r3, [r2, #0]
				if(checksave==0){
 8000d0a:	4b52      	ldr	r3, [pc, #328]	; (8000e54 <fsm_setting_run+0x490>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d104      	bne.n	8000d1c <fsm_setting_run+0x358>
					Save_led7RED_segment_run13();
 8000d12:	f000 fb2f 	bl	8001374 <Save_led7RED_segment_run13>
					checksave=1;
 8000d16:	4b4f      	ldr	r3, [pc, #316]	; (8000e54 <fsm_setting_run+0x490>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]
				if(isTimerExpired(1)==1){
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f000 fd25 	bl	800176c <isTimerExpired>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d106      	bne.n	8000d36 <fsm_setting_run+0x372>
					led7_segment_run02();
 8000d28:	f000 f9d6 	bl	80010d8 <led7_segment_run02>
					setTimer(1, 400);
 8000d2c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000d30:	2001      	movs	r0, #1
 8000d32:	f000 fcfb 	bl	800172c <setTimer>
				if(isTimerExpired(2)==1){
 8000d36:	2002      	movs	r0, #2
 8000d38:	f000 fd18 	bl	800176c <isTimerExpired>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d106      	bne.n	8000d50 <fsm_setting_run+0x38c>
					Save_led7RED_segment_run13();
 8000d42:	f000 fb17 	bl	8001374 <Save_led7RED_segment_run13>
					setTimer(2, 1000);
 8000d46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f000 fcee 	bl	800172c <setTimer>
				if(isTimerExpired(3)==1){
 8000d50:	2003      	movs	r0, #3
 8000d52:	f000 fd0b 	bl	800176c <isTimerExpired>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d108      	bne.n	8000d6e <fsm_setting_run+0x3aa>
					HAL_GPIO_TogglePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin);
 8000d5c:	2112      	movs	r1, #18
 8000d5e:	4847      	ldr	r0, [pc, #284]	; (8000e7c <fsm_setting_run+0x4b8>)
 8000d60:	f001 f9f9 	bl	8002156 <HAL_GPIO_TogglePin>
					setTimer(3, 500);
 8000d64:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 fcdf 	bl	800172c <setTimer>
				if(isTimerExpired(checkstatus)==1){
 8000d6e:	4b3d      	ldr	r3, [pc, #244]	; (8000e64 <fsm_setting_run+0x4a0>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fcfa 	bl	800176c <isTimerExpired>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d11c      	bne.n	8000db8 <fsm_setting_run+0x3f4>
					status=AUTO_RED1_GREEN2;
 8000d7e:	4b37      	ldr	r3, [pc, #220]	; (8000e5c <fsm_setting_run+0x498>)
 8000d80:	2202      	movs	r2, #2
 8000d82:	601a      	str	r2, [r3, #0]
					counter=0;
 8000d84:	4b3e      	ldr	r3, [pc, #248]	; (8000e80 <fsm_setting_run+0x4bc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
					idx_led13=0;
 8000d8a:	4b33      	ldr	r3, [pc, #204]	; (8000e58 <fsm_setting_run+0x494>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
					setTimer(0, b*1000);
 8000d90:	4b38      	ldr	r3, [pc, #224]	; (8000e74 <fsm_setting_run+0x4b0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d98:	fb02 f303 	mul.w	r3, r2, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f000 fcc4 	bl	800172c <setTimer>
		            setTimer(1, 443);
 8000da4:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000da8:	2001      	movs	r0, #1
 8000daa:	f000 fcbf 	bl	800172c <setTimer>
		            setTimer(2, 1000);
 8000dae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000db2:	2002      	movs	r0, #2
 8000db4:	f000 fcba 	bl	800172c <setTimer>
				if(isButtonPressed(0)==1){
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff f9c7 	bl	800014c <isButtonPressed>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d11b      	bne.n	8000dfc <fsm_setting_run+0x438>
					status= MAN_GREEN;
 8000dc4:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <fsm_setting_run+0x498>)
 8000dc6:	220d      	movs	r2, #13
 8000dc8:	601a      	str	r2, [r3, #0]
					check=0;
 8000dca:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <fsm_setting_run+0x49c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
					setTimer(1, 400);
 8000dd0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f000 fca9 	bl	800172c <setTimer>
					setTimer(2, 1000);
 8000dda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dde:	2002      	movs	r0, #2
 8000de0:	f000 fca4 	bl	800172c <setTimer>
					setTimer(3, 500);
 8000de4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 fc9f 	bl	800172c <setTimer>
					setTimer(checkstatus, 10000);
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <fsm_setting_run+0x4a0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f242 7110 	movw	r1, #10000	; 0x2710
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fc98 	bl	800172c <setTimer>
				if(isButtonPressed(1)==1){
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f7ff f9a5 	bl	800014c <isButtonPressed>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d11e      	bne.n	8000e46 <fsm_setting_run+0x482>
					status=INCREASE_VALUE_LED_RED;
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <fsm_setting_run+0x498>)
 8000e0a:	220f      	movs	r2, #15
 8000e0c:	601a      	str	r2, [r3, #0]
					checksave=0;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <fsm_setting_run+0x490>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
					setTimer(1, 400);
 8000e14:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f000 fc87 	bl	800172c <setTimer>
					setTimer(2, 1000);
 8000e1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e22:	2002      	movs	r0, #2
 8000e24:	f000 fc82 	bl	800172c <setTimer>
					setTimer(3, 500);
 8000e28:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f000 fc7d 	bl	800172c <setTimer>
					setTimer(checkstatus, 10000);
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <fsm_setting_run+0x4a0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f242 7110 	movw	r1, #10000	; 0x2710
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 fc76 	bl	800172c <setTimer>
			  break;
 8000e40:	e001      	b.n	8000e46 <fsm_setting_run+0x482>
			  break;
 8000e42:	bf00      	nop
 8000e44:	e000      	b.n	8000e48 <fsm_setting_run+0x484>
			  break;
 8000e46:	bf00      	nop
      }
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000050 	.word	0x20000050
 8000e50:	20000054 	.word	0x20000054
 8000e54:	200000a8 	.word	0x200000a8
 8000e58:	200000b0 	.word	0x200000b0
 8000e5c:	200000ac 	.word	0x200000ac
 8000e60:	200000a4 	.word	0x200000a4
 8000e64:	200000a0 	.word	0x200000a0
 8000e68:	200000c0 	.word	0x200000c0
 8000e6c:	20000058 	.word	0x20000058
 8000e70:	2000005c 	.word	0x2000005c
 8000e74:	20000060 	.word	0x20000060
 8000e78:	20000064 	.word	0x20000064
 8000e7c:	40010800 	.word	0x40010800
 8000e80:	2000009c 	.word	0x2000009c

08000e84 <set_led7_segement>:
int savecounterred13,savecountergreen13,savecounteryellow13 =0;
int checkcounterred,checkcountergreen,checkcounteryellow=0;
int a=5;
int b=3;
int c=2;
void set_led7_segement(){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, SEG0X_Pin|SEG1X_Pin|SEG2X_Pin|EN3_Pin
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <set_led7_segement+0x20>)
 8000e90:	f001 f949 	bl	8002126 <HAL_GPIO_WritePin>
		                          |SEG3X_Pin|SEG4X_Pin|SEG5X_Pin|SEG6X_Pin
		                          |EN0_Pin|EN1_Pin|EN2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA, SEG0Y_Pin|SEG1Y_Pin|SEG2Y_Pin|SEG3Y_Pin|SEG4Y_Pin|SEG5Y_Pin|SEG6Y_Pin, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 8000e9a:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <set_led7_segement+0x24>)
 8000e9c:	f001 f943 	bl	8002126 <HAL_GPIO_WritePin>
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40010c00 	.word	0x40010c00
 8000ea8:	40010800 	.word	0x40010800

08000eac <display7SEGX>:
void display7SEGX(int num) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
      const uint8_t segmentMap[10] = {
 8000eb4:	4a3f      	ldr	r2, [pc, #252]	; (8000fb4 <display7SEGX+0x108>)
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ebc:	c303      	stmia	r3!, {r0, r1}
 8000ebe:	801a      	strh	r2, [r3, #0]
          0b10111110,
          0b11100000,
          0b11111110,
          0b11110110
      };
      HAL_GPIO_WritePin(SEG0X_GPIO_Port, SEG0X_Pin, (segmentMap[num] & 0b10000000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000ec0:	f107 020c 	add.w	r2, r7, #12
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b25b      	sxtb	r3, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	09db      	lsrs	r3, r3, #7
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	4837      	ldr	r0, [pc, #220]	; (8000fb8 <display7SEGX+0x10c>)
 8000eda:	f001 f924 	bl	8002126 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG1X_GPIO_Port, SEG1X_Pin, (segmentMap[num] & 0b01000000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000ede:	f107 020c 	add.w	r2, r7, #12
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	bf0c      	ite	eq
 8000ef0:	2301      	moveq	r3, #1
 8000ef2:	2300      	movne	r3, #0
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	2102      	movs	r1, #2
 8000efa:	482f      	ldr	r0, [pc, #188]	; (8000fb8 <display7SEGX+0x10c>)
 8000efc:	f001 f913 	bl	8002126 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG2X_GPIO_Port, SEG2X_Pin, (segmentMap[num] & 0b00100000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000f00:	f107 020c 	add.w	r2, r7, #12
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4413      	add	r3, r2
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	f003 0320 	and.w	r3, r3, #32
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	bf0c      	ite	eq
 8000f12:	2301      	moveq	r3, #1
 8000f14:	2300      	movne	r3, #0
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	4826      	ldr	r0, [pc, #152]	; (8000fb8 <display7SEGX+0x10c>)
 8000f1e:	f001 f902 	bl	8002126 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG3X_GPIO_Port, SEG3X_Pin, (segmentMap[num] & 0b00010000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000f22:	f107 020c 	add.w	r2, r7, #12
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	f003 0310 	and.w	r3, r3, #16
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	bf0c      	ite	eq
 8000f34:	2301      	moveq	r3, #1
 8000f36:	2300      	movne	r3, #0
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	481e      	ldr	r0, [pc, #120]	; (8000fb8 <display7SEGX+0x10c>)
 8000f40:	f001 f8f1 	bl	8002126 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG4X_GPIO_Port, SEG4X_Pin, (segmentMap[num] & 0b00001000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000f44:	f107 020c 	add.w	r2, r7, #12
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	bf0c      	ite	eq
 8000f56:	2301      	moveq	r3, #1
 8000f58:	2300      	movne	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	2110      	movs	r1, #16
 8000f60:	4815      	ldr	r0, [pc, #84]	; (8000fb8 <display7SEGX+0x10c>)
 8000f62:	f001 f8e0 	bl	8002126 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG5X_GPIO_Port, SEG5X_Pin, (segmentMap[num] & 0b00000100) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000f66:	f107 020c 	add.w	r2, r7, #12
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	bf0c      	ite	eq
 8000f78:	2301      	moveq	r3, #1
 8000f7a:	2300      	movne	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2120      	movs	r1, #32
 8000f82:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <display7SEGX+0x10c>)
 8000f84:	f001 f8cf 	bl	8002126 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG6X_GPIO_Port, SEG6X_Pin, (segmentMap[num] & 0b00000010) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000f88:	f107 020c 	add.w	r2, r7, #12
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4413      	add	r3, r2
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	bf0c      	ite	eq
 8000f9a:	2301      	moveq	r3, #1
 8000f9c:	2300      	movne	r3, #0
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	2140      	movs	r1, #64	; 0x40
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <display7SEGX+0x10c>)
 8000fa6:	f001 f8be 	bl	8002126 <HAL_GPIO_WritePin>
  }
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	08003168 	.word	0x08003168
 8000fb8:	40010c00 	.word	0x40010c00

08000fbc <display7SEGY>:
void display7SEGY(int num) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
      const uint8_t segmentMap[10] = {
 8000fc4:	4a42      	ldr	r2, [pc, #264]	; (80010d0 <display7SEGY+0x114>)
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fcc:	c303      	stmia	r3!, {r0, r1}
 8000fce:	801a      	strh	r2, [r3, #0]
          0b10111110,
          0b11100000,
          0b11111110,
          0b11110110
      };
      HAL_GPIO_WritePin(SEG0Y_GPIO_Port, SEG0Y_Pin, (segmentMap[num] & 0b10000000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000fd0:	f107 020c 	add.w	r2, r7, #12
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b25b      	sxtb	r3, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	09db      	lsrs	r3, r3, #7
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fea:	483a      	ldr	r0, [pc, #232]	; (80010d4 <display7SEGY+0x118>)
 8000fec:	f001 f89b 	bl	8002126 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG1Y_GPIO_Port, SEG1Y_Pin, (segmentMap[num] & 0b01000000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000ff0:	f107 020c 	add.w	r2, r7, #12
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	bf0c      	ite	eq
 8001002:	2301      	moveq	r3, #1
 8001004:	2300      	movne	r3, #0
 8001006:	b2db      	uxtb	r3, r3
 8001008:	461a      	mov	r2, r3
 800100a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100e:	4831      	ldr	r0, [pc, #196]	; (80010d4 <display7SEGY+0x118>)
 8001010:	f001 f889 	bl	8002126 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG2Y_GPIO_Port, SEG2Y_Pin, (segmentMap[num] & 0b00100000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001014:	f107 020c 	add.w	r2, r7, #12
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	f003 0320 	and.w	r3, r3, #32
 8001022:	2b00      	cmp	r3, #0
 8001024:	bf0c      	ite	eq
 8001026:	2301      	moveq	r3, #1
 8001028:	2300      	movne	r3, #0
 800102a:	b2db      	uxtb	r3, r3
 800102c:	461a      	mov	r2, r3
 800102e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001032:	4828      	ldr	r0, [pc, #160]	; (80010d4 <display7SEGY+0x118>)
 8001034:	f001 f877 	bl	8002126 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG3Y_GPIO_Port, SEG3Y_Pin, (segmentMap[num] & 0b00010000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001038:	f107 020c 	add.w	r2, r7, #12
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4413      	add	r3, r2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	2b00      	cmp	r3, #0
 8001048:	bf0c      	ite	eq
 800104a:	2301      	moveq	r3, #1
 800104c:	2300      	movne	r3, #0
 800104e:	b2db      	uxtb	r3, r3
 8001050:	461a      	mov	r2, r3
 8001052:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001056:	481f      	ldr	r0, [pc, #124]	; (80010d4 <display7SEGY+0x118>)
 8001058:	f001 f865 	bl	8002126 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG4Y_GPIO_Port, SEG4Y_Pin, (segmentMap[num] & 0b00001000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800105c:	f107 020c 	add.w	r2, r7, #12
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4413      	add	r3, r2
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	2b00      	cmp	r3, #0
 800106c:	bf0c      	ite	eq
 800106e:	2301      	moveq	r3, #1
 8001070:	2300      	movne	r3, #0
 8001072:	b2db      	uxtb	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800107a:	4816      	ldr	r0, [pc, #88]	; (80010d4 <display7SEGY+0x118>)
 800107c:	f001 f853 	bl	8002126 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG5Y_GPIO_Port, SEG5Y_Pin, (segmentMap[num] & 0b00000100) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001080:	f107 020c 	add.w	r2, r7, #12
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4413      	add	r3, r2
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf0c      	ite	eq
 8001092:	2301      	moveq	r3, #1
 8001094:	2300      	movne	r3, #0
 8001096:	b2db      	uxtb	r3, r3
 8001098:	461a      	mov	r2, r3
 800109a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <display7SEGY+0x118>)
 80010a0:	f001 f841 	bl	8002126 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG6Y_GPIO_Port, SEG6Y_Pin, (segmentMap[num] & 0b00000010) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80010a4:	f107 020c 	add.w	r2, r7, #12
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4413      	add	r3, r2
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	bf0c      	ite	eq
 80010b6:	2301      	moveq	r3, #1
 80010b8:	2300      	movne	r3, #0
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c2:	4804      	ldr	r0, [pc, #16]	; (80010d4 <display7SEGY+0x118>)
 80010c4:	f001 f82f 	bl	8002126 <HAL_GPIO_WritePin>
  }
 80010c8:	bf00      	nop
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	08003168 	.word	0x08003168
 80010d4:	40010800 	.word	0x40010800

080010d8 <led7_segment_run02>:
void led7_segment_run02(){
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
//				counterred02=5;
//				counteryellow02=2;
//				countergreen02=3;
//			}
//	}
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	480e      	ldr	r0, [pc, #56]	; (800111c <led7_segment_run02+0x44>)
 80010e4:	f001 f81f 	bl	8002126 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ee:	480b      	ldr	r0, [pc, #44]	; (800111c <led7_segment_run02+0x44>)
 80010f0:	f001 f819 	bl	8002126 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2180      	movs	r1, #128	; 0x80
 80010f8:	4808      	ldr	r0, [pc, #32]	; (800111c <led7_segment_run02+0x44>)
 80010fa:	f001 f814 	bl	8002126 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <led7_segment_run02+0x44>)
 8001106:	f001 f80e 	bl	8002126 <HAL_GPIO_WritePin>
			display7SEGX(0);
 800110a:	2000      	movs	r0, #0
 800110c:	f7ff fece 	bl	8000eac <display7SEGX>
			display7SEGY(0);
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff ff53 	bl	8000fbc <display7SEGY>
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40010c00 	.word	0x40010c00

08001120 <led7_segment_run13>:
void led7_segment_run13(){
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	if(idx_led13>=(2*b+2*c)) idx_led13=0;
 8001124:	4b8b      	ldr	r3, [pc, #556]	; (8001354 <led7_segment_run13+0x234>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b8b      	ldr	r3, [pc, #556]	; (8001358 <led7_segment_run13+0x238>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4413      	add	r3, r2
 800112e:	005a      	lsls	r2, r3, #1
 8001130:	4b8a      	ldr	r3, [pc, #552]	; (800135c <led7_segment_run13+0x23c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	dc02      	bgt.n	800113e <led7_segment_run13+0x1e>
 8001138:	4b88      	ldr	r3, [pc, #544]	; (800135c <led7_segment_run13+0x23c>)
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
	idx_led13++;
 800113e:	4b87      	ldr	r3, [pc, #540]	; (800135c <led7_segment_run13+0x23c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	4a85      	ldr	r2, [pc, #532]	; (800135c <led7_segment_run13+0x23c>)
 8001146:	6013      	str	r3, [r2, #0]
	if(idx_led13<=b){
 8001148:	4b84      	ldr	r3, [pc, #528]	; (800135c <led7_segment_run13+0x23c>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b81      	ldr	r3, [pc, #516]	; (8001354 <led7_segment_run13+0x234>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	dc26      	bgt.n	80011a2 <led7_segment_run13+0x82>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115a:	4881      	ldr	r0, [pc, #516]	; (8001360 <led7_segment_run13+0x240>)
 800115c:	f000 ffe3 	bl	8002126 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001166:	487e      	ldr	r0, [pc, #504]	; (8001360 <led7_segment_run13+0x240>)
 8001168:	f000 ffdd 	bl	8002126 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800116c:	2201      	movs	r2, #1
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	487b      	ldr	r0, [pc, #492]	; (8001360 <led7_segment_run13+0x240>)
 8001172:	f000 ffd8 	bl	8002126 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001176:	2201      	movs	r2, #1
 8001178:	f44f 7100 	mov.w	r1, #512	; 0x200
 800117c:	4878      	ldr	r0, [pc, #480]	; (8001360 <led7_segment_run13+0x240>)
 800117e:	f000 ffd2 	bl	8002126 <HAL_GPIO_WritePin>
		display7SEGX(counterred13--);
 8001182:	4b78      	ldr	r3, [pc, #480]	; (8001364 <led7_segment_run13+0x244>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	1e5a      	subs	r2, r3, #1
 8001188:	4976      	ldr	r1, [pc, #472]	; (8001364 <led7_segment_run13+0x244>)
 800118a:	600a      	str	r2, [r1, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fe8d 	bl	8000eac <display7SEGX>
		display7SEGY(countergreen13--);
 8001192:	4b75      	ldr	r3, [pc, #468]	; (8001368 <led7_segment_run13+0x248>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	1e5a      	subs	r2, r3, #1
 8001198:	4973      	ldr	r1, [pc, #460]	; (8001368 <led7_segment_run13+0x248>)
 800119a:	600a      	str	r2, [r1, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff0d 	bl	8000fbc <display7SEGY>
	}
	if(idx_led13>b&&idx_led13<=(b+c)){
 80011a2:	4b6e      	ldr	r3, [pc, #440]	; (800135c <led7_segment_run13+0x23c>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4b6b      	ldr	r3, [pc, #428]	; (8001354 <led7_segment_run13+0x234>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dd44      	ble.n	8001238 <led7_segment_run13+0x118>
 80011ae:	4b69      	ldr	r3, [pc, #420]	; (8001354 <led7_segment_run13+0x234>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4b69      	ldr	r3, [pc, #420]	; (8001358 <led7_segment_run13+0x238>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	441a      	add	r2, r3
 80011b8:	4b68      	ldr	r3, [pc, #416]	; (800135c <led7_segment_run13+0x23c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	db3b      	blt.n	8001238 <led7_segment_run13+0x118>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c6:	4866      	ldr	r0, [pc, #408]	; (8001360 <led7_segment_run13+0x240>)
 80011c8:	f000 ffad 	bl	8002126 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d2:	4863      	ldr	r0, [pc, #396]	; (8001360 <led7_segment_run13+0x240>)
 80011d4:	f000 ffa7 	bl	8002126 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	2180      	movs	r1, #128	; 0x80
 80011dc:	4860      	ldr	r0, [pc, #384]	; (8001360 <led7_segment_run13+0x240>)
 80011de:	f000 ffa2 	bl	8002126 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e8:	485d      	ldr	r0, [pc, #372]	; (8001360 <led7_segment_run13+0x240>)
 80011ea:	f000 ff9c 	bl	8002126 <HAL_GPIO_WritePin>
		display7SEGX(counterred13--);
 80011ee:	4b5d      	ldr	r3, [pc, #372]	; (8001364 <led7_segment_run13+0x244>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	1e5a      	subs	r2, r3, #1
 80011f4:	495b      	ldr	r1, [pc, #364]	; (8001364 <led7_segment_run13+0x244>)
 80011f6:	600a      	str	r2, [r1, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fe57 	bl	8000eac <display7SEGX>
		display7SEGY(counteryellow13--);
 80011fe:	4b5b      	ldr	r3, [pc, #364]	; (800136c <led7_segment_run13+0x24c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	1e5a      	subs	r2, r3, #1
 8001204:	4959      	ldr	r1, [pc, #356]	; (800136c <led7_segment_run13+0x24c>)
 8001206:	600a      	str	r2, [r1, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fed7 	bl	8000fbc <display7SEGY>
			if(idx_led13>=(b+c)){
 800120e:	4b51      	ldr	r3, [pc, #324]	; (8001354 <led7_segment_run13+0x234>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b51      	ldr	r3, [pc, #324]	; (8001358 <led7_segment_run13+0x238>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	441a      	add	r2, r3
 8001218:	4b50      	ldr	r3, [pc, #320]	; (800135c <led7_segment_run13+0x23c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	dc0b      	bgt.n	8001238 <led7_segment_run13+0x118>
				counterred13=a;
 8001220:	4b53      	ldr	r3, [pc, #332]	; (8001370 <led7_segment_run13+0x250>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a4f      	ldr	r2, [pc, #316]	; (8001364 <led7_segment_run13+0x244>)
 8001226:	6013      	str	r3, [r2, #0]
				counteryellow13=c;
 8001228:	4b4b      	ldr	r3, [pc, #300]	; (8001358 <led7_segment_run13+0x238>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a4f      	ldr	r2, [pc, #316]	; (800136c <led7_segment_run13+0x24c>)
 800122e:	6013      	str	r3, [r2, #0]
				countergreen13=b;
 8001230:	4b48      	ldr	r3, [pc, #288]	; (8001354 <led7_segment_run13+0x234>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a4c      	ldr	r2, [pc, #304]	; (8001368 <led7_segment_run13+0x248>)
 8001236:	6013      	str	r3, [r2, #0]
			}
	}
	if(idx_led13>(b+c)&&idx_led13<=(2*b+c)){
 8001238:	4b46      	ldr	r3, [pc, #280]	; (8001354 <led7_segment_run13+0x234>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b46      	ldr	r3, [pc, #280]	; (8001358 <led7_segment_run13+0x238>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	441a      	add	r2, r3
 8001242:	4b46      	ldr	r3, [pc, #280]	; (800135c <led7_segment_run13+0x23c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	da30      	bge.n	80012ac <led7_segment_run13+0x18c>
 800124a:	4b42      	ldr	r3, [pc, #264]	; (8001354 <led7_segment_run13+0x234>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	005a      	lsls	r2, r3, #1
 8001250:	4b41      	ldr	r3, [pc, #260]	; (8001358 <led7_segment_run13+0x238>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	441a      	add	r2, r3
 8001256:	4b41      	ldr	r3, [pc, #260]	; (800135c <led7_segment_run13+0x23c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	db26      	blt.n	80012ac <led7_segment_run13+0x18c>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001264:	483e      	ldr	r0, [pc, #248]	; (8001360 <led7_segment_run13+0x240>)
 8001266:	f000 ff5e 	bl	8002126 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001270:	483b      	ldr	r0, [pc, #236]	; (8001360 <led7_segment_run13+0x240>)
 8001272:	f000 ff58 	bl	8002126 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001276:	2201      	movs	r2, #1
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	4839      	ldr	r0, [pc, #228]	; (8001360 <led7_segment_run13+0x240>)
 800127c:	f000 ff53 	bl	8002126 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001286:	4836      	ldr	r0, [pc, #216]	; (8001360 <led7_segment_run13+0x240>)
 8001288:	f000 ff4d 	bl	8002126 <HAL_GPIO_WritePin>
		display7SEGY(counterred13--);
 800128c:	4b35      	ldr	r3, [pc, #212]	; (8001364 <led7_segment_run13+0x244>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	1e5a      	subs	r2, r3, #1
 8001292:	4934      	ldr	r1, [pc, #208]	; (8001364 <led7_segment_run13+0x244>)
 8001294:	600a      	str	r2, [r1, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fe90 	bl	8000fbc <display7SEGY>
		display7SEGX(countergreen13--);
 800129c:	4b32      	ldr	r3, [pc, #200]	; (8001368 <led7_segment_run13+0x248>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	1e5a      	subs	r2, r3, #1
 80012a2:	4931      	ldr	r1, [pc, #196]	; (8001368 <led7_segment_run13+0x248>)
 80012a4:	600a      	str	r2, [r1, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fe00 	bl	8000eac <display7SEGX>
	}
	if(idx_led13>(2*b+c)&&idx_led13<=(2*b+2*c)){
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <led7_segment_run13+0x234>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	005a      	lsls	r2, r3, #1
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <led7_segment_run13+0x238>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	441a      	add	r2, r3
 80012b8:	4b28      	ldr	r3, [pc, #160]	; (800135c <led7_segment_run13+0x23c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	da46      	bge.n	800134e <led7_segment_run13+0x22e>
 80012c0:	4b24      	ldr	r3, [pc, #144]	; (8001354 <led7_segment_run13+0x234>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b24      	ldr	r3, [pc, #144]	; (8001358 <led7_segment_run13+0x238>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4413      	add	r3, r2
 80012ca:	005a      	lsls	r2, r3, #1
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <led7_segment_run13+0x23c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	db3c      	blt.n	800134e <led7_segment_run13+0x22e>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012da:	4821      	ldr	r0, [pc, #132]	; (8001360 <led7_segment_run13+0x240>)
 80012dc:	f000 ff23 	bl	8002126 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012e6:	481e      	ldr	r0, [pc, #120]	; (8001360 <led7_segment_run13+0x240>)
 80012e8:	f000 ff1d 	bl	8002126 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	2180      	movs	r1, #128	; 0x80
 80012f0:	481b      	ldr	r0, [pc, #108]	; (8001360 <led7_segment_run13+0x240>)
 80012f2:	f000 ff18 	bl	8002126 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012fc:	4818      	ldr	r0, [pc, #96]	; (8001360 <led7_segment_run13+0x240>)
 80012fe:	f000 ff12 	bl	8002126 <HAL_GPIO_WritePin>
		display7SEGY(counterred13--);
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <led7_segment_run13+0x244>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	1e5a      	subs	r2, r3, #1
 8001308:	4916      	ldr	r1, [pc, #88]	; (8001364 <led7_segment_run13+0x244>)
 800130a:	600a      	str	r2, [r1, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fe55 	bl	8000fbc <display7SEGY>
		display7SEGX(counteryellow13--);
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <led7_segment_run13+0x24c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	1e5a      	subs	r2, r3, #1
 8001318:	4914      	ldr	r1, [pc, #80]	; (800136c <led7_segment_run13+0x24c>)
 800131a:	600a      	str	r2, [r1, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fdc5 	bl	8000eac <display7SEGX>
			if(idx_led13>=(2*b+2*c)){
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <led7_segment_run13+0x234>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <led7_segment_run13+0x238>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4413      	add	r3, r2
 800132c:	005a      	lsls	r2, r3, #1
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <led7_segment_run13+0x23c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	dc0b      	bgt.n	800134e <led7_segment_run13+0x22e>
				counterred13=a;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <led7_segment_run13+0x250>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <led7_segment_run13+0x244>)
 800133c:	6013      	str	r3, [r2, #0]
				counteryellow13=c;
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <led7_segment_run13+0x238>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <led7_segment_run13+0x24c>)
 8001344:	6013      	str	r3, [r2, #0]
				countergreen13=b;
 8001346:	4b03      	ldr	r3, [pc, #12]	; (8001354 <led7_segment_run13+0x234>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a07      	ldr	r2, [pc, #28]	; (8001368 <led7_segment_run13+0x248>)
 800134c:	6013      	str	r3, [r2, #0]
			}
	}
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000060 	.word	0x20000060
 8001358:	20000064 	.word	0x20000064
 800135c:	200000b0 	.word	0x200000b0
 8001360:	40010c00 	.word	0x40010c00
 8001364:	20000050 	.word	0x20000050
 8001368:	20000058 	.word	0x20000058
 800136c:	20000054 	.word	0x20000054
 8001370:	2000005c 	.word	0x2000005c

08001374 <Save_led7RED_segment_run13>:
//		break;
//	}
//}
void Save_led7_segment_run02(){
}
void Save_led7RED_segment_run13(){
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800137e:	481b      	ldr	r0, [pc, #108]	; (80013ec <Save_led7RED_segment_run13+0x78>)
 8001380:	f000 fed1 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800138a:	4818      	ldr	r0, [pc, #96]	; (80013ec <Save_led7RED_segment_run13+0x78>)
 800138c:	f000 fecb 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001390:	2201      	movs	r2, #1
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	4815      	ldr	r0, [pc, #84]	; (80013ec <Save_led7RED_segment_run13+0x78>)
 8001396:	f000 fec6 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800139a:	2201      	movs	r2, #1
 800139c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013a0:	4812      	ldr	r0, [pc, #72]	; (80013ec <Save_led7RED_segment_run13+0x78>)
 80013a2:	f000 fec0 	bl	8002126 <HAL_GPIO_WritePin>
	if(checkcounterred==0){
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <Save_led7RED_segment_run13+0x7c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10b      	bne.n	80013c6 <Save_led7RED_segment_run13+0x52>
		savecounterred13=++counterred13;
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <Save_led7RED_segment_run13+0x80>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	3301      	adds	r3, #1
 80013b4:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <Save_led7RED_segment_run13+0x80>)
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <Save_led7RED_segment_run13+0x80>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <Save_led7RED_segment_run13+0x84>)
 80013be:	6013      	str	r3, [r2, #0]
		checkcounterred=1;
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <Save_led7RED_segment_run13+0x7c>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]
	}
	display7SEGX(savecounterred13++);
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <Save_led7RED_segment_run13+0x84>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	490a      	ldr	r1, [pc, #40]	; (80013f8 <Save_led7RED_segment_run13+0x84>)
 80013ce:	600a      	str	r2, [r1, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fd6b 	bl	8000eac <display7SEGX>
	display7SEGY(1);
 80013d6:	2001      	movs	r0, #1
 80013d8:	f7ff fdf0 	bl	8000fbc <display7SEGY>
	--savecounterred13;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <Save_led7RED_segment_run13+0x84>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <Save_led7RED_segment_run13+0x84>)
 80013e4:	6013      	str	r3, [r2, #0]
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40010c00 	.word	0x40010c00
 80013f0:	200000bc 	.word	0x200000bc
 80013f4:	20000050 	.word	0x20000050
 80013f8:	200000c0 	.word	0x200000c0

080013fc <Increase_Save_led7RED_segment_run13>:
void Increase_Save_led7RED_segment_run13(){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001406:	4811      	ldr	r0, [pc, #68]	; (800144c <Increase_Save_led7RED_segment_run13+0x50>)
 8001408:	f000 fe8d 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001412:	480e      	ldr	r0, [pc, #56]	; (800144c <Increase_Save_led7RED_segment_run13+0x50>)
 8001414:	f000 fe87 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001418:	2201      	movs	r2, #1
 800141a:	2180      	movs	r1, #128	; 0x80
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <Increase_Save_led7RED_segment_run13+0x50>)
 800141e:	f000 fe82 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001422:	2201      	movs	r2, #1
 8001424:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001428:	4808      	ldr	r0, [pc, #32]	; (800144c <Increase_Save_led7RED_segment_run13+0x50>)
 800142a:	f000 fe7c 	bl	8002126 <HAL_GPIO_WritePin>
	display7SEGX(++savecounterred13);
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <Increase_Save_led7RED_segment_run13+0x54>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	4a06      	ldr	r2, [pc, #24]	; (8001450 <Increase_Save_led7RED_segment_run13+0x54>)
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <Increase_Save_led7RED_segment_run13+0x54>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fd35 	bl	8000eac <display7SEGX>
	display7SEGY(1);
 8001442:	2001      	movs	r0, #1
 8001444:	f7ff fdba 	bl	8000fbc <display7SEGY>
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40010c00 	.word	0x40010c00
 8001450:	200000c0 	.word	0x200000c0

08001454 <Save_led7GREEN_segment_run13>:
void Save_led7GREEN_segment_run13(){
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145e:	481b      	ldr	r0, [pc, #108]	; (80014cc <Save_led7GREEN_segment_run13+0x78>)
 8001460:	f000 fe61 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800146a:	4818      	ldr	r0, [pc, #96]	; (80014cc <Save_led7GREEN_segment_run13+0x78>)
 800146c:	f000 fe5b 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001470:	2201      	movs	r2, #1
 8001472:	2180      	movs	r1, #128	; 0x80
 8001474:	4815      	ldr	r0, [pc, #84]	; (80014cc <Save_led7GREEN_segment_run13+0x78>)
 8001476:	f000 fe56 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800147a:	2201      	movs	r2, #1
 800147c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001480:	4812      	ldr	r0, [pc, #72]	; (80014cc <Save_led7GREEN_segment_run13+0x78>)
 8001482:	f000 fe50 	bl	8002126 <HAL_GPIO_WritePin>
	if(checkcountergreen==0){
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <Save_led7GREEN_segment_run13+0x7c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10b      	bne.n	80014a6 <Save_led7GREEN_segment_run13+0x52>
		savecountergreen13=++countergreen13;
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <Save_led7GREEN_segment_run13+0x80>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	3301      	adds	r3, #1
 8001494:	4a0f      	ldr	r2, [pc, #60]	; (80014d4 <Save_led7GREEN_segment_run13+0x80>)
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <Save_led7GREEN_segment_run13+0x80>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <Save_led7GREEN_segment_run13+0x84>)
 800149e:	6013      	str	r3, [r2, #0]
		checkcountergreen=1;
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <Save_led7GREEN_segment_run13+0x7c>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]
	}
	display7SEGX(savecountergreen13++);
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <Save_led7GREEN_segment_run13+0x84>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	490a      	ldr	r1, [pc, #40]	; (80014d8 <Save_led7GREEN_segment_run13+0x84>)
 80014ae:	600a      	str	r2, [r1, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fcfb 	bl	8000eac <display7SEGX>
	display7SEGY(2);
 80014b6:	2002      	movs	r0, #2
 80014b8:	f7ff fd80 	bl	8000fbc <display7SEGY>
	--savecountergreen13;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <Save_led7GREEN_segment_run13+0x84>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <Save_led7GREEN_segment_run13+0x84>)
 80014c4:	6013      	str	r3, [r2, #0]
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40010c00 	.word	0x40010c00
 80014d0:	200000b8 	.word	0x200000b8
 80014d4:	20000058 	.word	0x20000058
 80014d8:	200000b4 	.word	0x200000b4

080014dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e0:	f000 fb20 	bl	8001b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e4:	f000 f816 	bl	8001514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e8:	f000 f89c 	bl	8001624 <MX_GPIO_Init>
  MX_TIM2_Init();
 80014ec:	f000 f84e 	bl	800158c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 80014f0:	4806      	ldr	r0, [pc, #24]	; (800150c <main+0x30>)
 80014f2:	f001 fa75 	bl	80029e0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <main+0x34>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
  while (1)
  {
//	  if(isButtonPressed(0)==1){
//		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
//	  }
	  fsm_automatic_run();
 80014fc:	f7fe feda 	bl	80002b4 <fsm_automatic_run>
	  fsm_manual_run();
 8001500:	f7ff f886 	bl	8000610 <fsm_manual_run>
	  fsm_setting_run();
 8001504:	f7ff fa5e 	bl	80009c4 <fsm_setting_run>
	  fsm_automatic_run();
 8001508:	e7f8      	b.n	80014fc <main+0x20>
 800150a:	bf00      	nop
 800150c:	200000c4 	.word	0x200000c4
 8001510:	200000ac 	.word	0x200000ac

08001514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b090      	sub	sp, #64	; 0x40
 8001518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151a:	f107 0318 	add.w	r3, r7, #24
 800151e:	2228      	movs	r2, #40	; 0x28
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f001 fe0c 	bl	8003140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001536:	2302      	movs	r3, #2
 8001538:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800153a:	2301      	movs	r3, #1
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800153e:	2310      	movs	r3, #16
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001542:	2300      	movs	r3, #0
 8001544:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001546:	f107 0318 	add.w	r3, r7, #24
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fe1c 	bl	8002188 <HAL_RCC_OscConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001556:	f000 f8e3 	bl	8001720 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155a:	230f      	movs	r3, #15
 800155c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f001 f888 	bl	8002688 <HAL_RCC_ClockConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800157e:	f000 f8cf 	bl	8001720 <Error_Handler>
  }
}
 8001582:	bf00      	nop
 8001584:	3740      	adds	r7, #64	; 0x40
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a0:	463b      	mov	r3, r7
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <MX_TIM2_Init+0x94>)
 80015aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <MX_TIM2_Init+0x94>)
 80015b2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80015b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <MX_TIM2_Init+0x94>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <MX_TIM2_Init+0x94>)
 80015c0:	2209      	movs	r2, #9
 80015c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <MX_TIM2_Init+0x94>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <MX_TIM2_Init+0x94>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015d0:	4813      	ldr	r0, [pc, #76]	; (8001620 <MX_TIM2_Init+0x94>)
 80015d2:	f001 f9b5 	bl	8002940 <HAL_TIM_Base_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015dc:	f000 f8a0 	bl	8001720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	4619      	mov	r1, r3
 80015ec:	480c      	ldr	r0, [pc, #48]	; (8001620 <MX_TIM2_Init+0x94>)
 80015ee:	f001 fb33 	bl	8002c58 <HAL_TIM_ConfigClockSource>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015f8:	f000 f892 	bl	8001720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fc:	2300      	movs	r3, #0
 80015fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001604:	463b      	mov	r3, r7
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_TIM2_Init+0x94>)
 800160a:	f001 fd0b 	bl	8003024 <HAL_TIMEx_MasterConfigSynchronization>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001614:	f000 f884 	bl	8001720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200000c4 	.word	0x200000c4

08001624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001638:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <MX_GPIO_Init+0xd4>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a2e      	ldr	r2, [pc, #184]	; (80016f8 <MX_GPIO_Init+0xd4>)
 800163e:	f043 0310 	orr.w	r3, r3, #16
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <MX_GPIO_Init+0xd4>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001650:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <MX_GPIO_Init+0xd4>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a28      	ldr	r2, [pc, #160]	; (80016f8 <MX_GPIO_Init+0xd4>)
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <MX_GPIO_Init+0xd4>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001668:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <MX_GPIO_Init+0xd4>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a22      	ldr	r2, [pc, #136]	; (80016f8 <MX_GPIO_Init+0xd4>)
 800166e:	f043 0308 	orr.w	r3, r3, #8
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <MX_GPIO_Init+0xd4>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED2_Pin
 8001680:	2200      	movs	r2, #0
 8001682:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8001686:	481d      	ldr	r0, [pc, #116]	; (80016fc <MX_GPIO_Init+0xd8>)
 8001688:	f000 fd4d 	bl	8002126 <HAL_GPIO_WritePin>
                          |LED_RED_Pin|LED_GREEN2_Pin|LED_YELLOW2_Pin|SEG0Y_Pin
                          |SEG1Y_Pin|SEG2Y_Pin|SEG3Y_Pin|SEG4Y_Pin
                          |SEG5Y_Pin|SEG6Y_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0X_Pin|SEG1X_Pin|SEG2X_Pin|EN3_Pin
 800168c:	2200      	movs	r2, #0
 800168e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001692:	481b      	ldr	r0, [pc, #108]	; (8001700 <MX_GPIO_Init+0xdc>)
 8001694:	f000 fd47 	bl	8002126 <HAL_GPIO_WritePin>
                          |SEG3X_Pin|SEG4X_Pin|SEG5X_Pin|SEG6X_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin;
 8001698:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800169c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a6:	f107 0310 	add.w	r3, r7, #16
 80016aa:	4619      	mov	r1, r3
 80016ac:	4815      	ldr	r0, [pc, #84]	; (8001704 <MX_GPIO_Init+0xe0>)
 80016ae:	f000 fba9 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED1_Pin LED_GREEN1_Pin LED_YELLOW1_Pin LED_RED2_Pin
                           LED_RED_Pin LED_GREEN2_Pin LED_YELLOW2_Pin SEG0Y_Pin
                           SEG1Y_Pin SEG2Y_Pin SEG3Y_Pin SEG4Y_Pin
                           SEG5Y_Pin SEG6Y_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED2_Pin
 80016b2:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 80016b6:	613b      	str	r3, [r7, #16]
                          |LED_RED_Pin|LED_GREEN2_Pin|LED_YELLOW2_Pin|SEG0Y_Pin
                          |SEG1Y_Pin|SEG2Y_Pin|SEG3Y_Pin|SEG4Y_Pin
                          |SEG5Y_Pin|SEG6Y_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b8:	2301      	movs	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	4619      	mov	r1, r3
 80016ca:	480c      	ldr	r0, [pc, #48]	; (80016fc <MX_GPIO_Init+0xd8>)
 80016cc:	f000 fb9a 	bl	8001e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0X_Pin SEG1X_Pin SEG2X_Pin EN3_Pin
                           SEG3X_Pin SEG4X_Pin SEG5X_Pin SEG6X_Pin
                           EN0_Pin EN1_Pin EN2_Pin */
  GPIO_InitStruct.Pin = SEG0X_Pin|SEG1X_Pin|SEG2X_Pin|EN3_Pin
 80016d0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80016d4:	613b      	str	r3, [r7, #16]
                          |SEG3X_Pin|SEG4X_Pin|SEG5X_Pin|SEG6X_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d6:	2301      	movs	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2302      	movs	r3, #2
 80016e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f107 0310 	add.w	r3, r7, #16
 80016e6:	4619      	mov	r1, r3
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_GPIO_Init+0xdc>)
 80016ea:	f000 fb8b 	bl	8001e04 <HAL_GPIO_Init>

}
 80016ee:	bf00      	nop
 80016f0:	3720      	adds	r7, #32
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40010800 	.word	0x40010800
 8001700:	40010c00 	.word	0x40010c00
 8001704:	40011000 	.word	0x40011000

08001708 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	    timerRun();
 8001710:	f000 f846 	bl	80017a0 <timerRun>
		getKeyInput();
 8001714:	f7fe fd44 	bl	80001a0 <getKeyInput>
 }
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001724:	b672      	cpsid	i
}
 8001726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001728:	e7fe      	b.n	8001728 <Error_Handler+0x8>
	...

0800172c <setTimer>:
#define TIMER_TICK 10

int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];

void setTimer(int index, int value){
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
	timer_counter[index]=value/TIMER_TICK;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	4a09      	ldr	r2, [pc, #36]	; (8001760 <setTimer+0x34>)
 800173a:	fb82 1203 	smull	r1, r2, r2, r3
 800173e:	1092      	asrs	r2, r2, #2
 8001740:	17db      	asrs	r3, r3, #31
 8001742:	1ad2      	subs	r2, r2, r3
 8001744:	4907      	ldr	r1, [pc, #28]	; (8001764 <setTimer+0x38>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index]=0;
 800174c:	4a06      	ldr	r2, [pc, #24]	; (8001768 <setTimer+0x3c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2100      	movs	r1, #0
 8001752:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	66666667 	.word	0x66666667
 8001764:	2000010c 	.word	0x2000010c
 8001768:	20000134 	.word	0x20000134

0800176c <isTimerExpired>:

int isTimerExpired(int index){
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	if(timer_flag[index]==1){
 8001774:	4a09      	ldr	r2, [pc, #36]	; (800179c <isTimerExpired+0x30>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d106      	bne.n	800178e <isTimerExpired+0x22>
		timer_flag[index]=0;
 8001780:	4a06      	ldr	r2, [pc, #24]	; (800179c <isTimerExpired+0x30>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2100      	movs	r1, #0
 8001786:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <isTimerExpired+0x24>
	}
	return 0;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000134 	.word	0x20000134

080017a0 <timerRun>:

void timerRun(){
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_COUNTER;i++){
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	e01c      	b.n	80017e6 <timerRun+0x46>
		if(timer_counter[i]>0){
 80017ac:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <timerRun+0x58>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	dd13      	ble.n	80017e0 <timerRun+0x40>
			timer_counter[i]--;
 80017b8:	4a0f      	ldr	r2, [pc, #60]	; (80017f8 <timerRun+0x58>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c0:	1e5a      	subs	r2, r3, #1
 80017c2:	490d      	ldr	r1, [pc, #52]	; (80017f8 <timerRun+0x58>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i]<=0) timer_flag[i]=1;
 80017ca:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <timerRun+0x58>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	dc04      	bgt.n	80017e0 <timerRun+0x40>
 80017d6:	4a09      	ldr	r2, [pc, #36]	; (80017fc <timerRun+0x5c>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2101      	movs	r1, #1
 80017dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<MAX_COUNTER;i++){
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3301      	adds	r3, #1
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b09      	cmp	r3, #9
 80017ea:	dddf      	ble.n	80017ac <timerRun+0xc>
		}
	}
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	2000010c 	.word	0x2000010c
 80017fc:	20000134 	.word	0x20000134

08001800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_MspInit+0x5c>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	4a14      	ldr	r2, [pc, #80]	; (800185c <HAL_MspInit+0x5c>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6193      	str	r3, [r2, #24]
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_MspInit+0x5c>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_MspInit+0x5c>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a0e      	ldr	r2, [pc, #56]	; (800185c <HAL_MspInit+0x5c>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001828:	61d3      	str	r3, [r2, #28]
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_MspInit+0x5c>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_MspInit+0x60>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_MspInit+0x60>)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	40021000 	.word	0x40021000
 8001860:	40010000 	.word	0x40010000

08001864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001874:	d113      	bne.n	800189e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <HAL_TIM_Base_MspInit+0x44>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <HAL_TIM_Base_MspInit+0x44>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	61d3      	str	r3, [r2, #28]
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_TIM_Base_MspInit+0x44>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	201c      	movs	r0, #28
 8001894:	f000 fa7f 	bl	8001d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001898:	201c      	movs	r0, #28
 800189a:	f000 fa98 	bl	8001dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000

080018ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <NMI_Handler+0x4>

080018b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <HardFault_Handler+0x4>

080018b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <MemManage_Handler+0x4>

080018be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <BusFault_Handler+0x4>

080018c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <UsageFault_Handler+0x4>

080018ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr

080018ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f2:	f000 f95d 	bl	8001bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001900:	4802      	ldr	r0, [pc, #8]	; (800190c <TIM2_IRQHandler+0x10>)
 8001902:	f001 f8b9 	bl	8002a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200000c4 	.word	0x200000c4

08001910 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <set_led>:
 *  Created on: 29 thg 10, 2024
 *      Author: ADMIN
 */
#include "traffic_light.h"

void set_led(){
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED1_Pin|LED_YELLOW2_Pin
 8001920:	2201      	movs	r2, #1
 8001922:	21fe      	movs	r1, #254	; 0xfe
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <set_led+0x14>)
 8001926:	f000 fbfe 	bl	8002126 <HAL_GPIO_WritePin>
	                          |LED_RED_Pin|LED_GREEN2_Pin|LED_RED2_Pin, GPIO_PIN_SET);
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40010800 	.word	0x40010800

08001934 <Turn_On_All_LED_RED>:

void Turn_On_All_LED_RED(){
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin , RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	2112      	movs	r1, #18
 800193c:	4807      	ldr	r0, [pc, #28]	; (800195c <Turn_On_All_LED_RED+0x28>)
 800193e:	f000 fbf2 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin , SET);
 8001942:	2201      	movs	r2, #1
 8001944:	2144      	movs	r1, #68	; 0x44
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <Turn_On_All_LED_RED+0x28>)
 8001948:	f000 fbed 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin , SET);
 800194c:	2201      	movs	r2, #1
 800194e:	2188      	movs	r1, #136	; 0x88
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <Turn_On_All_LED_RED+0x28>)
 8001952:	f000 fbe8 	bl	8002126 <HAL_GPIO_WritePin>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40010800 	.word	0x40010800

08001960 <Turn_On_All_LED_GREEN>:
void Turn_On_All_LED_GREEN(){
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin , RESET);
 8001964:	2200      	movs	r2, #0
 8001966:	2144      	movs	r1, #68	; 0x44
 8001968:	4807      	ldr	r0, [pc, #28]	; (8001988 <Turn_On_All_LED_GREEN+0x28>)
 800196a:	f000 fbdc 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin , SET);
 800196e:	2201      	movs	r2, #1
 8001970:	2112      	movs	r1, #18
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <Turn_On_All_LED_GREEN+0x28>)
 8001974:	f000 fbd7 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin , SET);
 8001978:	2201      	movs	r2, #1
 800197a:	2188      	movs	r1, #136	; 0x88
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <Turn_On_All_LED_GREEN+0x28>)
 800197e:	f000 fbd2 	bl	8002126 <HAL_GPIO_WritePin>
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40010800 	.word	0x40010800

0800198c <Turn_On_All_LED_YELLOW>:
void Turn_On_All_LED_YELLOW(){
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin , RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	2188      	movs	r1, #136	; 0x88
 8001994:	4807      	ldr	r0, [pc, #28]	; (80019b4 <Turn_On_All_LED_YELLOW+0x28>)
 8001996:	f000 fbc6 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin , SET);
 800199a:	2201      	movs	r2, #1
 800199c:	2144      	movs	r1, #68	; 0x44
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <Turn_On_All_LED_YELLOW+0x28>)
 80019a0:	f000 fbc1 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin , SET);
 80019a4:	2201      	movs	r2, #1
 80019a6:	2112      	movs	r1, #18
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <Turn_On_All_LED_YELLOW+0x28>)
 80019aa:	f000 fbbc 	bl	8002126 <HAL_GPIO_WritePin>
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40010800 	.word	0x40010800

080019b8 <LED_RED1_GREEN2>:
void LED_RED1_GREEN2(){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80019bc:	2201      	movs	r2, #1
 80019be:	2110      	movs	r1, #16
 80019c0:	480e      	ldr	r0, [pc, #56]	; (80019fc <LED_RED1_GREEN2+0x44>)
 80019c2:	f000 fbb0 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80019c6:	2201      	movs	r2, #1
 80019c8:	2104      	movs	r1, #4
 80019ca:	480c      	ldr	r0, [pc, #48]	; (80019fc <LED_RED1_GREEN2+0x44>)
 80019cc:	f000 fbab 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 80019d0:	2201      	movs	r2, #1
 80019d2:	2108      	movs	r1, #8
 80019d4:	4809      	ldr	r0, [pc, #36]	; (80019fc <LED_RED1_GREEN2+0x44>)
 80019d6:	f000 fba6 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 80019da:	2201      	movs	r2, #1
 80019dc:	2180      	movs	r1, #128	; 0x80
 80019de:	4807      	ldr	r0, [pc, #28]	; (80019fc <LED_RED1_GREEN2+0x44>)
 80019e0:	f000 fba1 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2102      	movs	r1, #2
 80019e8:	4804      	ldr	r0, [pc, #16]	; (80019fc <LED_RED1_GREEN2+0x44>)
 80019ea:	f000 fb9c 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2140      	movs	r1, #64	; 0x40
 80019f2:	4802      	ldr	r0, [pc, #8]	; (80019fc <LED_RED1_GREEN2+0x44>)
 80019f4:	f000 fb97 	bl	8002126 <HAL_GPIO_WritePin>
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40010800 	.word	0x40010800

08001a00 <LED_RED1_YELLOW2>:

void LED_RED1_YELLOW2(){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8001a04:	2201      	movs	r2, #1
 8001a06:	2110      	movs	r1, #16
 8001a08:	480e      	ldr	r0, [pc, #56]	; (8001a44 <LED_RED1_YELLOW2+0x44>)
 8001a0a:	f000 fb8c 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2104      	movs	r1, #4
 8001a12:	480c      	ldr	r0, [pc, #48]	; (8001a44 <LED_RED1_YELLOW2+0x44>)
 8001a14:	f000 fb87 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	2108      	movs	r1, #8
 8001a1c:	4809      	ldr	r0, [pc, #36]	; (8001a44 <LED_RED1_YELLOW2+0x44>)
 8001a1e:	f000 fb82 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	2140      	movs	r1, #64	; 0x40
 8001a26:	4807      	ldr	r0, [pc, #28]	; (8001a44 <LED_RED1_YELLOW2+0x44>)
 8001a28:	f000 fb7d 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2102      	movs	r1, #2
 8001a30:	4804      	ldr	r0, [pc, #16]	; (8001a44 <LED_RED1_YELLOW2+0x44>)
 8001a32:	f000 fb78 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2180      	movs	r1, #128	; 0x80
 8001a3a:	4802      	ldr	r0, [pc, #8]	; (8001a44 <LED_RED1_YELLOW2+0x44>)
 8001a3c:	f000 fb73 	bl	8002126 <HAL_GPIO_WritePin>
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40010800 	.word	0x40010800

08001a48 <LED_GREEN1_RED2>:

void LED_GREEN1_RED2(){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2102      	movs	r1, #2
 8001a50:	480e      	ldr	r0, [pc, #56]	; (8001a8c <LED_GREEN1_RED2+0x44>)
 8001a52:	f000 fb68 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	480c      	ldr	r0, [pc, #48]	; (8001a8c <LED_GREEN1_RED2+0x44>)
 8001a5c:	f000 fb63 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001a60:	2201      	movs	r2, #1
 8001a62:	2108      	movs	r1, #8
 8001a64:	4809      	ldr	r0, [pc, #36]	; (8001a8c <LED_GREEN1_RED2+0x44>)
 8001a66:	f000 fb5e 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2140      	movs	r1, #64	; 0x40
 8001a6e:	4807      	ldr	r0, [pc, #28]	; (8001a8c <LED_GREEN1_RED2+0x44>)
 8001a70:	f000 fb59 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2104      	movs	r1, #4
 8001a78:	4804      	ldr	r0, [pc, #16]	; (8001a8c <LED_GREEN1_RED2+0x44>)
 8001a7a:	f000 fb54 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2110      	movs	r1, #16
 8001a82:	4802      	ldr	r0, [pc, #8]	; (8001a8c <LED_GREEN1_RED2+0x44>)
 8001a84:	f000 fb4f 	bl	8002126 <HAL_GPIO_WritePin>
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40010800 	.word	0x40010800

08001a90 <LED_YELLOW1_RED2>:

void LED_YELLOW1_RED2(){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001a94:	2201      	movs	r2, #1
 8001a96:	2102      	movs	r1, #2
 8001a98:	480e      	ldr	r0, [pc, #56]	; (8001ad4 <LED_YELLOW1_RED2+0x44>)
 8001a9a:	f000 fb44 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <LED_YELLOW1_RED2+0x44>)
 8001aa4:	f000 fb3f 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	2104      	movs	r1, #4
 8001aac:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <LED_YELLOW1_RED2+0x44>)
 8001aae:	f000 fb3a 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2140      	movs	r1, #64	; 0x40
 8001ab6:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <LED_YELLOW1_RED2+0x44>)
 8001ab8:	f000 fb35 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2108      	movs	r1, #8
 8001ac0:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <LED_YELLOW1_RED2+0x44>)
 8001ac2:	f000 fb30 	bl	8002126 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2110      	movs	r1, #16
 8001aca:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <LED_YELLOW1_RED2+0x44>)
 8001acc:	f000 fb2b 	bl	8002126 <HAL_GPIO_WritePin>
}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40010800 	.word	0x40010800

08001ad8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ad8:	f7ff ff1a 	bl	8001910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001adc:	480b      	ldr	r0, [pc, #44]	; (8001b0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ade:	490c      	ldr	r1, [pc, #48]	; (8001b10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ae0:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae4:	e002      	b.n	8001aec <LoopCopyDataInit>

08001ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aea:	3304      	adds	r3, #4

08001aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af0:	d3f9      	bcc.n	8001ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af2:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001af4:	4c09      	ldr	r4, [pc, #36]	; (8001b1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af8:	e001      	b.n	8001afe <LoopFillZerobss>

08001afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001afc:	3204      	adds	r2, #4

08001afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b00:	d3fb      	bcc.n	8001afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b02:	f001 faf9 	bl	80030f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b06:	f7ff fce9 	bl	80014dc <main>
  bx lr
 8001b0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b10:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b14:	080031a0 	.word	0x080031a0
  ldr r2, =_sbss
 8001b18:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b1c:	20000160 	.word	0x20000160

08001b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC1_2_IRQHandler>
	...

08001b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <HAL_Init+0x28>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <HAL_Init+0x28>)
 8001b2e:	f043 0310 	orr.w	r3, r3, #16
 8001b32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b34:	2003      	movs	r0, #3
 8001b36:	f000 f923 	bl	8001d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b3a:	200f      	movs	r0, #15
 8001b3c:	f000 f808 	bl	8001b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b40:	f7ff fe5e 	bl	8001800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40022000 	.word	0x40022000

08001b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_InitTick+0x54>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_InitTick+0x58>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 f93b 	bl	8001dea <HAL_SYSTICK_Config>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00e      	b.n	8001b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b0f      	cmp	r3, #15
 8001b82:	d80a      	bhi.n	8001b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b84:	2200      	movs	r2, #0
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f000 f903 	bl	8001d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b90:	4a06      	ldr	r2, [pc, #24]	; (8001bac <HAL_InitTick+0x5c>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e000      	b.n	8001b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000068 	.word	0x20000068
 8001ba8:	20000070 	.word	0x20000070
 8001bac:	2000006c 	.word	0x2000006c

08001bb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <HAL_IncTick+0x1c>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_IncTick+0x20>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4a03      	ldr	r2, [pc, #12]	; (8001bd0 <HAL_IncTick+0x20>)
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	20000070 	.word	0x20000070
 8001bd0:	2000015c 	.word	0x2000015c

08001bd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd8:	4b02      	ldr	r3, [pc, #8]	; (8001be4 <HAL_GetTick+0x10>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	2000015c 	.word	0x2000015c

08001be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4906      	ldr	r1, [pc, #24]	; (8001c80 <__NVIC_EnableIRQ+0x34>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0a      	blt.n	8001cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	490c      	ldr	r1, [pc, #48]	; (8001cd0 <__NVIC_SetPriority+0x4c>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	0112      	lsls	r2, r2, #4
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cac:	e00a      	b.n	8001cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4908      	ldr	r1, [pc, #32]	; (8001cd4 <__NVIC_SetPriority+0x50>)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	3b04      	subs	r3, #4
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	761a      	strb	r2, [r3, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f1c3 0307 	rsb	r3, r3, #7
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	bf28      	it	cs
 8001cf6:	2304      	movcs	r3, #4
 8001cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d902      	bls.n	8001d08 <NVIC_EncodePriority+0x30>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	e000      	b.n	8001d0a <NVIC_EncodePriority+0x32>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	4313      	orrs	r3, r2
         );
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d4c:	d301      	bcc.n	8001d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00f      	b.n	8001d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <SysTick_Config+0x40>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5a:	210f      	movs	r1, #15
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f7ff ff90 	bl	8001c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <SysTick_Config+0x40>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <SysTick_Config+0x40>)
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	e000e010 	.word	0xe000e010

08001d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff2d 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da8:	f7ff ff42 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	6978      	ldr	r0, [r7, #20]
 8001db4:	f7ff ff90 	bl	8001cd8 <NVIC_EncodePriority>
 8001db8:	4602      	mov	r2, r0
 8001dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff5f 	bl	8001c84 <__NVIC_SetPriority>
}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff35 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff ffa2 	bl	8001d3c <SysTick_Config>
 8001df8:	4603      	mov	r3, r0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b08b      	sub	sp, #44	; 0x2c
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e16:	e148      	b.n	80020aa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e18:	2201      	movs	r2, #1
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	f040 8137 	bne.w	80020a4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4aa3      	ldr	r2, [pc, #652]	; (80020c8 <HAL_GPIO_Init+0x2c4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d05e      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e40:	4aa1      	ldr	r2, [pc, #644]	; (80020c8 <HAL_GPIO_Init+0x2c4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d875      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e46:	4aa1      	ldr	r2, [pc, #644]	; (80020cc <HAL_GPIO_Init+0x2c8>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d058      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e4c:	4a9f      	ldr	r2, [pc, #636]	; (80020cc <HAL_GPIO_Init+0x2c8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d86f      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e52:	4a9f      	ldr	r2, [pc, #636]	; (80020d0 <HAL_GPIO_Init+0x2cc>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d052      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e58:	4a9d      	ldr	r2, [pc, #628]	; (80020d0 <HAL_GPIO_Init+0x2cc>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d869      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e5e:	4a9d      	ldr	r2, [pc, #628]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d04c      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e64:	4a9b      	ldr	r2, [pc, #620]	; (80020d4 <HAL_GPIO_Init+0x2d0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d863      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e6a:	4a9b      	ldr	r2, [pc, #620]	; (80020d8 <HAL_GPIO_Init+0x2d4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d046      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
 8001e70:	4a99      	ldr	r2, [pc, #612]	; (80020d8 <HAL_GPIO_Init+0x2d4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d85d      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e76:	2b12      	cmp	r3, #18
 8001e78:	d82a      	bhi.n	8001ed0 <HAL_GPIO_Init+0xcc>
 8001e7a:	2b12      	cmp	r3, #18
 8001e7c:	d859      	bhi.n	8001f32 <HAL_GPIO_Init+0x12e>
 8001e7e:	a201      	add	r2, pc, #4	; (adr r2, 8001e84 <HAL_GPIO_Init+0x80>)
 8001e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e84:	08001eff 	.word	0x08001eff
 8001e88:	08001ed9 	.word	0x08001ed9
 8001e8c:	08001eeb 	.word	0x08001eeb
 8001e90:	08001f2d 	.word	0x08001f2d
 8001e94:	08001f33 	.word	0x08001f33
 8001e98:	08001f33 	.word	0x08001f33
 8001e9c:	08001f33 	.word	0x08001f33
 8001ea0:	08001f33 	.word	0x08001f33
 8001ea4:	08001f33 	.word	0x08001f33
 8001ea8:	08001f33 	.word	0x08001f33
 8001eac:	08001f33 	.word	0x08001f33
 8001eb0:	08001f33 	.word	0x08001f33
 8001eb4:	08001f33 	.word	0x08001f33
 8001eb8:	08001f33 	.word	0x08001f33
 8001ebc:	08001f33 	.word	0x08001f33
 8001ec0:	08001f33 	.word	0x08001f33
 8001ec4:	08001f33 	.word	0x08001f33
 8001ec8:	08001ee1 	.word	0x08001ee1
 8001ecc:	08001ef5 	.word	0x08001ef5
 8001ed0:	4a82      	ldr	r2, [pc, #520]	; (80020dc <HAL_GPIO_Init+0x2d8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d013      	beq.n	8001efe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ed6:	e02c      	b.n	8001f32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	623b      	str	r3, [r7, #32]
          break;
 8001ede:	e029      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	623b      	str	r3, [r7, #32]
          break;
 8001ee8:	e024      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	3308      	adds	r3, #8
 8001ef0:	623b      	str	r3, [r7, #32]
          break;
 8001ef2:	e01f      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	330c      	adds	r3, #12
 8001efa:	623b      	str	r3, [r7, #32]
          break;
 8001efc:	e01a      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d102      	bne.n	8001f0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f06:	2304      	movs	r3, #4
 8001f08:	623b      	str	r3, [r7, #32]
          break;
 8001f0a:	e013      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d105      	bne.n	8001f20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f14:	2308      	movs	r3, #8
 8001f16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	611a      	str	r2, [r3, #16]
          break;
 8001f1e:	e009      	b.n	8001f34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f20:	2308      	movs	r3, #8
 8001f22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	615a      	str	r2, [r3, #20]
          break;
 8001f2a:	e003      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	623b      	str	r3, [r7, #32]
          break;
 8001f30:	e000      	b.n	8001f34 <HAL_GPIO_Init+0x130>
          break;
 8001f32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2bff      	cmp	r3, #255	; 0xff
 8001f38:	d801      	bhi.n	8001f3e <HAL_GPIO_Init+0x13a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	e001      	b.n	8001f42 <HAL_GPIO_Init+0x13e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3304      	adds	r3, #4
 8001f42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2bff      	cmp	r3, #255	; 0xff
 8001f48:	d802      	bhi.n	8001f50 <HAL_GPIO_Init+0x14c>
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	e002      	b.n	8001f56 <HAL_GPIO_Init+0x152>
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	3b08      	subs	r3, #8
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	210f      	movs	r1, #15
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	401a      	ands	r2, r3
 8001f68:	6a39      	ldr	r1, [r7, #32]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	431a      	orrs	r2, r3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8090 	beq.w	80020a4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f84:	4b56      	ldr	r3, [pc, #344]	; (80020e0 <HAL_GPIO_Init+0x2dc>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a55      	ldr	r2, [pc, #340]	; (80020e0 <HAL_GPIO_Init+0x2dc>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b53      	ldr	r3, [pc, #332]	; (80020e0 <HAL_GPIO_Init+0x2dc>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f9c:	4a51      	ldr	r2, [pc, #324]	; (80020e4 <HAL_GPIO_Init+0x2e0>)
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a49      	ldr	r2, [pc, #292]	; (80020e8 <HAL_GPIO_Init+0x2e4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d00d      	beq.n	8001fe4 <HAL_GPIO_Init+0x1e0>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a48      	ldr	r2, [pc, #288]	; (80020ec <HAL_GPIO_Init+0x2e8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d007      	beq.n	8001fe0 <HAL_GPIO_Init+0x1dc>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a47      	ldr	r2, [pc, #284]	; (80020f0 <HAL_GPIO_Init+0x2ec>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d101      	bne.n	8001fdc <HAL_GPIO_Init+0x1d8>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e004      	b.n	8001fe6 <HAL_GPIO_Init+0x1e2>
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e002      	b.n	8001fe6 <HAL_GPIO_Init+0x1e2>
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <HAL_GPIO_Init+0x1e2>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe8:	f002 0203 	and.w	r2, r2, #3
 8001fec:	0092      	lsls	r2, r2, #2
 8001fee:	4093      	lsls	r3, r2
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ff6:	493b      	ldr	r1, [pc, #236]	; (80020e4 <HAL_GPIO_Init+0x2e0>)
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d006      	beq.n	800201e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002010:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <HAL_GPIO_Init+0x2f0>)
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	4937      	ldr	r1, [pc, #220]	; (80020f4 <HAL_GPIO_Init+0x2f0>)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	608b      	str	r3, [r1, #8]
 800201c:	e006      	b.n	800202c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800201e:	4b35      	ldr	r3, [pc, #212]	; (80020f4 <HAL_GPIO_Init+0x2f0>)
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	43db      	mvns	r3, r3
 8002026:	4933      	ldr	r1, [pc, #204]	; (80020f4 <HAL_GPIO_Init+0x2f0>)
 8002028:	4013      	ands	r3, r2
 800202a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d006      	beq.n	8002046 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002038:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <HAL_GPIO_Init+0x2f0>)
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	492d      	ldr	r1, [pc, #180]	; (80020f4 <HAL_GPIO_Init+0x2f0>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	60cb      	str	r3, [r1, #12]
 8002044:	e006      	b.n	8002054 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002046:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <HAL_GPIO_Init+0x2f0>)
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	43db      	mvns	r3, r3
 800204e:	4929      	ldr	r1, [pc, #164]	; (80020f4 <HAL_GPIO_Init+0x2f0>)
 8002050:	4013      	ands	r3, r2
 8002052:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d006      	beq.n	800206e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002060:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <HAL_GPIO_Init+0x2f0>)
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	4923      	ldr	r1, [pc, #140]	; (80020f4 <HAL_GPIO_Init+0x2f0>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
 800206c:	e006      	b.n	800207c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800206e:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <HAL_GPIO_Init+0x2f0>)
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	43db      	mvns	r3, r3
 8002076:	491f      	ldr	r1, [pc, #124]	; (80020f4 <HAL_GPIO_Init+0x2f0>)
 8002078:	4013      	ands	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_GPIO_Init+0x2f0>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4919      	ldr	r1, [pc, #100]	; (80020f4 <HAL_GPIO_Init+0x2f0>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002096:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <HAL_GPIO_Init+0x2f0>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	43db      	mvns	r3, r3
 800209e:	4915      	ldr	r1, [pc, #84]	; (80020f4 <HAL_GPIO_Init+0x2f0>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	3301      	adds	r3, #1
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f47f aeaf 	bne.w	8001e18 <HAL_GPIO_Init+0x14>
  }
}
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
 80020be:	372c      	adds	r7, #44	; 0x2c
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	10320000 	.word	0x10320000
 80020cc:	10310000 	.word	0x10310000
 80020d0:	10220000 	.word	0x10220000
 80020d4:	10210000 	.word	0x10210000
 80020d8:	10120000 	.word	0x10120000
 80020dc:	10110000 	.word	0x10110000
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40010000 	.word	0x40010000
 80020e8:	40010800 	.word	0x40010800
 80020ec:	40010c00 	.word	0x40010c00
 80020f0:	40011000 	.word	0x40011000
 80020f4:	40010400 	.word	0x40010400

080020f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	887b      	ldrh	r3, [r7, #2]
 800210a:	4013      	ands	r3, r2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
 8002114:	e001      	b.n	800211a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr

08002126 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	807b      	strh	r3, [r7, #2]
 8002132:	4613      	mov	r3, r2
 8002134:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002136:	787b      	ldrb	r3, [r7, #1]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800213c:	887a      	ldrh	r2, [r7, #2]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002142:	e003      	b.n	800214c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002144:	887b      	ldrh	r3, [r7, #2]
 8002146:	041a      	lsls	r2, r3, #16
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	611a      	str	r2, [r3, #16]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr

08002156 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002156:	b480      	push	{r7}
 8002158:	b085      	sub	sp, #20
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	460b      	mov	r3, r1
 8002160:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002168:	887a      	ldrh	r2, [r7, #2]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4013      	ands	r3, r2
 800216e:	041a      	lsls	r2, r3, #16
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	43d9      	mvns	r1, r3
 8002174:	887b      	ldrh	r3, [r7, #2]
 8002176:	400b      	ands	r3, r1
 8002178:	431a      	orrs	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	611a      	str	r2, [r3, #16]
}
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e26c      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 8087 	beq.w	80022b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a8:	4b92      	ldr	r3, [pc, #584]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d00c      	beq.n	80021ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021b4:	4b8f      	ldr	r3, [pc, #572]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d112      	bne.n	80021e6 <HAL_RCC_OscConfig+0x5e>
 80021c0:	4b8c      	ldr	r3, [pc, #560]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021cc:	d10b      	bne.n	80021e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ce:	4b89      	ldr	r3, [pc, #548]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d06c      	beq.n	80022b4 <HAL_RCC_OscConfig+0x12c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d168      	bne.n	80022b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e246      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ee:	d106      	bne.n	80021fe <HAL_RCC_OscConfig+0x76>
 80021f0:	4b80      	ldr	r3, [pc, #512]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a7f      	ldr	r2, [pc, #508]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	e02e      	b.n	800225c <HAL_RCC_OscConfig+0xd4>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10c      	bne.n	8002220 <HAL_RCC_OscConfig+0x98>
 8002206:	4b7b      	ldr	r3, [pc, #492]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a7a      	ldr	r2, [pc, #488]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800220c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	4b78      	ldr	r3, [pc, #480]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a77      	ldr	r2, [pc, #476]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e01d      	b.n	800225c <HAL_RCC_OscConfig+0xd4>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002228:	d10c      	bne.n	8002244 <HAL_RCC_OscConfig+0xbc>
 800222a:	4b72      	ldr	r3, [pc, #456]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a71      	ldr	r2, [pc, #452]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	4b6f      	ldr	r3, [pc, #444]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a6e      	ldr	r2, [pc, #440]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800223c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	e00b      	b.n	800225c <HAL_RCC_OscConfig+0xd4>
 8002244:	4b6b      	ldr	r3, [pc, #428]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a6a      	ldr	r2, [pc, #424]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800224a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b68      	ldr	r3, [pc, #416]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a67      	ldr	r2, [pc, #412]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d013      	beq.n	800228c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7ff fcb6 	bl	8001bd4 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800226c:	f7ff fcb2 	bl	8001bd4 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e1fa      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	4b5d      	ldr	r3, [pc, #372]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0xe4>
 800228a:	e014      	b.n	80022b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7ff fca2 	bl	8001bd4 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002294:	f7ff fc9e 	bl	8001bd4 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	; 0x64
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e1e6      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a6:	4b53      	ldr	r3, [pc, #332]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x10c>
 80022b2:	e000      	b.n	80022b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d063      	beq.n	800238a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022c2:	4b4c      	ldr	r3, [pc, #304]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00b      	beq.n	80022e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ce:	4b49      	ldr	r3, [pc, #292]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d11c      	bne.n	8002314 <HAL_RCC_OscConfig+0x18c>
 80022da:	4b46      	ldr	r3, [pc, #280]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d116      	bne.n	8002314 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e6:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_RCC_OscConfig+0x176>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d001      	beq.n	80022fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e1ba      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fe:	4b3d      	ldr	r3, [pc, #244]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4939      	ldr	r1, [pc, #228]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002312:	e03a      	b.n	800238a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d020      	beq.n	800235e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800231c:	4b36      	ldr	r3, [pc, #216]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 800231e:	2201      	movs	r2, #1
 8002320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002322:	f7ff fc57 	bl	8001bd4 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232a:	f7ff fc53 	bl	8001bd4 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e19b      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233c:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002348:	4b2a      	ldr	r3, [pc, #168]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4927      	ldr	r1, [pc, #156]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002358:	4313      	orrs	r3, r2
 800235a:	600b      	str	r3, [r1, #0]
 800235c:	e015      	b.n	800238a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7ff fc36 	bl	8001bd4 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236c:	f7ff fc32 	bl	8001bd4 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e17a      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237e:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d03a      	beq.n	800240c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d019      	beq.n	80023d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239e:	4b17      	ldr	r3, [pc, #92]	; (80023fc <HAL_RCC_OscConfig+0x274>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a4:	f7ff fc16 	bl	8001bd4 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ac:	f7ff fc12 	bl	8001bd4 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e15a      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023ca:	2001      	movs	r0, #1
 80023cc:	f000 fa9a 	bl	8002904 <RCC_Delay>
 80023d0:	e01c      	b.n	800240c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <HAL_RCC_OscConfig+0x274>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d8:	f7ff fbfc 	bl	8001bd4 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023de:	e00f      	b.n	8002400 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e0:	f7ff fbf8 	bl	8001bd4 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d908      	bls.n	8002400 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e140      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	42420000 	.word	0x42420000
 80023fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002400:	4b9e      	ldr	r3, [pc, #632]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1e9      	bne.n	80023e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80a6 	beq.w	8002566 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241e:	4b97      	ldr	r3, [pc, #604]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10d      	bne.n	8002446 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800242a:	4b94      	ldr	r3, [pc, #592]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4a93      	ldr	r2, [pc, #588]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002434:	61d3      	str	r3, [r2, #28]
 8002436:	4b91      	ldr	r3, [pc, #580]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002442:	2301      	movs	r3, #1
 8002444:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002446:	4b8e      	ldr	r3, [pc, #568]	; (8002680 <HAL_RCC_OscConfig+0x4f8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d118      	bne.n	8002484 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002452:	4b8b      	ldr	r3, [pc, #556]	; (8002680 <HAL_RCC_OscConfig+0x4f8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a8a      	ldr	r2, [pc, #552]	; (8002680 <HAL_RCC_OscConfig+0x4f8>)
 8002458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800245e:	f7ff fbb9 	bl	8001bd4 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002466:	f7ff fbb5 	bl	8001bd4 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b64      	cmp	r3, #100	; 0x64
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0fd      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002478:	4b81      	ldr	r3, [pc, #516]	; (8002680 <HAL_RCC_OscConfig+0x4f8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d106      	bne.n	800249a <HAL_RCC_OscConfig+0x312>
 800248c:	4b7b      	ldr	r3, [pc, #492]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	4a7a      	ldr	r2, [pc, #488]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6213      	str	r3, [r2, #32]
 8002498:	e02d      	b.n	80024f6 <HAL_RCC_OscConfig+0x36e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0x334>
 80024a2:	4b76      	ldr	r3, [pc, #472]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4a75      	ldr	r2, [pc, #468]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	6213      	str	r3, [r2, #32]
 80024ae:	4b73      	ldr	r3, [pc, #460]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	4a72      	ldr	r2, [pc, #456]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	f023 0304 	bic.w	r3, r3, #4
 80024b8:	6213      	str	r3, [r2, #32]
 80024ba:	e01c      	b.n	80024f6 <HAL_RCC_OscConfig+0x36e>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b05      	cmp	r3, #5
 80024c2:	d10c      	bne.n	80024de <HAL_RCC_OscConfig+0x356>
 80024c4:	4b6d      	ldr	r3, [pc, #436]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4a6c      	ldr	r2, [pc, #432]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	f043 0304 	orr.w	r3, r3, #4
 80024ce:	6213      	str	r3, [r2, #32]
 80024d0:	4b6a      	ldr	r3, [pc, #424]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4a69      	ldr	r2, [pc, #420]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	6213      	str	r3, [r2, #32]
 80024dc:	e00b      	b.n	80024f6 <HAL_RCC_OscConfig+0x36e>
 80024de:	4b67      	ldr	r3, [pc, #412]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a66      	ldr	r2, [pc, #408]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	6213      	str	r3, [r2, #32]
 80024ea:	4b64      	ldr	r3, [pc, #400]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	4a63      	ldr	r2, [pc, #396]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	f023 0304 	bic.w	r3, r3, #4
 80024f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d015      	beq.n	800252a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fe:	f7ff fb69 	bl	8001bd4 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002504:	e00a      	b.n	800251c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002506:	f7ff fb65 	bl	8001bd4 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	f241 3288 	movw	r2, #5000	; 0x1388
 8002514:	4293      	cmp	r3, r2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e0ab      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251c:	4b57      	ldr	r3, [pc, #348]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0ee      	beq.n	8002506 <HAL_RCC_OscConfig+0x37e>
 8002528:	e014      	b.n	8002554 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252a:	f7ff fb53 	bl	8001bd4 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002530:	e00a      	b.n	8002548 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7ff fb4f 	bl	8001bd4 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002540:	4293      	cmp	r3, r2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e095      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002548:	4b4c      	ldr	r3, [pc, #304]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1ee      	bne.n	8002532 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002554:	7dfb      	ldrb	r3, [r7, #23]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d105      	bne.n	8002566 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255a:	4b48      	ldr	r3, [pc, #288]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	4a47      	ldr	r2, [pc, #284]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002564:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 8081 	beq.w	8002672 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002570:	4b42      	ldr	r3, [pc, #264]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 030c 	and.w	r3, r3, #12
 8002578:	2b08      	cmp	r3, #8
 800257a:	d061      	beq.n	8002640 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d146      	bne.n	8002612 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002584:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <HAL_RCC_OscConfig+0x4fc>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7ff fb23 	bl	8001bd4 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002592:	f7ff fb1f 	bl	8001bd4 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e067      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a4:	4b35      	ldr	r3, [pc, #212]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f0      	bne.n	8002592 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b8:	d108      	bne.n	80025cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ba:	4b30      	ldr	r3, [pc, #192]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	492d      	ldr	r1, [pc, #180]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a19      	ldr	r1, [r3, #32]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	430b      	orrs	r3, r1
 80025de:	4927      	ldr	r1, [pc, #156]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e4:	4b27      	ldr	r3, [pc, #156]	; (8002684 <HAL_RCC_OscConfig+0x4fc>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ea:	f7ff faf3 	bl	8001bd4 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f2:	f7ff faef 	bl	8001bd4 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e037      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x46a>
 8002610:	e02f      	b.n	8002672 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002612:	4b1c      	ldr	r3, [pc, #112]	; (8002684 <HAL_RCC_OscConfig+0x4fc>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7ff fadc 	bl	8001bd4 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002620:	f7ff fad8 	bl	8001bd4 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e020      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x498>
 800263e:	e018      	b.n	8002672 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e013      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	429a      	cmp	r2, r3
 800265e:	d106      	bne.n	800266e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266a:	429a      	cmp	r2, r3
 800266c:	d001      	beq.n	8002672 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40021000 	.word	0x40021000
 8002680:	40007000 	.word	0x40007000
 8002684:	42420060 	.word	0x42420060

08002688 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0d0      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800269c:	4b6a      	ldr	r3, [pc, #424]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d910      	bls.n	80026cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b67      	ldr	r3, [pc, #412]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 0207 	bic.w	r2, r3, #7
 80026b2:	4965      	ldr	r1, [pc, #404]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b63      	ldr	r3, [pc, #396]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0b8      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e4:	4b59      	ldr	r3, [pc, #356]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a58      	ldr	r2, [pc, #352]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026fc:	4b53      	ldr	r3, [pc, #332]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4a52      	ldr	r2, [pc, #328]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002706:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002708:	4b50      	ldr	r3, [pc, #320]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	494d      	ldr	r1, [pc, #308]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d040      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d115      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e07f      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002746:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e073      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002756:	4b3d      	ldr	r3, [pc, #244]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e06b      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002766:	4b39      	ldr	r3, [pc, #228]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f023 0203 	bic.w	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4936      	ldr	r1, [pc, #216]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002778:	f7ff fa2c 	bl	8001bd4 <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	e00a      	b.n	8002796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002780:	f7ff fa28 	bl	8001bd4 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e053      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 020c 	and.w	r2, r3, #12
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d1eb      	bne.n	8002780 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a8:	4b27      	ldr	r3, [pc, #156]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d210      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 0207 	bic.w	r2, r3, #7
 80027be:	4922      	ldr	r1, [pc, #136]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e032      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4916      	ldr	r1, [pc, #88]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	490e      	ldr	r1, [pc, #56]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002816:	f000 f821 	bl	800285c <HAL_RCC_GetSysClockFreq>
 800281a:	4602      	mov	r2, r0
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	490a      	ldr	r1, [pc, #40]	; (8002850 <HAL_RCC_ClockConfig+0x1c8>)
 8002828:	5ccb      	ldrb	r3, [r1, r3]
 800282a:	fa22 f303 	lsr.w	r3, r2, r3
 800282e:	4a09      	ldr	r2, [pc, #36]	; (8002854 <HAL_RCC_ClockConfig+0x1cc>)
 8002830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_RCC_ClockConfig+0x1d0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff f98a 	bl	8001b50 <HAL_InitTick>

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40022000 	.word	0x40022000
 800284c:	40021000 	.word	0x40021000
 8002850:	08003174 	.word	0x08003174
 8002854:	20000068 	.word	0x20000068
 8002858:	2000006c 	.word	0x2000006c

0800285c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b04      	cmp	r3, #4
 8002884:	d002      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0x30>
 8002886:	2b08      	cmp	r3, #8
 8002888:	d003      	beq.n	8002892 <HAL_RCC_GetSysClockFreq+0x36>
 800288a:	e027      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800288c:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800288e:	613b      	str	r3, [r7, #16]
      break;
 8002890:	e027      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	0c9b      	lsrs	r3, r3, #18
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	4a17      	ldr	r2, [pc, #92]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800289c:	5cd3      	ldrb	r3, [r2, r3]
 800289e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d010      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028aa:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	0c5b      	lsrs	r3, r3, #17
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	4a11      	ldr	r2, [pc, #68]	; (80028fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80028b6:	5cd3      	ldrb	r3, [r2, r3]
 80028b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a0d      	ldr	r2, [pc, #52]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80028be:	fb02 f203 	mul.w	r2, r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	e004      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028d0:	fb02 f303 	mul.w	r3, r2, r3
 80028d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	613b      	str	r3, [r7, #16]
      break;
 80028da:	e002      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80028de:	613b      	str	r3, [r7, #16]
      break;
 80028e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e2:	693b      	ldr	r3, [r7, #16]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	007a1200 	.word	0x007a1200
 80028f8:	08003184 	.word	0x08003184
 80028fc:	08003194 	.word	0x08003194
 8002900:	003d0900 	.word	0x003d0900

08002904 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <RCC_Delay+0x34>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0a      	ldr	r2, [pc, #40]	; (800293c <RCC_Delay+0x38>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	0a5b      	lsrs	r3, r3, #9
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002920:	bf00      	nop
  }
  while (Delay --);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1e5a      	subs	r2, r3, #1
 8002926:	60fa      	str	r2, [r7, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f9      	bne.n	8002920 <RCC_Delay+0x1c>
}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	20000068 	.word	0x20000068
 800293c:	10624dd3 	.word	0x10624dd3

08002940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e041      	b.n	80029d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fe ff7c 	bl	8001864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3304      	adds	r3, #4
 800297c:	4619      	mov	r1, r3
 800297e:	4610      	mov	r0, r2
 8002980:	f000 fa56 	bl	8002e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d001      	beq.n	80029f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e035      	b.n	8002a64 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a16      	ldr	r2, [pc, #88]	; (8002a70 <HAL_TIM_Base_Start_IT+0x90>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d009      	beq.n	8002a2e <HAL_TIM_Base_Start_IT+0x4e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a22:	d004      	beq.n	8002a2e <HAL_TIM_Base_Start_IT+0x4e>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <HAL_TIM_Base_Start_IT+0x94>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d111      	bne.n	8002a52 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b06      	cmp	r3, #6
 8002a3e:	d010      	beq.n	8002a62 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a50:	e007      	b.n	8002a62 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0201 	orr.w	r2, r2, #1
 8002a60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40012c00 	.word	0x40012c00
 8002a74:	40000400 	.word	0x40000400

08002a78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d020      	beq.n	8002adc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01b      	beq.n	8002adc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0202 	mvn.w	r2, #2
 8002aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f998 	bl	8002df8 <HAL_TIM_IC_CaptureCallback>
 8002ac8:	e005      	b.n	8002ad6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f98b 	bl	8002de6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f99a 	bl	8002e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d020      	beq.n	8002b28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01b      	beq.n	8002b28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0204 	mvn.w	r2, #4
 8002af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2202      	movs	r2, #2
 8002afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f972 	bl	8002df8 <HAL_TIM_IC_CaptureCallback>
 8002b14:	e005      	b.n	8002b22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f965 	bl	8002de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f974 	bl	8002e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d020      	beq.n	8002b74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01b      	beq.n	8002b74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0208 	mvn.w	r2, #8
 8002b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f94c 	bl	8002df8 <HAL_TIM_IC_CaptureCallback>
 8002b60:	e005      	b.n	8002b6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f93f 	bl	8002de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f94e 	bl	8002e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d020      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01b      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0210 	mvn.w	r2, #16
 8002b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2208      	movs	r2, #8
 8002b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f926 	bl	8002df8 <HAL_TIM_IC_CaptureCallback>
 8002bac:	e005      	b.n	8002bba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f919 	bl	8002de6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f928 	bl	8002e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00c      	beq.n	8002be4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0201 	mvn.w	r2, #1
 8002bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fe fd92 	bl	8001708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00c      	beq.n	8002c08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d007      	beq.n	8002c08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fa6f 	bl	80030e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00c      	beq.n	8002c2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f8f8 	bl	8002e1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00c      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0220 	mvn.w	r2, #32
 8002c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fa42 	bl	80030d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_TIM_ConfigClockSource+0x1c>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e0b4      	b.n	8002dde <HAL_TIM_ConfigClockSource+0x186>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cac:	d03e      	beq.n	8002d2c <HAL_TIM_ConfigClockSource+0xd4>
 8002cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb2:	f200 8087 	bhi.w	8002dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cba:	f000 8086 	beq.w	8002dca <HAL_TIM_ConfigClockSource+0x172>
 8002cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc2:	d87f      	bhi.n	8002dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc4:	2b70      	cmp	r3, #112	; 0x70
 8002cc6:	d01a      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0xa6>
 8002cc8:	2b70      	cmp	r3, #112	; 0x70
 8002cca:	d87b      	bhi.n	8002dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ccc:	2b60      	cmp	r3, #96	; 0x60
 8002cce:	d050      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x11a>
 8002cd0:	2b60      	cmp	r3, #96	; 0x60
 8002cd2:	d877      	bhi.n	8002dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd4:	2b50      	cmp	r3, #80	; 0x50
 8002cd6:	d03c      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0xfa>
 8002cd8:	2b50      	cmp	r3, #80	; 0x50
 8002cda:	d873      	bhi.n	8002dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cdc:	2b40      	cmp	r3, #64	; 0x40
 8002cde:	d058      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0x13a>
 8002ce0:	2b40      	cmp	r3, #64	; 0x40
 8002ce2:	d86f      	bhi.n	8002dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce4:	2b30      	cmp	r3, #48	; 0x30
 8002ce6:	d064      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0x15a>
 8002ce8:	2b30      	cmp	r3, #48	; 0x30
 8002cea:	d86b      	bhi.n	8002dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d060      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0x15a>
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d867      	bhi.n	8002dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d05c      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0x15a>
 8002cf8:	2b10      	cmp	r3, #16
 8002cfa:	d05a      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0x15a>
 8002cfc:	e062      	b.n	8002dc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6899      	ldr	r1, [r3, #8]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f000 f96a 	bl	8002fe6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	609a      	str	r2, [r3, #8]
      break;
 8002d2a:	e04f      	b.n	8002dcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6899      	ldr	r1, [r3, #8]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f000 f953 	bl	8002fe6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d4e:	609a      	str	r2, [r3, #8]
      break;
 8002d50:	e03c      	b.n	8002dcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6859      	ldr	r1, [r3, #4]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f000 f8ca 	bl	8002ef8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2150      	movs	r1, #80	; 0x50
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 f921 	bl	8002fb2 <TIM_ITRx_SetConfig>
      break;
 8002d70:	e02c      	b.n	8002dcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6859      	ldr	r1, [r3, #4]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f000 f8e8 	bl	8002f54 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2160      	movs	r1, #96	; 0x60
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 f911 	bl	8002fb2 <TIM_ITRx_SetConfig>
      break;
 8002d90:	e01c      	b.n	8002dcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6859      	ldr	r1, [r3, #4]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f000 f8aa 	bl	8002ef8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2140      	movs	r1, #64	; 0x40
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 f901 	bl	8002fb2 <TIM_ITRx_SetConfig>
      break;
 8002db0:	e00c      	b.n	8002dcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	f000 f8f8 	bl	8002fb2 <TIM_ITRx_SetConfig>
      break;
 8002dc2:	e003      	b.n	8002dcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc8:	e000      	b.n	8002dcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002dca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
	...

08002e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a2b      	ldr	r2, [pc, #172]	; (8002ef0 <TIM_Base_SetConfig+0xc0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d007      	beq.n	8002e58 <TIM_Base_SetConfig+0x28>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4e:	d003      	beq.n	8002e58 <TIM_Base_SetConfig+0x28>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a28      	ldr	r2, [pc, #160]	; (8002ef4 <TIM_Base_SetConfig+0xc4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d108      	bne.n	8002e6a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a20      	ldr	r2, [pc, #128]	; (8002ef0 <TIM_Base_SetConfig+0xc0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d007      	beq.n	8002e82 <TIM_Base_SetConfig+0x52>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e78:	d003      	beq.n	8002e82 <TIM_Base_SetConfig+0x52>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a1d      	ldr	r2, [pc, #116]	; (8002ef4 <TIM_Base_SetConfig+0xc4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d108      	bne.n	8002e94 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a0d      	ldr	r2, [pc, #52]	; (8002ef0 <TIM_Base_SetConfig+0xc0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d103      	bne.n	8002ec8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f023 0201 	bic.w	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	611a      	str	r2, [r3, #16]
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr
 8002ef0:	40012c00 	.word	0x40012c00
 8002ef4:	40000400 	.word	0x40000400

08002ef8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	f023 0201 	bic.w	r2, r3, #1
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f023 030a 	bic.w	r3, r3, #10
 8002f34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	621a      	str	r2, [r3, #32]
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	f023 0210 	bic.w	r2, r3, #16
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	031b      	lsls	r3, r3, #12
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	621a      	str	r2, [r3, #32]
}
 8002fa8:	bf00      	nop
 8002faa:	371c      	adds	r7, #28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr

08002fb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b085      	sub	sp, #20
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f043 0307 	orr.w	r3, r3, #7
 8002fd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	609a      	str	r2, [r3, #8]
}
 8002fdc:	bf00      	nop
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b087      	sub	sp, #28
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003000:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	021a      	lsls	r2, r3, #8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	431a      	orrs	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4313      	orrs	r3, r2
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	609a      	str	r2, [r3, #8]
}
 800301a:	bf00      	nop
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003038:	2302      	movs	r3, #2
 800303a:	e041      	b.n	80030c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a14      	ldr	r2, [pc, #80]	; (80030cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d009      	beq.n	8003094 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003088:	d004      	beq.n	8003094 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a10      	ldr	r2, [pc, #64]	; (80030d0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d10c      	bne.n	80030ae <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800309a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40012c00 	.word	0x40012c00
 80030d0:	40000400 	.word	0x40000400

080030d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <__libc_init_array>:
 80030f8:	b570      	push	{r4, r5, r6, lr}
 80030fa:	2600      	movs	r6, #0
 80030fc:	4d0c      	ldr	r5, [pc, #48]	; (8003130 <__libc_init_array+0x38>)
 80030fe:	4c0d      	ldr	r4, [pc, #52]	; (8003134 <__libc_init_array+0x3c>)
 8003100:	1b64      	subs	r4, r4, r5
 8003102:	10a4      	asrs	r4, r4, #2
 8003104:	42a6      	cmp	r6, r4
 8003106:	d109      	bne.n	800311c <__libc_init_array+0x24>
 8003108:	f000 f822 	bl	8003150 <_init>
 800310c:	2600      	movs	r6, #0
 800310e:	4d0a      	ldr	r5, [pc, #40]	; (8003138 <__libc_init_array+0x40>)
 8003110:	4c0a      	ldr	r4, [pc, #40]	; (800313c <__libc_init_array+0x44>)
 8003112:	1b64      	subs	r4, r4, r5
 8003114:	10a4      	asrs	r4, r4, #2
 8003116:	42a6      	cmp	r6, r4
 8003118:	d105      	bne.n	8003126 <__libc_init_array+0x2e>
 800311a:	bd70      	pop	{r4, r5, r6, pc}
 800311c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003120:	4798      	blx	r3
 8003122:	3601      	adds	r6, #1
 8003124:	e7ee      	b.n	8003104 <__libc_init_array+0xc>
 8003126:	f855 3b04 	ldr.w	r3, [r5], #4
 800312a:	4798      	blx	r3
 800312c:	3601      	adds	r6, #1
 800312e:	e7f2      	b.n	8003116 <__libc_init_array+0x1e>
 8003130:	08003198 	.word	0x08003198
 8003134:	08003198 	.word	0x08003198
 8003138:	08003198 	.word	0x08003198
 800313c:	0800319c 	.word	0x0800319c

08003140 <memset>:
 8003140:	4603      	mov	r3, r0
 8003142:	4402      	add	r2, r0
 8003144:	4293      	cmp	r3, r2
 8003146:	d100      	bne.n	800314a <memset+0xa>
 8003148:	4770      	bx	lr
 800314a:	f803 1b01 	strb.w	r1, [r3], #1
 800314e:	e7f9      	b.n	8003144 <memset+0x4>

08003150 <_init>:
 8003150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003152:	bf00      	nop
 8003154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003156:	bc08      	pop	{r3}
 8003158:	469e      	mov	lr, r3
 800315a:	4770      	bx	lr

0800315c <_fini>:
 800315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315e:	bf00      	nop
 8003160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003162:	bc08      	pop	{r3}
 8003164:	469e      	mov	lr, r3
 8003166:	4770      	bx	lr
