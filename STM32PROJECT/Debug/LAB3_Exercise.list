
LAB3_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003090  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800319c  0800319c  0001319c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031cc  080031cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080031cc  080031cc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031cc  080031cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031cc  080031cc  000131cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031d0  080031d0  000131d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080031d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000074  08003248  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003248  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ea9  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e06  00000000  00000000  00029f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002bd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002c818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172e3  00000000  00000000  0002d1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2ed  00000000  00000000  00044493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082786  00000000  00000000  00052780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4f06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002980  00000000  00000000  000d4f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003184 	.word	0x08003184

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003184 	.word	0x08003184

0800014c <isButtonPressed>:
int KeyReg2[NUM_BUTTONS]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int KeyReg3[NUM_BUTTONS]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int TimerForKeyPress[NUM_BUTTONS]={200,200,200};
GPIO_TypeDef* Button_GPIO_Port[NUM_BUTTONS]={Button0_GPIO_Port,Button1_GPIO_Port,Button2_GPIO_Port};
uint16_t Button_Pin[NUM_BUTTONS]={Button0_Pin,Button1_Pin,Button2_Pin};
int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(Button_flag[index]==1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		Button_flag[index]=0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000090 	.word	0x20000090

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	Button_flag[index]=1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000090 	.word	0x20000090

080001a0 <getKeyInput>:
//				KeyReg3=NORMAL_STATE;
//			}
//		}
//	}
//}
void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTONS; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e06d      	b.n	8000288 <getKeyInput+0xe8>
		KeyReg0[i] = KeyReg1[i];
 80001ac:	4a3a      	ldr	r2, [pc, #232]	; (8000298 <getKeyInput+0xf8>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4939      	ldr	r1, [pc, #228]	; (800029c <getKeyInput+0xfc>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001bc:	4a38      	ldr	r2, [pc, #224]	; (80002a0 <getKeyInput+0x100>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4934      	ldr	r1, [pc, #208]	; (8000298 <getKeyInput+0xf8>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(Button_GPIO_Port[i], Button_Pin[i]); // Assuming GPIO ports/pins are in arrays
 80001cc:	4a35      	ldr	r2, [pc, #212]	; (80002a4 <getKeyInput+0x104>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4934      	ldr	r1, [pc, #208]	; (80002a8 <getKeyInput+0x108>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001dc:	4619      	mov	r1, r3
 80001de:	4610      	mov	r0, r2
 80001e0:	f001 ffa4 	bl	800212c <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a2d      	ldr	r2, [pc, #180]	; (80002a0 <getKeyInput+0x100>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80001f0:	4a2a      	ldr	r2, [pc, #168]	; (800029c <getKeyInput+0xfc>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	4927      	ldr	r1, [pc, #156]	; (8000298 <getKeyInput+0xf8>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d13e      	bne.n	8000282 <getKeyInput+0xe2>
 8000204:	4a24      	ldr	r2, [pc, #144]	; (8000298 <getKeyInput+0xf8>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4924      	ldr	r1, [pc, #144]	; (80002a0 <getKeyInput+0x100>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d134      	bne.n	8000282 <getKeyInput+0xe2>
			if (KeyReg3[i] != KeyReg2[i]) {
 8000218:	4a24      	ldr	r2, [pc, #144]	; (80002ac <getKeyInput+0x10c>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	491f      	ldr	r1, [pc, #124]	; (80002a0 <getKeyInput+0x100>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d016      	beq.n	800025a <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 800022c:	4a1c      	ldr	r2, [pc, #112]	; (80002a0 <getKeyInput+0x100>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	491d      	ldr	r1, [pc, #116]	; (80002ac <getKeyInput+0x10c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE) {
 800023c:	4a18      	ldr	r2, [pc, #96]	; (80002a0 <getKeyInput+0x100>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d11c      	bne.n	8000282 <getKeyInput+0xe2>
					subKeyProcess(i);  // Assuming a modified subKeyProcess that accepts button index
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f7ff ff99 	bl	8000180 <subKeyProcess>
					TimerForKeyPress[i] = 200;
 800024e:	4a18      	ldr	r2, [pc, #96]	; (80002b0 <getKeyInput+0x110>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	21c8      	movs	r1, #200	; 0xc8
 8000254:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000258:	e013      	b.n	8000282 <getKeyInput+0xe2>
				}
			} else {
				TimerForKeyPress[i]--;
 800025a:	4a15      	ldr	r2, [pc, #84]	; (80002b0 <getKeyInput+0x110>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	1e5a      	subs	r2, r3, #1
 8000264:	4912      	ldr	r1, [pc, #72]	; (80002b0 <getKeyInput+0x110>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimerForKeyPress[i] == 0) {
 800026c:	4a10      	ldr	r2, [pc, #64]	; (80002b0 <getKeyInput+0x110>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d104      	bne.n	8000282 <getKeyInput+0xe2>
					KeyReg3[i] = NORMAL_STATE;
 8000278:	4a0c      	ldr	r2, [pc, #48]	; (80002ac <getKeyInput+0x10c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2101      	movs	r1, #1
 800027e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTONS; i++) {
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	3301      	adds	r3, #1
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b02      	cmp	r3, #2
 800028c:	dd8e      	ble.n	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	2000000c 	.word	0x2000000c
 800029c:	20000000 	.word	0x20000000
 80002a0:	20000018 	.word	0x20000018
 80002a4:	2000003c 	.word	0x2000003c
 80002a8:	20000048 	.word	0x20000048
 80002ac:	20000024 	.word	0x20000024
 80002b0:	20000030 	.word	0x20000030

080002b4 <fsm_automatic_run>:
//			break;
//		default:
//			break;
//	}
//}
void fsm_automatic_run(){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	switch(status){
 80002b8:	4bd2      	ldr	r3, [pc, #840]	; (8000604 <fsm_automatic_run+0x350>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	3b01      	subs	r3, #1
 80002be:	2b04      	cmp	r3, #4
 80002c0:	f200 819d 	bhi.w	80005fe <fsm_automatic_run+0x34a>
 80002c4:	a201      	add	r2, pc, #4	; (adr r2, 80002cc <fsm_automatic_run+0x18>)
 80002c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ca:	bf00      	nop
 80002cc:	080002e1 	.word	0x080002e1
 80002d0:	08000319 	.word	0x08000319
 80002d4:	080003d3 	.word	0x080003d3
 80002d8:	0800048d 	.word	0x0800048d
 80002dc:	08000547 	.word	0x08000547
		case INIT:
			 //  counter=0;
               set_led();
 80002e0:	f001 fb36 	bl	8001950 <set_led>
               set_led7_segement();
 80002e4:	f000 fde8 	bl	8000eb8 <set_led7_segement>
               status=AUTO_RED1_GREEN2;
 80002e8:	4bc6      	ldr	r3, [pc, #792]	; (8000604 <fsm_automatic_run+0x350>)
 80002ea:	2202      	movs	r2, #2
 80002ec:	601a      	str	r2, [r3, #0]
               setTimer(0, b*1000);
 80002ee:	4bc6      	ldr	r3, [pc, #792]	; (8000608 <fsm_automatic_run+0x354>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002f6:	fb02 f303 	mul.w	r3, r2, r3
 80002fa:	4619      	mov	r1, r3
 80002fc:	2000      	movs	r0, #0
 80002fe:	f001 fa2f 	bl	8001760 <setTimer>
               setTimer(1, 443);
 8000302:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000306:	2001      	movs	r0, #1
 8000308:	f001 fa2a 	bl	8001760 <setTimer>
               setTimer(2, 1000);
 800030c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000310:	2002      	movs	r0, #2
 8000312:	f001 fa25 	bl	8001760 <setTimer>
			break;
 8000316:	e188      	b.n	800062a <fsm_automatic_run+0x376>
		case AUTO_RED1_GREEN2:
			LED_RED1_GREEN2();
 8000318:	f001 fb68 	bl	80019ec <LED_RED1_GREEN2>
			if(counter==0){
 800031c:	4bbb      	ldr	r3, [pc, #748]	; (800060c <fsm_automatic_run+0x358>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d104      	bne.n	800032e <fsm_automatic_run+0x7a>
			led7_segment_run13();
 8000324:	f000 ff16 	bl	8001154 <led7_segment_run13>
			counter=1;
 8000328:	4bb8      	ldr	r3, [pc, #736]	; (800060c <fsm_automatic_run+0x358>)
 800032a:	2201      	movs	r2, #1
 800032c:	601a      	str	r2, [r3, #0]
			}
			if(isTimerExpired(1)==1){
 800032e:	2001      	movs	r0, #1
 8000330:	f001 fa36 	bl	80017a0 <isTimerExpired>
 8000334:	4603      	mov	r3, r0
 8000336:	2b01      	cmp	r3, #1
 8000338:	d106      	bne.n	8000348 <fsm_automatic_run+0x94>
				led7_segment_run02();
 800033a:	f000 fee7 	bl	800110c <led7_segment_run02>
				setTimer(1, 443);
 800033e:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000342:	2001      	movs	r0, #1
 8000344:	f001 fa0c 	bl	8001760 <setTimer>
			}
			if(isTimerExpired(2)==1){
 8000348:	2002      	movs	r0, #2
 800034a:	f001 fa29 	bl	80017a0 <isTimerExpired>
 800034e:	4603      	mov	r3, r0
 8000350:	2b01      	cmp	r3, #1
 8000352:	d106      	bne.n	8000362 <fsm_automatic_run+0xae>
					led7_segment_run13();
 8000354:	f000 fefe 	bl	8001154 <led7_segment_run13>
					setTimer(2, 1000);
 8000358:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800035c:	2002      	movs	r0, #2
 800035e:	f001 f9ff 	bl	8001760 <setTimer>
			}
			if(isTimerExpired(0)==1){
 8000362:	2000      	movs	r0, #0
 8000364:	f001 fa1c 	bl	80017a0 <isTimerExpired>
 8000368:	4603      	mov	r3, r0
 800036a:	2b01      	cmp	r3, #1
 800036c:	d10c      	bne.n	8000388 <fsm_automatic_run+0xd4>
				status=AUTO_RED1_YELLOW2;
 800036e:	4ba5      	ldr	r3, [pc, #660]	; (8000604 <fsm_automatic_run+0x350>)
 8000370:	2203      	movs	r2, #3
 8000372:	601a      	str	r2, [r3, #0]
				setTimer(0, c*1000);
 8000374:	4ba6      	ldr	r3, [pc, #664]	; (8000610 <fsm_automatic_run+0x35c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800037c:	fb02 f303 	mul.w	r3, r2, r3
 8000380:	4619      	mov	r1, r3
 8000382:	2000      	movs	r0, #0
 8000384:	f001 f9ec 	bl	8001760 <setTimer>
	              // setTimer(1, 500);
	             //  setTimer(2, 1000);
				//counter=0;
			}
			if(isButtonPressed(0)==1){
 8000388:	2000      	movs	r0, #0
 800038a:	f7ff fedf 	bl	800014c <isButtonPressed>
 800038e:	4603      	mov	r3, r0
 8000390:	2b01      	cmp	r3, #1
 8000392:	f040 8143 	bne.w	800061c <fsm_automatic_run+0x368>
		//		 HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
				status=MAN_RED;
 8000396:	4b9b      	ldr	r3, [pc, #620]	; (8000604 <fsm_automatic_run+0x350>)
 8000398:	220c      	movs	r2, #12
 800039a:	601a      	str	r2, [r3, #0]
			//	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
				setTimer(1, 500);
 800039c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80003a0:	2001      	movs	r0, #1
 80003a2:	f001 f9dd 	bl	8001760 <setTimer>
				setTimer(2, 1000);
 80003a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003aa:	2002      	movs	r0, #2
 80003ac:	f001 f9d8 	bl	8001760 <setTimer>
				setTimer(3, 500);
 80003b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80003b4:	2003      	movs	r0, #3
 80003b6:	f001 f9d3 	bl	8001760 <setTimer>
				setTimer(4, 10000);
 80003ba:	f242 7110 	movw	r1, #10000	; 0x2710
 80003be:	2004      	movs	r0, #4
 80003c0:	f001 f9ce 	bl	8001760 <setTimer>
				checkstatus=4;
 80003c4:	4b93      	ldr	r3, [pc, #588]	; (8000614 <fsm_automatic_run+0x360>)
 80003c6:	2204      	movs	r2, #4
 80003c8:	601a      	str	r2, [r3, #0]
				check=0;
 80003ca:	4b93      	ldr	r3, [pc, #588]	; (8000618 <fsm_automatic_run+0x364>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
			}
			break;
 80003d0:	e124      	b.n	800061c <fsm_automatic_run+0x368>
		case AUTO_RED1_YELLOW2:
			LED_RED1_YELLOW2();
 80003d2:	f001 fb2f 	bl	8001a34 <LED_RED1_YELLOW2>
			if(counter==0){
 80003d6:	4b8d      	ldr	r3, [pc, #564]	; (800060c <fsm_automatic_run+0x358>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d104      	bne.n	80003e8 <fsm_automatic_run+0x134>
			led7_segment_run13();
 80003de:	f000 feb9 	bl	8001154 <led7_segment_run13>
			counter=1;
 80003e2:	4b8a      	ldr	r3, [pc, #552]	; (800060c <fsm_automatic_run+0x358>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	601a      	str	r2, [r3, #0]
			}
			if(isTimerExpired(1)==1){
 80003e8:	2001      	movs	r0, #1
 80003ea:	f001 f9d9 	bl	80017a0 <isTimerExpired>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d106      	bne.n	8000402 <fsm_automatic_run+0x14e>
				led7_segment_run02();
 80003f4:	f000 fe8a 	bl	800110c <led7_segment_run02>
				setTimer(1, 443);
 80003f8:	f240 11bb 	movw	r1, #443	; 0x1bb
 80003fc:	2001      	movs	r0, #1
 80003fe:	f001 f9af 	bl	8001760 <setTimer>
			}
			if(isTimerExpired(2)==1){
 8000402:	2002      	movs	r0, #2
 8000404:	f001 f9cc 	bl	80017a0 <isTimerExpired>
 8000408:	4603      	mov	r3, r0
 800040a:	2b01      	cmp	r3, #1
 800040c:	d106      	bne.n	800041c <fsm_automatic_run+0x168>
							led7_segment_run13();
 800040e:	f000 fea1 	bl	8001154 <led7_segment_run13>
							setTimer(2, 1000);
 8000412:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000416:	2002      	movs	r0, #2
 8000418:	f001 f9a2 	bl	8001760 <setTimer>
			}
			if(isTimerExpired(0)==1){
 800041c:	2000      	movs	r0, #0
 800041e:	f001 f9bf 	bl	80017a0 <isTimerExpired>
 8000422:	4603      	mov	r3, r0
 8000424:	2b01      	cmp	r3, #1
 8000426:	d10c      	bne.n	8000442 <fsm_automatic_run+0x18e>
				status=AUTO_GREEN1_RED2;
 8000428:	4b76      	ldr	r3, [pc, #472]	; (8000604 <fsm_automatic_run+0x350>)
 800042a:	2204      	movs	r2, #4
 800042c:	601a      	str	r2, [r3, #0]
				setTimer(0, b*1000);
 800042e:	4b76      	ldr	r3, [pc, #472]	; (8000608 <fsm_automatic_run+0x354>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000436:	fb02 f303 	mul.w	r3, r2, r3
 800043a:	4619      	mov	r1, r3
 800043c:	2000      	movs	r0, #0
 800043e:	f001 f98f 	bl	8001760 <setTimer>
	              // counter=0;
	              // setTimer(1, 500);
	             //  setTimer(2, 1000);
			}
			if(isButtonPressed(0)==1){
 8000442:	2000      	movs	r0, #0
 8000444:	f7ff fe82 	bl	800014c <isButtonPressed>
 8000448:	4603      	mov	r3, r0
 800044a:	2b01      	cmp	r3, #1
 800044c:	f040 80e8 	bne.w	8000620 <fsm_automatic_run+0x36c>
				status=MAN_RED;
 8000450:	4b6c      	ldr	r3, [pc, #432]	; (8000604 <fsm_automatic_run+0x350>)
 8000452:	220c      	movs	r2, #12
 8000454:	601a      	str	r2, [r3, #0]
				setTimer(1, 500);
 8000456:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800045a:	2001      	movs	r0, #1
 800045c:	f001 f980 	bl	8001760 <setTimer>
				setTimer(2, 1000);
 8000460:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000464:	2002      	movs	r0, #2
 8000466:	f001 f97b 	bl	8001760 <setTimer>
				setTimer(3, 500);
 800046a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800046e:	2003      	movs	r0, #3
 8000470:	f001 f976 	bl	8001760 <setTimer>
				setTimer(5, 10000);
 8000474:	f242 7110 	movw	r1, #10000	; 0x2710
 8000478:	2005      	movs	r0, #5
 800047a:	f001 f971 	bl	8001760 <setTimer>
				checkstatus=5;
 800047e:	4b65      	ldr	r3, [pc, #404]	; (8000614 <fsm_automatic_run+0x360>)
 8000480:	2205      	movs	r2, #5
 8000482:	601a      	str	r2, [r3, #0]
				check=0;
 8000484:	4b64      	ldr	r3, [pc, #400]	; (8000618 <fsm_automatic_run+0x364>)
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
			}
			break;
 800048a:	e0c9      	b.n	8000620 <fsm_automatic_run+0x36c>
		case AUTO_GREEN1_RED2:
			LED_GREEN1_RED2();
 800048c:	f001 faf6 	bl	8001a7c <LED_GREEN1_RED2>
			if(counter==0){
 8000490:	4b5e      	ldr	r3, [pc, #376]	; (800060c <fsm_automatic_run+0x358>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d104      	bne.n	80004a2 <fsm_automatic_run+0x1ee>
			led7_segment_run13();
 8000498:	f000 fe5c 	bl	8001154 <led7_segment_run13>
			counter=1;
 800049c:	4b5b      	ldr	r3, [pc, #364]	; (800060c <fsm_automatic_run+0x358>)
 800049e:	2201      	movs	r2, #1
 80004a0:	601a      	str	r2, [r3, #0]
			}
			if(isTimerExpired(1)==1){
 80004a2:	2001      	movs	r0, #1
 80004a4:	f001 f97c 	bl	80017a0 <isTimerExpired>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d106      	bne.n	80004bc <fsm_automatic_run+0x208>
				led7_segment_run02();
 80004ae:	f000 fe2d 	bl	800110c <led7_segment_run02>
				setTimer(1, 443);
 80004b2:	f240 11bb 	movw	r1, #443	; 0x1bb
 80004b6:	2001      	movs	r0, #1
 80004b8:	f001 f952 	bl	8001760 <setTimer>
			}
			if(isTimerExpired(2)==1){
 80004bc:	2002      	movs	r0, #2
 80004be:	f001 f96f 	bl	80017a0 <isTimerExpired>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d106      	bne.n	80004d6 <fsm_automatic_run+0x222>
							led7_segment_run13();
 80004c8:	f000 fe44 	bl	8001154 <led7_segment_run13>
							setTimer(2, 1000);
 80004cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004d0:	2002      	movs	r0, #2
 80004d2:	f001 f945 	bl	8001760 <setTimer>
			}
			if(isTimerExpired(0)==1){
 80004d6:	2000      	movs	r0, #0
 80004d8:	f001 f962 	bl	80017a0 <isTimerExpired>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d10c      	bne.n	80004fc <fsm_automatic_run+0x248>
				status=AUTO_YELLOW1_RED2;
 80004e2:	4b48      	ldr	r3, [pc, #288]	; (8000604 <fsm_automatic_run+0x350>)
 80004e4:	2205      	movs	r2, #5
 80004e6:	601a      	str	r2, [r3, #0]
				setTimer(0, c*1000);
 80004e8:	4b49      	ldr	r3, [pc, #292]	; (8000610 <fsm_automatic_run+0x35c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004f0:	fb02 f303 	mul.w	r3, r2, r3
 80004f4:	4619      	mov	r1, r3
 80004f6:	2000      	movs	r0, #0
 80004f8:	f001 f932 	bl	8001760 <setTimer>
	              // setTimer(1, 500);
	             // setTimer(2, 1000);
	             //  counter=0;
			}
			if(isButtonPressed(0)==1){
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fe25 	bl	800014c <isButtonPressed>
 8000502:	4603      	mov	r3, r0
 8000504:	2b01      	cmp	r3, #1
 8000506:	f040 808d 	bne.w	8000624 <fsm_automatic_run+0x370>
				status=MAN_RED;
 800050a:	4b3e      	ldr	r3, [pc, #248]	; (8000604 <fsm_automatic_run+0x350>)
 800050c:	220c      	movs	r2, #12
 800050e:	601a      	str	r2, [r3, #0]
				setTimer(1, 500);
 8000510:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000514:	2001      	movs	r0, #1
 8000516:	f001 f923 	bl	8001760 <setTimer>
				setTimer(2, 1000);
 800051a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800051e:	2002      	movs	r0, #2
 8000520:	f001 f91e 	bl	8001760 <setTimer>
				setTimer(3, 500);
 8000524:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000528:	2003      	movs	r0, #3
 800052a:	f001 f919 	bl	8001760 <setTimer>
				setTimer(6, 10000);
 800052e:	f242 7110 	movw	r1, #10000	; 0x2710
 8000532:	2006      	movs	r0, #6
 8000534:	f001 f914 	bl	8001760 <setTimer>
				checkstatus=6;
 8000538:	4b36      	ldr	r3, [pc, #216]	; (8000614 <fsm_automatic_run+0x360>)
 800053a:	2206      	movs	r2, #6
 800053c:	601a      	str	r2, [r3, #0]
				check=0;
 800053e:	4b36      	ldr	r3, [pc, #216]	; (8000618 <fsm_automatic_run+0x364>)
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
			}
			break;
 8000544:	e06e      	b.n	8000624 <fsm_automatic_run+0x370>
		case AUTO_YELLOW1_RED2:
			LED_YELLOW1_RED2();
 8000546:	f001 fabd 	bl	8001ac4 <LED_YELLOW1_RED2>
			if(counter==0){
 800054a:	4b30      	ldr	r3, [pc, #192]	; (800060c <fsm_automatic_run+0x358>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d104      	bne.n	800055c <fsm_automatic_run+0x2a8>
			led7_segment_run13();
 8000552:	f000 fdff 	bl	8001154 <led7_segment_run13>
			counter=1;
 8000556:	4b2d      	ldr	r3, [pc, #180]	; (800060c <fsm_automatic_run+0x358>)
 8000558:	2201      	movs	r2, #1
 800055a:	601a      	str	r2, [r3, #0]
			}
			if(isTimerExpired(1)==1){
 800055c:	2001      	movs	r0, #1
 800055e:	f001 f91f 	bl	80017a0 <isTimerExpired>
 8000562:	4603      	mov	r3, r0
 8000564:	2b01      	cmp	r3, #1
 8000566:	d106      	bne.n	8000576 <fsm_automatic_run+0x2c2>
				led7_segment_run02();
 8000568:	f000 fdd0 	bl	800110c <led7_segment_run02>
				setTimer(1, 443);
 800056c:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000570:	2001      	movs	r0, #1
 8000572:	f001 f8f5 	bl	8001760 <setTimer>
			}
			if(isTimerExpired(2)==1){
 8000576:	2002      	movs	r0, #2
 8000578:	f001 f912 	bl	80017a0 <isTimerExpired>
 800057c:	4603      	mov	r3, r0
 800057e:	2b01      	cmp	r3, #1
 8000580:	d106      	bne.n	8000590 <fsm_automatic_run+0x2dc>
							led7_segment_run13();
 8000582:	f000 fde7 	bl	8001154 <led7_segment_run13>
							setTimer(2, 1000);
 8000586:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800058a:	2002      	movs	r0, #2
 800058c:	f001 f8e8 	bl	8001760 <setTimer>
			}
			if(isTimerExpired(0)==1){
 8000590:	2000      	movs	r0, #0
 8000592:	f001 f905 	bl	80017a0 <isTimerExpired>
 8000596:	4603      	mov	r3, r0
 8000598:	2b01      	cmp	r3, #1
 800059a:	d10c      	bne.n	80005b6 <fsm_automatic_run+0x302>
				status=AUTO_RED1_GREEN2;
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <fsm_automatic_run+0x350>)
 800059e:	2202      	movs	r2, #2
 80005a0:	601a      	str	r2, [r3, #0]
				setTimer(0, b*1000);
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <fsm_automatic_run+0x354>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005aa:	fb02 f303 	mul.w	r3, r2, r3
 80005ae:	4619      	mov	r1, r3
 80005b0:	2000      	movs	r0, #0
 80005b2:	f001 f8d5 	bl	8001760 <setTimer>
	             //  setTimer(1, 500);
	             //  setTimer(2, 1000);
	            //   setTimer(1, 500);
	            //   setTimer(2, 1000);
			}
			if(isButtonPressed(0)==1){
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff fdc8 	bl	800014c <isButtonPressed>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d132      	bne.n	8000628 <fsm_automatic_run+0x374>
				status=MAN_RED;
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <fsm_automatic_run+0x350>)
 80005c4:	220c      	movs	r2, #12
 80005c6:	601a      	str	r2, [r3, #0]
				setTimer(1, 443);
 80005c8:	f240 11bb 	movw	r1, #443	; 0x1bb
 80005cc:	2001      	movs	r0, #1
 80005ce:	f001 f8c7 	bl	8001760 <setTimer>
				setTimer(2, 1000);
 80005d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005d6:	2002      	movs	r0, #2
 80005d8:	f001 f8c2 	bl	8001760 <setTimer>
				setTimer(3, 500);
 80005dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005e0:	2003      	movs	r0, #3
 80005e2:	f001 f8bd 	bl	8001760 <setTimer>
				setTimer(7, 10000);
 80005e6:	f242 7110 	movw	r1, #10000	; 0x2710
 80005ea:	2007      	movs	r0, #7
 80005ec:	f001 f8b8 	bl	8001760 <setTimer>
				checkstatus=7;
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <fsm_automatic_run+0x360>)
 80005f2:	2207      	movs	r2, #7
 80005f4:	601a      	str	r2, [r3, #0]
				check=0;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <fsm_automatic_run+0x364>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
			}
			break;
 80005fc:	e014      	b.n	8000628 <fsm_automatic_run+0x374>
		default:
			break;
 80005fe:	bf00      	nop
 8000600:	e013      	b.n	800062a <fsm_automatic_run+0x376>
 8000602:	bf00      	nop
 8000604:	200000ac 	.word	0x200000ac
 8000608:	20000060 	.word	0x20000060
 800060c:	2000009c 	.word	0x2000009c
 8000610:	20000064 	.word	0x20000064
 8000614:	200000a0 	.word	0x200000a0
 8000618:	200000a4 	.word	0x200000a4
			break;
 800061c:	bf00      	nop
 800061e:	e004      	b.n	800062a <fsm_automatic_run+0x376>
			break;
 8000620:	bf00      	nop
 8000622:	e002      	b.n	800062a <fsm_automatic_run+0x376>
			break;
 8000624:	bf00      	nop
 8000626:	e000      	b.n	800062a <fsm_automatic_run+0x376>
			break;
 8000628:	bf00      	nop
	}
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop

08000630 <fsm_manual_run>:
 */
#include "fsm_manual.h"
#include "global.h"

//int check=0;
void fsm_manual_run(){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	switch(status){
 8000634:	4ba4      	ldr	r3, [pc, #656]	; (80008c8 <fsm_manual_run+0x298>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b0e      	cmp	r3, #14
 800063a:	f000 81a1 	beq.w	8000980 <fsm_manual_run+0x350>
 800063e:	2b0e      	cmp	r3, #14
 8000640:	f300 81c0 	bgt.w	80009c4 <fsm_manual_run+0x394>
 8000644:	2b0c      	cmp	r3, #12
 8000646:	d003      	beq.n	8000650 <fsm_manual_run+0x20>
 8000648:	2b0d      	cmp	r3, #13
 800064a:	f000 8153 	beq.w	80008f4 <fsm_manual_run+0x2c4>
//            counter=0;
			status=INIT;
		}
		break;
	default:
		break;
 800064e:	e1b9      	b.n	80009c4 <fsm_manual_run+0x394>
		if(check==0){
 8000650:	4b9e      	ldr	r3, [pc, #632]	; (80008cc <fsm_manual_run+0x29c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d106      	bne.n	8000666 <fsm_manual_run+0x36>
			Turn_On_All_LED_RED();
 8000658:	f001 f986 	bl	8001968 <Turn_On_All_LED_RED>
			Save_led7RED_segment_run13();
 800065c:	f000 fea4 	bl	80013a8 <Save_led7RED_segment_run13>
			check=1;
 8000660:	4b9a      	ldr	r3, [pc, #616]	; (80008cc <fsm_manual_run+0x29c>)
 8000662:	2201      	movs	r2, #1
 8000664:	601a      	str	r2, [r3, #0]
		if(isTimerExpired(1)==1){
 8000666:	2001      	movs	r0, #1
 8000668:	f001 f89a 	bl	80017a0 <isTimerExpired>
 800066c:	4603      	mov	r3, r0
 800066e:	2b01      	cmp	r3, #1
 8000670:	d106      	bne.n	8000680 <fsm_manual_run+0x50>
			led7_segment_run02();
 8000672:	f000 fd4b 	bl	800110c <led7_segment_run02>
			setTimer(1, 443);
 8000676:	f240 11bb 	movw	r1, #443	; 0x1bb
 800067a:	2001      	movs	r0, #1
 800067c:	f001 f870 	bl	8001760 <setTimer>
		if(isTimerExpired(2)==1){
 8000680:	2002      	movs	r0, #2
 8000682:	f001 f88d 	bl	80017a0 <isTimerExpired>
 8000686:	4603      	mov	r3, r0
 8000688:	2b01      	cmp	r3, #1
 800068a:	d106      	bne.n	800069a <fsm_manual_run+0x6a>
			Save_led7RED_segment_run13();
 800068c:	f000 fe8c 	bl	80013a8 <Save_led7RED_segment_run13>
			setTimer(2, 1000);
 8000690:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000694:	2002      	movs	r0, #2
 8000696:	f001 f863 	bl	8001760 <setTimer>
		if(isTimerExpired(3)==1){
 800069a:	2003      	movs	r0, #3
 800069c:	f001 f880 	bl	80017a0 <isTimerExpired>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d108      	bne.n	80006b8 <fsm_manual_run+0x88>
			HAL_GPIO_TogglePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin);
 80006a6:	2112      	movs	r1, #18
 80006a8:	4889      	ldr	r0, [pc, #548]	; (80008d0 <fsm_manual_run+0x2a0>)
 80006aa:	f001 fd6e 	bl	800218a <HAL_GPIO_TogglePin>
			setTimer(3, 500);
 80006ae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006b2:	2003      	movs	r0, #3
 80006b4:	f001 f854 	bl	8001760 <setTimer>
		if(isTimerExpired(4)==1){
 80006b8:	2004      	movs	r0, #4
 80006ba:	f001 f871 	bl	80017a0 <isTimerExpired>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d123      	bne.n	800070c <fsm_manual_run+0xdc>
			status=AUTO_RED1_GREEN2;
 80006c4:	4b80      	ldr	r3, [pc, #512]	; (80008c8 <fsm_manual_run+0x298>)
 80006c6:	2202      	movs	r2, #2
 80006c8:	601a      	str	r2, [r3, #0]
			++countergreen13;
 80006ca:	4b82      	ldr	r3, [pc, #520]	; (80008d4 <fsm_manual_run+0x2a4>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	3301      	adds	r3, #1
 80006d0:	4a80      	ldr	r2, [pc, #512]	; (80008d4 <fsm_manual_run+0x2a4>)
 80006d2:	6013      	str	r3, [r2, #0]
			counter=0;
 80006d4:	4b80      	ldr	r3, [pc, #512]	; (80008d8 <fsm_manual_run+0x2a8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
            setTimer(1, 443);
 80006da:	f240 11bb 	movw	r1, #443	; 0x1bb
 80006de:	2001      	movs	r0, #1
 80006e0:	f001 f83e 	bl	8001760 <setTimer>
            setTimer(2, 1000);
 80006e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006e8:	2002      	movs	r0, #2
 80006ea:	f001 f839 	bl	8001760 <setTimer>
			--idx_led13;
 80006ee:	4b7b      	ldr	r3, [pc, #492]	; (80008dc <fsm_manual_run+0x2ac>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	4a79      	ldr	r2, [pc, #484]	; (80008dc <fsm_manual_run+0x2ac>)
 80006f6:	6013      	str	r3, [r2, #0]
			setTimer(0, countergreen13*1000);
 80006f8:	4b76      	ldr	r3, [pc, #472]	; (80008d4 <fsm_manual_run+0x2a4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000700:	fb02 f303 	mul.w	r3, r2, r3
 8000704:	4619      	mov	r1, r3
 8000706:	2000      	movs	r0, #0
 8000708:	f001 f82a 	bl	8001760 <setTimer>
		if(isTimerExpired(5)==1){
 800070c:	2005      	movs	r0, #5
 800070e:	f001 f847 	bl	80017a0 <isTimerExpired>
 8000712:	4603      	mov	r3, r0
 8000714:	2b01      	cmp	r3, #1
 8000716:	d130      	bne.n	800077a <fsm_manual_run+0x14a>
			status=AUTO_RED1_YELLOW2;
 8000718:	4b6b      	ldr	r3, [pc, #428]	; (80008c8 <fsm_manual_run+0x298>)
 800071a:	2203      	movs	r2, #3
 800071c:	601a      	str	r2, [r3, #0]
			if(counterred13!=a) {
 800071e:	4b70      	ldr	r3, [pc, #448]	; (80008e0 <fsm_manual_run+0x2b0>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	4b70      	ldr	r3, [pc, #448]	; (80008e4 <fsm_manual_run+0x2b4>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	429a      	cmp	r2, r3
 8000728:	d005      	beq.n	8000736 <fsm_manual_run+0x106>
				++counteryellow13;
 800072a:	4b6f      	ldr	r3, [pc, #444]	; (80008e8 <fsm_manual_run+0x2b8>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	4a6d      	ldr	r2, [pc, #436]	; (80008e8 <fsm_manual_run+0x2b8>)
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	e005      	b.n	8000742 <fsm_manual_run+0x112>
				counterred13=1;
 8000736:	4b6a      	ldr	r3, [pc, #424]	; (80008e0 <fsm_manual_run+0x2b0>)
 8000738:	2201      	movs	r2, #1
 800073a:	601a      	str	r2, [r3, #0]
				counteryellow13=1;
 800073c:	4b6a      	ldr	r3, [pc, #424]	; (80008e8 <fsm_manual_run+0x2b8>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]
			counter=0;
 8000742:	4b65      	ldr	r3, [pc, #404]	; (80008d8 <fsm_manual_run+0x2a8>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
            setTimer(1, 443);
 8000748:	f240 11bb 	movw	r1, #443	; 0x1bb
 800074c:	2001      	movs	r0, #1
 800074e:	f001 f807 	bl	8001760 <setTimer>
            setTimer(2, 1000);
 8000752:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000756:	2002      	movs	r0, #2
 8000758:	f001 f802 	bl	8001760 <setTimer>
			--idx_led13;
 800075c:	4b5f      	ldr	r3, [pc, #380]	; (80008dc <fsm_manual_run+0x2ac>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	3b01      	subs	r3, #1
 8000762:	4a5e      	ldr	r2, [pc, #376]	; (80008dc <fsm_manual_run+0x2ac>)
 8000764:	6013      	str	r3, [r2, #0]
			setTimer(0, counteryellow13*1000);
 8000766:	4b60      	ldr	r3, [pc, #384]	; (80008e8 <fsm_manual_run+0x2b8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	4619      	mov	r1, r3
 8000774:	2000      	movs	r0, #0
 8000776:	f000 fff3 	bl	8001760 <setTimer>
		if(isTimerExpired(6)==1){
 800077a:	2006      	movs	r0, #6
 800077c:	f001 f810 	bl	80017a0 <isTimerExpired>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d123      	bne.n	80007ce <fsm_manual_run+0x19e>
			status=AUTO_GREEN1_RED2;
 8000786:	4b50      	ldr	r3, [pc, #320]	; (80008c8 <fsm_manual_run+0x298>)
 8000788:	2204      	movs	r2, #4
 800078a:	601a      	str	r2, [r3, #0]
			++countergreen13;
 800078c:	4b51      	ldr	r3, [pc, #324]	; (80008d4 <fsm_manual_run+0x2a4>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	4a50      	ldr	r2, [pc, #320]	; (80008d4 <fsm_manual_run+0x2a4>)
 8000794:	6013      	str	r3, [r2, #0]
			--idx_led13;
 8000796:	4b51      	ldr	r3, [pc, #324]	; (80008dc <fsm_manual_run+0x2ac>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	3b01      	subs	r3, #1
 800079c:	4a4f      	ldr	r2, [pc, #316]	; (80008dc <fsm_manual_run+0x2ac>)
 800079e:	6013      	str	r3, [r2, #0]
			counter=0;
 80007a0:	4b4d      	ldr	r3, [pc, #308]	; (80008d8 <fsm_manual_run+0x2a8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
            setTimer(1, 443);
 80007a6:	f240 11bb 	movw	r1, #443	; 0x1bb
 80007aa:	2001      	movs	r0, #1
 80007ac:	f000 ffd8 	bl	8001760 <setTimer>
            setTimer(2, 1000);
 80007b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007b4:	2002      	movs	r0, #2
 80007b6:	f000 ffd3 	bl	8001760 <setTimer>
			setTimer(0, countergreen13*1000);
 80007ba:	4b46      	ldr	r3, [pc, #280]	; (80008d4 <fsm_manual_run+0x2a4>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007c2:	fb02 f303 	mul.w	r3, r2, r3
 80007c6:	4619      	mov	r1, r3
 80007c8:	2000      	movs	r0, #0
 80007ca:	f000 ffc9 	bl	8001760 <setTimer>
		if(isTimerExpired(7)==1){
 80007ce:	2007      	movs	r0, #7
 80007d0:	f000 ffe6 	bl	80017a0 <isTimerExpired>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d130      	bne.n	800083c <fsm_manual_run+0x20c>
			status=AUTO_YELLOW1_RED2;
 80007da:	4b3b      	ldr	r3, [pc, #236]	; (80008c8 <fsm_manual_run+0x298>)
 80007dc:	2205      	movs	r2, #5
 80007de:	601a      	str	r2, [r3, #0]
			if(counterred13!=a) {
 80007e0:	4b3f      	ldr	r3, [pc, #252]	; (80008e0 <fsm_manual_run+0x2b0>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b3f      	ldr	r3, [pc, #252]	; (80008e4 <fsm_manual_run+0x2b4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d005      	beq.n	80007f8 <fsm_manual_run+0x1c8>
				++counteryellow13;
 80007ec:	4b3e      	ldr	r3, [pc, #248]	; (80008e8 <fsm_manual_run+0x2b8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a3d      	ldr	r2, [pc, #244]	; (80008e8 <fsm_manual_run+0x2b8>)
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	e005      	b.n	8000804 <fsm_manual_run+0x1d4>
				counterred13=1;
 80007f8:	4b39      	ldr	r3, [pc, #228]	; (80008e0 <fsm_manual_run+0x2b0>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	601a      	str	r2, [r3, #0]
				counteryellow13=1;
 80007fe:	4b3a      	ldr	r3, [pc, #232]	; (80008e8 <fsm_manual_run+0x2b8>)
 8000800:	2201      	movs	r2, #1
 8000802:	601a      	str	r2, [r3, #0]
			--idx_led13;
 8000804:	4b35      	ldr	r3, [pc, #212]	; (80008dc <fsm_manual_run+0x2ac>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	3b01      	subs	r3, #1
 800080a:	4a34      	ldr	r2, [pc, #208]	; (80008dc <fsm_manual_run+0x2ac>)
 800080c:	6013      	str	r3, [r2, #0]
			counter=0;
 800080e:	4b32      	ldr	r3, [pc, #200]	; (80008d8 <fsm_manual_run+0x2a8>)
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
            setTimer(1, 443);
 8000814:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000818:	2001      	movs	r0, #1
 800081a:	f000 ffa1 	bl	8001760 <setTimer>
            setTimer(2, 1000);
 800081e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000822:	2002      	movs	r0, #2
 8000824:	f000 ff9c 	bl	8001760 <setTimer>
			setTimer(0, counteryellow13*1000);
 8000828:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <fsm_manual_run+0x2b8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000830:	fb02 f303 	mul.w	r3, r2, r3
 8000834:	4619      	mov	r1, r3
 8000836:	2000      	movs	r0, #0
 8000838:	f000 ff92 	bl	8001760 <setTimer>
		if(isButtonPressed(0)==1){
 800083c:	2000      	movs	r0, #0
 800083e:	f7ff fc85 	bl	800014c <isButtonPressed>
 8000842:	4603      	mov	r3, r0
 8000844:	2b01      	cmp	r3, #1
 8000846:	d119      	bne.n	800087c <fsm_manual_run+0x24c>
			status= MAN_GREEN;
 8000848:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <fsm_manual_run+0x298>)
 800084a:	220d      	movs	r2, #13
 800084c:	601a      	str	r2, [r3, #0]
			check=0;
 800084e:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <fsm_manual_run+0x29c>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
			setTimer(1, 443);
 8000854:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000858:	2001      	movs	r0, #1
 800085a:	f000 ff81 	bl	8001760 <setTimer>
			setTimer(2, 1000);
 800085e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000862:	2002      	movs	r0, #2
 8000864:	f000 ff7c 	bl	8001760 <setTimer>
			setTimer(3, 500);
 8000868:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800086c:	2003      	movs	r0, #3
 800086e:	f000 ff77 	bl	8001760 <setTimer>
			setTimer(4, 10000);
 8000872:	f242 7110 	movw	r1, #10000	; 0x2710
 8000876:	2004      	movs	r0, #4
 8000878:	f000 ff72 	bl	8001760 <setTimer>
		if(isButtonPressed(1)==1){
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff fc65 	bl	800014c <isButtonPressed>
 8000882:	4603      	mov	r3, r0
 8000884:	2b01      	cmp	r3, #1
 8000886:	d11b      	bne.n	80008c0 <fsm_manual_run+0x290>
			status=INCREASE_VALUE_LED_RED;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <fsm_manual_run+0x298>)
 800088a:	220f      	movs	r2, #15
 800088c:	601a      	str	r2, [r3, #0]
			setTimer(1, 443);
 800088e:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000892:	2001      	movs	r0, #1
 8000894:	f000 ff64 	bl	8001760 <setTimer>
			setTimer(2, 1000);
 8000898:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800089c:	2002      	movs	r0, #2
 800089e:	f000 ff5f 	bl	8001760 <setTimer>
			setTimer(3, 500);
 80008a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008a6:	2003      	movs	r0, #3
 80008a8:	f000 ff5a 	bl	8001760 <setTimer>
			setTimer(checkstatus, 10000);
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <fsm_manual_run+0x2bc>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f242 7110 	movw	r1, #10000	; 0x2710
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 ff53 	bl	8001760 <setTimer>
		    checksave=0;
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <fsm_manual_run+0x2c0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(2)==1){
 80008c0:	2002      	movs	r0, #2
 80008c2:	f7ff fc43 	bl	800014c <isButtonPressed>
		break;
 80008c6:	e082      	b.n	80009ce <fsm_manual_run+0x39e>
 80008c8:	200000ac 	.word	0x200000ac
 80008cc:	200000a4 	.word	0x200000a4
 80008d0:	40010800 	.word	0x40010800
 80008d4:	20000058 	.word	0x20000058
 80008d8:	2000009c 	.word	0x2000009c
 80008dc:	200000b0 	.word	0x200000b0
 80008e0:	20000050 	.word	0x20000050
 80008e4:	2000005c 	.word	0x2000005c
 80008e8:	20000054 	.word	0x20000054
 80008ec:	200000a0 	.word	0x200000a0
 80008f0:	200000a8 	.word	0x200000a8
		if(check==0){
 80008f4:	4b37      	ldr	r3, [pc, #220]	; (80009d4 <fsm_manual_run+0x3a4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d106      	bne.n	800090a <fsm_manual_run+0x2da>
			Turn_On_All_LED_GREEN();
 80008fc:	f001 f84a 	bl	8001994 <Turn_On_All_LED_GREEN>
			Save_led7GREEN_segment_run13();
 8000900:	f000 fdc2 	bl	8001488 <Save_led7GREEN_segment_run13>
			check=1;
 8000904:	4b33      	ldr	r3, [pc, #204]	; (80009d4 <fsm_manual_run+0x3a4>)
 8000906:	2201      	movs	r2, #1
 8000908:	601a      	str	r2, [r3, #0]
		if(isTimerExpired(1)==1){
 800090a:	2001      	movs	r0, #1
 800090c:	f000 ff48 	bl	80017a0 <isTimerExpired>
 8000910:	4603      	mov	r3, r0
 8000912:	2b01      	cmp	r3, #1
 8000914:	d106      	bne.n	8000924 <fsm_manual_run+0x2f4>
			led7_segment_run02();
 8000916:	f000 fbf9 	bl	800110c <led7_segment_run02>
			setTimer(1, 443);
 800091a:	f240 11bb 	movw	r1, #443	; 0x1bb
 800091e:	2001      	movs	r0, #1
 8000920:	f000 ff1e 	bl	8001760 <setTimer>
		if(isTimerExpired(2)==1){
 8000924:	2002      	movs	r0, #2
 8000926:	f000 ff3b 	bl	80017a0 <isTimerExpired>
 800092a:	4603      	mov	r3, r0
 800092c:	2b01      	cmp	r3, #1
 800092e:	d106      	bne.n	800093e <fsm_manual_run+0x30e>
			Save_led7GREEN_segment_run13();
 8000930:	f000 fdaa 	bl	8001488 <Save_led7GREEN_segment_run13>
			setTimer(2, 1000);
 8000934:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000938:	2002      	movs	r0, #2
 800093a:	f000 ff11 	bl	8001760 <setTimer>
		if(isTimerExpired(3)==1){
 800093e:	2003      	movs	r0, #3
 8000940:	f000 ff2e 	bl	80017a0 <isTimerExpired>
 8000944:	4603      	mov	r3, r0
 8000946:	2b01      	cmp	r3, #1
 8000948:	d108      	bne.n	800095c <fsm_manual_run+0x32c>
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin);
 800094a:	2144      	movs	r1, #68	; 0x44
 800094c:	4822      	ldr	r0, [pc, #136]	; (80009d8 <fsm_manual_run+0x3a8>)
 800094e:	f001 fc1c 	bl	800218a <HAL_GPIO_TogglePin>
			setTimer(3, 500);
 8000952:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000956:	2003      	movs	r0, #3
 8000958:	f000 ff02 	bl	8001760 <setTimer>
		if(isButtonPressed(0)==1){
 800095c:	2000      	movs	r0, #0
 800095e:	f7ff fbf5 	bl	800014c <isButtonPressed>
 8000962:	4603      	mov	r3, r0
 8000964:	2b01      	cmp	r3, #1
 8000966:	d12f      	bne.n	80009c8 <fsm_manual_run+0x398>
			status= MAN_YELLOW;
 8000968:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <fsm_manual_run+0x3ac>)
 800096a:	220e      	movs	r2, #14
 800096c:	601a      	str	r2, [r3, #0]
			check=0;
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <fsm_manual_run+0x3a4>)
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
			setTimer(3, 500);
 8000974:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000978:	2003      	movs	r0, #3
 800097a:	f000 fef1 	bl	8001760 <setTimer>
		break;
 800097e:	e023      	b.n	80009c8 <fsm_manual_run+0x398>
		if(check==0){
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <fsm_manual_run+0x3a4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d104      	bne.n	8000992 <fsm_manual_run+0x362>
			Turn_On_All_LED_YELLOW();
 8000988:	f001 f81a 	bl	80019c0 <Turn_On_All_LED_YELLOW>
			check=1;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <fsm_manual_run+0x3a4>)
 800098e:	2201      	movs	r2, #1
 8000990:	601a      	str	r2, [r3, #0]
		if(isTimerExpired(3)==1){
 8000992:	2003      	movs	r0, #3
 8000994:	f000 ff04 	bl	80017a0 <isTimerExpired>
 8000998:	4603      	mov	r3, r0
 800099a:	2b01      	cmp	r3, #1
 800099c:	d108      	bne.n	80009b0 <fsm_manual_run+0x380>
			HAL_GPIO_TogglePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin);
 800099e:	2188      	movs	r1, #136	; 0x88
 80009a0:	480d      	ldr	r0, [pc, #52]	; (80009d8 <fsm_manual_run+0x3a8>)
 80009a2:	f001 fbf2 	bl	800218a <HAL_GPIO_TogglePin>
			setTimer(3, 500);
 80009a6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009aa:	2003      	movs	r0, #3
 80009ac:	f000 fed8 	bl	8001760 <setTimer>
		if(isButtonPressed(0)==1){
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff fbcb 	bl	800014c <isButtonPressed>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d107      	bne.n	80009cc <fsm_manual_run+0x39c>
			status=INIT;
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <fsm_manual_run+0x3ac>)
 80009be:	2201      	movs	r2, #1
 80009c0:	601a      	str	r2, [r3, #0]
		break;
 80009c2:	e003      	b.n	80009cc <fsm_manual_run+0x39c>
		break;
 80009c4:	bf00      	nop
 80009c6:	e002      	b.n	80009ce <fsm_manual_run+0x39e>
		break;
 80009c8:	bf00      	nop
 80009ca:	e000      	b.n	80009ce <fsm_manual_run+0x39e>
		break;
 80009cc:	bf00      	nop
	}
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000a4 	.word	0x200000a4
 80009d8:	40010800 	.word	0x40010800
 80009dc:	200000ac 	.word	0x200000ac

080009e0 <fsm_setting_run>:
 *      Author: ADMIN
 */
#include "fsm_setting.h"

//int checksave=0;
void fsm_setting_run(){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
      switch(status){
 80009e4:	4b81      	ldr	r3, [pc, #516]	; (8000bec <fsm_setting_run+0x20c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d003      	beq.n	80009f4 <fsm_setting_run+0x14>
 80009ec:	2b10      	cmp	r3, #16
 80009ee:	f000 817c 	beq.w	8000cea <fsm_setting_run+0x30a>
					setTimer(3, 500);
					setTimer(checkstatus, 10000);
				}
			  break;
		  default:
			  break;
 80009f2:	e23e      	b.n	8000e72 <fsm_setting_run+0x492>
				if(checksave==0){
 80009f4:	4b7e      	ldr	r3, [pc, #504]	; (8000bf0 <fsm_setting_run+0x210>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d106      	bne.n	8000a0a <fsm_setting_run+0x2a>
					Increase_Save_led7RED_segment_run13();
 80009fc:	f000 fd18 	bl	8001430 <Increase_Save_led7RED_segment_run13>
					++checksave;
 8000a00:	4b7b      	ldr	r3, [pc, #492]	; (8000bf0 <fsm_setting_run+0x210>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	3301      	adds	r3, #1
 8000a06:	4a7a      	ldr	r2, [pc, #488]	; (8000bf0 <fsm_setting_run+0x210>)
 8000a08:	6013      	str	r3, [r2, #0]
				if(isTimerExpired(1)==1){
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f000 fec8 	bl	80017a0 <isTimerExpired>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d106      	bne.n	8000a24 <fsm_setting_run+0x44>
					led7_segment_run02();
 8000a16:	f000 fb79 	bl	800110c <led7_segment_run02>
					setTimer(1, 400);
 8000a1a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f000 fe9e 	bl	8001760 <setTimer>
				if(isTimerExpired(2)==1){
 8000a24:	2002      	movs	r0, #2
 8000a26:	f000 febb 	bl	80017a0 <isTimerExpired>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d106      	bne.n	8000a3e <fsm_setting_run+0x5e>
					Save_led7RED_segment_run13();
 8000a30:	f000 fcba 	bl	80013a8 <Save_led7RED_segment_run13>
					setTimer(2, 1000);
 8000a34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a38:	2002      	movs	r0, #2
 8000a3a:	f000 fe91 	bl	8001760 <setTimer>
				if(isTimerExpired(3)==1){
 8000a3e:	2003      	movs	r0, #3
 8000a40:	f000 feae 	bl	80017a0 <isTimerExpired>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d108      	bne.n	8000a5c <fsm_setting_run+0x7c>
					HAL_GPIO_TogglePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin);
 8000a4a:	2112      	movs	r1, #18
 8000a4c:	4869      	ldr	r0, [pc, #420]	; (8000bf4 <fsm_setting_run+0x214>)
 8000a4e:	f001 fb9c 	bl	800218a <HAL_GPIO_TogglePin>
					setTimer(3, 500);
 8000a52:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a56:	2003      	movs	r0, #3
 8000a58:	f000 fe82 	bl	8001760 <setTimer>
				if(isTimerExpired(4)==1){
 8000a5c:	2004      	movs	r0, #4
 8000a5e:	f000 fe9f 	bl	80017a0 <isTimerExpired>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d12d      	bne.n	8000ac4 <fsm_setting_run+0xe4>
					status=AUTO_RED1_GREEN2;
 8000a68:	4b60      	ldr	r3, [pc, #384]	; (8000bec <fsm_setting_run+0x20c>)
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	601a      	str	r2, [r3, #0]
					counter=0;
 8000a6e:	4b62      	ldr	r3, [pc, #392]	; (8000bf8 <fsm_setting_run+0x218>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
					++countergreen13;
 8000a74:	4b61      	ldr	r3, [pc, #388]	; (8000bfc <fsm_setting_run+0x21c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	4a60      	ldr	r2, [pc, #384]	; (8000bfc <fsm_setting_run+0x21c>)
 8000a7c:	6013      	str	r3, [r2, #0]
					counterred13=savecounterred13-checksave;
 8000a7e:	4b60      	ldr	r3, [pc, #384]	; (8000c00 <fsm_setting_run+0x220>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	4b5b      	ldr	r3, [pc, #364]	; (8000bf0 <fsm_setting_run+0x210>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	4a5e      	ldr	r2, [pc, #376]	; (8000c04 <fsm_setting_run+0x224>)
 8000a8a:	6013      	str	r3, [r2, #0]
					checksave=0;
 8000a8c:	4b58      	ldr	r3, [pc, #352]	; (8000bf0 <fsm_setting_run+0x210>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
					--idx_led13;
 8000a92:	4b5d      	ldr	r3, [pc, #372]	; (8000c08 <fsm_setting_run+0x228>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	4a5b      	ldr	r2, [pc, #364]	; (8000c08 <fsm_setting_run+0x228>)
 8000a9a:	6013      	str	r3, [r2, #0]
					setTimer(0, countergreen13*1000);
 8000a9c:	4b57      	ldr	r3, [pc, #348]	; (8000bfc <fsm_setting_run+0x21c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aa4:	fb02 f303 	mul.w	r3, r2, r3
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f000 fe58 	bl	8001760 <setTimer>
		               setTimer(1, 443);
 8000ab0:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f000 fe53 	bl	8001760 <setTimer>
		               setTimer(2, 1000);
 8000aba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000abe:	2002      	movs	r0, #2
 8000ac0:	f000 fe4e 	bl	8001760 <setTimer>
				if(isTimerExpired(5)==1){
 8000ac4:	2005      	movs	r0, #5
 8000ac6:	f000 fe6b 	bl	80017a0 <isTimerExpired>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d13a      	bne.n	8000b46 <fsm_setting_run+0x166>
					status=AUTO_RED1_YELLOW2;
 8000ad0:	4b46      	ldr	r3, [pc, #280]	; (8000bec <fsm_setting_run+0x20c>)
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	601a      	str	r2, [r3, #0]
					counter=0;
 8000ad6:	4b48      	ldr	r3, [pc, #288]	; (8000bf8 <fsm_setting_run+0x218>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
					if(counterred13!=a) {
 8000adc:	4b49      	ldr	r3, [pc, #292]	; (8000c04 <fsm_setting_run+0x224>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b4a      	ldr	r3, [pc, #296]	; (8000c0c <fsm_setting_run+0x22c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d00c      	beq.n	8000b02 <fsm_setting_run+0x122>
						++counteryellow13;
 8000ae8:	4b49      	ldr	r3, [pc, #292]	; (8000c10 <fsm_setting_run+0x230>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	4a48      	ldr	r2, [pc, #288]	; (8000c10 <fsm_setting_run+0x230>)
 8000af0:	6013      	str	r3, [r2, #0]
						counterred13=savecounterred13-checksave;
 8000af2:	4b43      	ldr	r3, [pc, #268]	; (8000c00 <fsm_setting_run+0x220>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	4b3e      	ldr	r3, [pc, #248]	; (8000bf0 <fsm_setting_run+0x210>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	4a41      	ldr	r2, [pc, #260]	; (8000c04 <fsm_setting_run+0x224>)
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	e005      	b.n	8000b0e <fsm_setting_run+0x12e>
						counterred13=1;
 8000b02:	4b40      	ldr	r3, [pc, #256]	; (8000c04 <fsm_setting_run+0x224>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	601a      	str	r2, [r3, #0]
						counteryellow13=1;
 8000b08:	4b41      	ldr	r3, [pc, #260]	; (8000c10 <fsm_setting_run+0x230>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	601a      	str	r2, [r3, #0]
					checksave=0;
 8000b0e:	4b38      	ldr	r3, [pc, #224]	; (8000bf0 <fsm_setting_run+0x210>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
					--idx_led13;
 8000b14:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <fsm_setting_run+0x228>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	4a3b      	ldr	r2, [pc, #236]	; (8000c08 <fsm_setting_run+0x228>)
 8000b1c:	6013      	str	r3, [r2, #0]
					setTimer(0, counteryellow13*1000);
 8000b1e:	4b3c      	ldr	r3, [pc, #240]	; (8000c10 <fsm_setting_run+0x230>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b26:	fb02 f303 	mul.w	r3, r2, r3
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f000 fe17 	bl	8001760 <setTimer>
		               setTimer(1, 443);
 8000b32:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000b36:	2001      	movs	r0, #1
 8000b38:	f000 fe12 	bl	8001760 <setTimer>
		               setTimer(2, 1000);
 8000b3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b40:	2002      	movs	r0, #2
 8000b42:	f000 fe0d 	bl	8001760 <setTimer>
				if(isTimerExpired(6)==1){
 8000b46:	2006      	movs	r0, #6
 8000b48:	f000 fe2a 	bl	80017a0 <isTimerExpired>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d12d      	bne.n	8000bae <fsm_setting_run+0x1ce>
					status=AUTO_GREEN1_RED2;
 8000b52:	4b26      	ldr	r3, [pc, #152]	; (8000bec <fsm_setting_run+0x20c>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	601a      	str	r2, [r3, #0]
					counter=0;
 8000b58:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <fsm_setting_run+0x218>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
					++countergreen13;
 8000b5e:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <fsm_setting_run+0x21c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	3301      	adds	r3, #1
 8000b64:	4a25      	ldr	r2, [pc, #148]	; (8000bfc <fsm_setting_run+0x21c>)
 8000b66:	6013      	str	r3, [r2, #0]
					counterred13=savecounterred13-checksave;
 8000b68:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <fsm_setting_run+0x220>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <fsm_setting_run+0x210>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	4a24      	ldr	r2, [pc, #144]	; (8000c04 <fsm_setting_run+0x224>)
 8000b74:	6013      	str	r3, [r2, #0]
					checksave=0;
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <fsm_setting_run+0x210>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
					--idx_led13;
 8000b7c:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <fsm_setting_run+0x228>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3b01      	subs	r3, #1
 8000b82:	4a21      	ldr	r2, [pc, #132]	; (8000c08 <fsm_setting_run+0x228>)
 8000b84:	6013      	str	r3, [r2, #0]
					setTimer(0, countergreen13*1000);
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <fsm_setting_run+0x21c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	4619      	mov	r1, r3
 8000b94:	2000      	movs	r0, #0
 8000b96:	f000 fde3 	bl	8001760 <setTimer>
		               setTimer(1, 443);
 8000b9a:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	f000 fdde 	bl	8001760 <setTimer>
		               setTimer(2, 1000);
 8000ba4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ba8:	2002      	movs	r0, #2
 8000baa:	f000 fdd9 	bl	8001760 <setTimer>
				if(isTimerExpired(7)==1){
 8000bae:	2007      	movs	r0, #7
 8000bb0:	f000 fdf6 	bl	80017a0 <isTimerExpired>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d14e      	bne.n	8000c58 <fsm_setting_run+0x278>
					status=AUTO_YELLOW1_RED2;
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <fsm_setting_run+0x20c>)
 8000bbc:	2205      	movs	r2, #5
 8000bbe:	601a      	str	r2, [r3, #0]
					counter=0;
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <fsm_setting_run+0x218>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
					if(counterred13!=a) {
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <fsm_setting_run+0x224>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <fsm_setting_run+0x22c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d020      	beq.n	8000c14 <fsm_setting_run+0x234>
						++counteryellow13;
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <fsm_setting_run+0x230>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <fsm_setting_run+0x230>)
 8000bda:	6013      	str	r3, [r2, #0]
						counterred13=savecounterred13-checksave;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <fsm_setting_run+0x220>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <fsm_setting_run+0x210>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <fsm_setting_run+0x224>)
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	e019      	b.n	8000c20 <fsm_setting_run+0x240>
 8000bec:	200000ac 	.word	0x200000ac
 8000bf0:	200000a8 	.word	0x200000a8
 8000bf4:	40010800 	.word	0x40010800
 8000bf8:	2000009c 	.word	0x2000009c
 8000bfc:	20000058 	.word	0x20000058
 8000c00:	200000c0 	.word	0x200000c0
 8000c04:	20000050 	.word	0x20000050
 8000c08:	200000b0 	.word	0x200000b0
 8000c0c:	2000005c 	.word	0x2000005c
 8000c10:	20000054 	.word	0x20000054
						counterred13=1;
 8000c14:	4b98      	ldr	r3, [pc, #608]	; (8000e78 <fsm_setting_run+0x498>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	601a      	str	r2, [r3, #0]
						counteryellow13=1;
 8000c1a:	4b98      	ldr	r3, [pc, #608]	; (8000e7c <fsm_setting_run+0x49c>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
					checksave=0;
 8000c20:	4b97      	ldr	r3, [pc, #604]	; (8000e80 <fsm_setting_run+0x4a0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
					--idx_led13;
 8000c26:	4b97      	ldr	r3, [pc, #604]	; (8000e84 <fsm_setting_run+0x4a4>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	4a95      	ldr	r2, [pc, #596]	; (8000e84 <fsm_setting_run+0x4a4>)
 8000c2e:	6013      	str	r3, [r2, #0]
					setTimer(0, counteryellow13*1000);
 8000c30:	4b92      	ldr	r3, [pc, #584]	; (8000e7c <fsm_setting_run+0x49c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c38:	fb02 f303 	mul.w	r3, r2, r3
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f000 fd8e 	bl	8001760 <setTimer>
		               setTimer(1, 443);
 8000c44:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f000 fd89 	bl	8001760 <setTimer>
		               setTimer(2, 1000);
 8000c4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c52:	2002      	movs	r0, #2
 8000c54:	f000 fd84 	bl	8001760 <setTimer>
				if(isButtonPressed(0)==1){
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff fa77 	bl	800014c <isButtonPressed>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d119      	bne.n	8000c98 <fsm_setting_run+0x2b8>
					status= MAN_GREEN;
 8000c64:	4b88      	ldr	r3, [pc, #544]	; (8000e88 <fsm_setting_run+0x4a8>)
 8000c66:	220d      	movs	r2, #13
 8000c68:	601a      	str	r2, [r3, #0]
					check=0;
 8000c6a:	4b88      	ldr	r3, [pc, #544]	; (8000e8c <fsm_setting_run+0x4ac>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
					setTimer(1, 400);
 8000c70:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000c74:	2001      	movs	r0, #1
 8000c76:	f000 fd73 	bl	8001760 <setTimer>
					setTimer(2, 1000);
 8000c7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c7e:	2002      	movs	r0, #2
 8000c80:	f000 fd6e 	bl	8001760 <setTimer>
					setTimer(3, 500);
 8000c84:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 fd69 	bl	8001760 <setTimer>
					setTimer(4, 10000);
 8000c8e:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c92:	2004      	movs	r0, #4
 8000c94:	f000 fd64 	bl	8001760 <setTimer>
				if(isButtonPressed(1)==1){
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff fa57 	bl	800014c <isButtonPressed>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d10d      	bne.n	8000cc0 <fsm_setting_run+0x2e0>
					++checksave;
 8000ca4:	4b76      	ldr	r3, [pc, #472]	; (8000e80 <fsm_setting_run+0x4a0>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	4a75      	ldr	r2, [pc, #468]	; (8000e80 <fsm_setting_run+0x4a0>)
 8000cac:	6013      	str	r3, [r2, #0]
				    Increase_Save_led7RED_segment_run13();
 8000cae:	f000 fbbf 	bl	8001430 <Increase_Save_led7RED_segment_run13>
				    setTimer(checkstatus, 10000);
 8000cb2:	4b77      	ldr	r3, [pc, #476]	; (8000e90 <fsm_setting_run+0x4b0>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f242 7110 	movw	r1, #10000	; 0x2710
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 fd50 	bl	8001760 <setTimer>
				if(isButtonPressed(2)==1){
 8000cc0:	2002      	movs	r0, #2
 8000cc2:	f7ff fa43 	bl	800014c <isButtonPressed>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	f040 80cf 	bne.w	8000e6c <fsm_setting_run+0x48c>
					status=SET_VALUE_LED_RED;
 8000cce:	4b6e      	ldr	r3, [pc, #440]	; (8000e88 <fsm_setting_run+0x4a8>)
 8000cd0:	2210      	movs	r2, #16
 8000cd2:	601a      	str	r2, [r3, #0]
					checksave=0;
 8000cd4:	4b6a      	ldr	r3, [pc, #424]	; (8000e80 <fsm_setting_run+0x4a0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
					  setTimer(checkstatus, 10000);
 8000cda:	4b6d      	ldr	r3, [pc, #436]	; (8000e90 <fsm_setting_run+0x4b0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f242 7110 	movw	r1, #10000	; 0x2710
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 fd3c 	bl	8001760 <setTimer>
			  break;
 8000ce8:	e0c0      	b.n	8000e6c <fsm_setting_run+0x48c>
			  counterred13 = savecounterred13;
 8000cea:	4b6a      	ldr	r3, [pc, #424]	; (8000e94 <fsm_setting_run+0x4b4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a62      	ldr	r2, [pc, #392]	; (8000e78 <fsm_setting_run+0x498>)
 8000cf0:	6013      	str	r3, [r2, #0]
			  countergreen13=counterred13-counteryellow13;
 8000cf2:	4b61      	ldr	r3, [pc, #388]	; (8000e78 <fsm_setting_run+0x498>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	4b61      	ldr	r3, [pc, #388]	; (8000e7c <fsm_setting_run+0x49c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	4a66      	ldr	r2, [pc, #408]	; (8000e98 <fsm_setting_run+0x4b8>)
 8000cfe:	6013      	str	r3, [r2, #0]
			  counteryellow13=counterred13-countergreen13;
 8000d00:	4b5d      	ldr	r3, [pc, #372]	; (8000e78 <fsm_setting_run+0x498>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b64      	ldr	r3, [pc, #400]	; (8000e98 <fsm_setting_run+0x4b8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	4a5c      	ldr	r2, [pc, #368]	; (8000e7c <fsm_setting_run+0x49c>)
 8000d0c:	6013      	str	r3, [r2, #0]
			  savecountergreen13=countergreen13;
 8000d0e:	4b62      	ldr	r3, [pc, #392]	; (8000e98 <fsm_setting_run+0x4b8>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a62      	ldr	r2, [pc, #392]	; (8000e9c <fsm_setting_run+0x4bc>)
 8000d14:	6013      	str	r3, [r2, #0]
			  a=counterred13;
 8000d16:	4b58      	ldr	r3, [pc, #352]	; (8000e78 <fsm_setting_run+0x498>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a61      	ldr	r2, [pc, #388]	; (8000ea0 <fsm_setting_run+0x4c0>)
 8000d1c:	6013      	str	r3, [r2, #0]
			  b=countergreen13;
 8000d1e:	4b5e      	ldr	r3, [pc, #376]	; (8000e98 <fsm_setting_run+0x4b8>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a60      	ldr	r2, [pc, #384]	; (8000ea4 <fsm_setting_run+0x4c4>)
 8000d24:	6013      	str	r3, [r2, #0]
			  c=counteryellow13;
 8000d26:	4b55      	ldr	r3, [pc, #340]	; (8000e7c <fsm_setting_run+0x49c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a5f      	ldr	r2, [pc, #380]	; (8000ea8 <fsm_setting_run+0x4c8>)
 8000d2c:	6013      	str	r3, [r2, #0]
				if(checksave==0){
 8000d2e:	4b54      	ldr	r3, [pc, #336]	; (8000e80 <fsm_setting_run+0x4a0>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d104      	bne.n	8000d40 <fsm_setting_run+0x360>
					Save_led7RED_segment_run13();
 8000d36:	f000 fb37 	bl	80013a8 <Save_led7RED_segment_run13>
					checksave=1;
 8000d3a:	4b51      	ldr	r3, [pc, #324]	; (8000e80 <fsm_setting_run+0x4a0>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
				if(isTimerExpired(1)==1){
 8000d40:	2001      	movs	r0, #1
 8000d42:	f000 fd2d 	bl	80017a0 <isTimerExpired>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d106      	bne.n	8000d5a <fsm_setting_run+0x37a>
					led7_segment_run02();
 8000d4c:	f000 f9de 	bl	800110c <led7_segment_run02>
					setTimer(1, 400);
 8000d50:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000d54:	2001      	movs	r0, #1
 8000d56:	f000 fd03 	bl	8001760 <setTimer>
				if(isTimerExpired(2)==1){
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	f000 fd20 	bl	80017a0 <isTimerExpired>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d106      	bne.n	8000d74 <fsm_setting_run+0x394>
					Save_led7RED_segment_run13();
 8000d66:	f000 fb1f 	bl	80013a8 <Save_led7RED_segment_run13>
					setTimer(2, 1000);
 8000d6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d6e:	2002      	movs	r0, #2
 8000d70:	f000 fcf6 	bl	8001760 <setTimer>
				if(isTimerExpired(3)==1){
 8000d74:	2003      	movs	r0, #3
 8000d76:	f000 fd13 	bl	80017a0 <isTimerExpired>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d108      	bne.n	8000d92 <fsm_setting_run+0x3b2>
					HAL_GPIO_TogglePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin);
 8000d80:	2112      	movs	r1, #18
 8000d82:	484a      	ldr	r0, [pc, #296]	; (8000eac <fsm_setting_run+0x4cc>)
 8000d84:	f001 fa01 	bl	800218a <HAL_GPIO_TogglePin>
					setTimer(3, 500);
 8000d88:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f000 fce7 	bl	8001760 <setTimer>
				if(isTimerExpired(checkstatus)==1){
 8000d92:	4b3f      	ldr	r3, [pc, #252]	; (8000e90 <fsm_setting_run+0x4b0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fd02 	bl	80017a0 <isTimerExpired>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d11c      	bne.n	8000ddc <fsm_setting_run+0x3fc>
					status=AUTO_RED1_GREEN2;
 8000da2:	4b39      	ldr	r3, [pc, #228]	; (8000e88 <fsm_setting_run+0x4a8>)
 8000da4:	2202      	movs	r2, #2
 8000da6:	601a      	str	r2, [r3, #0]
					counter=0;
 8000da8:	4b41      	ldr	r3, [pc, #260]	; (8000eb0 <fsm_setting_run+0x4d0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
					idx_led13=0;
 8000dae:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <fsm_setting_run+0x4a4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
					setTimer(0, b*1000);
 8000db4:	4b3b      	ldr	r3, [pc, #236]	; (8000ea4 <fsm_setting_run+0x4c4>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dbc:	fb02 f303 	mul.w	r3, r2, r3
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f000 fccc 	bl	8001760 <setTimer>
		            setTimer(1, 443);
 8000dc8:	f240 11bb 	movw	r1, #443	; 0x1bb
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f000 fcc7 	bl	8001760 <setTimer>
		            setTimer(2, 1000);
 8000dd2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f000 fcc2 	bl	8001760 <setTimer>
				if(isButtonPressed(0)==1){
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f7ff f9b5 	bl	800014c <isButtonPressed>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d11e      	bne.n	8000e26 <fsm_setting_run+0x446>
					status= MAN_GREEN;
 8000de8:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <fsm_setting_run+0x4a8>)
 8000dea:	220d      	movs	r2, #13
 8000dec:	601a      	str	r2, [r3, #0]
					check=0;
 8000dee:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <fsm_setting_run+0x4ac>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
					setTimer(1, 400);
 8000df4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f000 fcb1 	bl	8001760 <setTimer>
					setTimer(2, 1000);
 8000dfe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e02:	2002      	movs	r0, #2
 8000e04:	f000 fcac 	bl	8001760 <setTimer>
					setTimer(3, 500);
 8000e08:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f000 fca7 	bl	8001760 <setTimer>
					setTimer(checkstatus, 10000);
 8000e12:	4b1f      	ldr	r3, [pc, #124]	; (8000e90 <fsm_setting_run+0x4b0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f242 7110 	movw	r1, #10000	; 0x2710
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 fca0 	bl	8001760 <setTimer>
					checkcountergreen=1;
 8000e20:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <fsm_setting_run+0x4d4>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	601a      	str	r2, [r3, #0]
				if(isButtonPressed(1)==1){
 8000e26:	2001      	movs	r0, #1
 8000e28:	f7ff f990 	bl	800014c <isButtonPressed>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d11e      	bne.n	8000e70 <fsm_setting_run+0x490>
					status=INCREASE_VALUE_LED_RED;
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <fsm_setting_run+0x4a8>)
 8000e34:	220f      	movs	r2, #15
 8000e36:	601a      	str	r2, [r3, #0]
					checksave=0;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <fsm_setting_run+0x4a0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
					setTimer(1, 400);
 8000e3e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000e42:	2001      	movs	r0, #1
 8000e44:	f000 fc8c 	bl	8001760 <setTimer>
					setTimer(2, 1000);
 8000e48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f000 fc87 	bl	8001760 <setTimer>
					setTimer(3, 500);
 8000e52:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e56:	2003      	movs	r0, #3
 8000e58:	f000 fc82 	bl	8001760 <setTimer>
					setTimer(checkstatus, 10000);
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <fsm_setting_run+0x4b0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f242 7110 	movw	r1, #10000	; 0x2710
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 fc7b 	bl	8001760 <setTimer>
			  break;
 8000e6a:	e001      	b.n	8000e70 <fsm_setting_run+0x490>
			  break;
 8000e6c:	bf00      	nop
 8000e6e:	e000      	b.n	8000e72 <fsm_setting_run+0x492>
			  break;
 8000e70:	bf00      	nop
      }
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000050 	.word	0x20000050
 8000e7c:	20000054 	.word	0x20000054
 8000e80:	200000a8 	.word	0x200000a8
 8000e84:	200000b0 	.word	0x200000b0
 8000e88:	200000ac 	.word	0x200000ac
 8000e8c:	200000a4 	.word	0x200000a4
 8000e90:	200000a0 	.word	0x200000a0
 8000e94:	200000c0 	.word	0x200000c0
 8000e98:	20000058 	.word	0x20000058
 8000e9c:	200000b4 	.word	0x200000b4
 8000ea0:	2000005c 	.word	0x2000005c
 8000ea4:	20000060 	.word	0x20000060
 8000ea8:	20000064 	.word	0x20000064
 8000eac:	40010800 	.word	0x40010800
 8000eb0:	2000009c 	.word	0x2000009c
 8000eb4:	200000b8 	.word	0x200000b8

08000eb8 <set_led7_segement>:
int savecounterred13,savecountergreen13,savecounteryellow13 =0;
int checkcounterred,checkcountergreen,checkcounteryellow=0;
int a=5;
int b=3;
int c=2;
void set_led7_segement(){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, SEG0X_Pin|SEG1X_Pin|SEG2X_Pin|EN3_Pin
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <set_led7_segement+0x20>)
 8000ec4:	f001 f949 	bl	800215a <HAL_GPIO_WritePin>
		                          |SEG3X_Pin|SEG4X_Pin|SEG5X_Pin|SEG6X_Pin
		                          |EN0_Pin|EN1_Pin|EN2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA, SEG0Y_Pin|SEG1Y_Pin|SEG2Y_Pin|SEG3Y_Pin|SEG4Y_Pin|SEG5Y_Pin|SEG6Y_Pin, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 8000ece:	4803      	ldr	r0, [pc, #12]	; (8000edc <set_led7_segement+0x24>)
 8000ed0:	f001 f943 	bl	800215a <HAL_GPIO_WritePin>
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40010c00 	.word	0x40010c00
 8000edc:	40010800 	.word	0x40010800

08000ee0 <display7SEGX>:
void display7SEGX(int num) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
      const uint8_t segmentMap[10] = {
 8000ee8:	4a3f      	ldr	r2, [pc, #252]	; (8000fe8 <display7SEGX+0x108>)
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ef0:	c303      	stmia	r3!, {r0, r1}
 8000ef2:	801a      	strh	r2, [r3, #0]
          0b10111110,
          0b11100000,
          0b11111110,
          0b11110110
      };
      HAL_GPIO_WritePin(SEG0X_GPIO_Port, SEG0X_Pin, (segmentMap[num] & 0b10000000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000ef4:	f107 020c 	add.w	r2, r7, #12
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4413      	add	r3, r2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b25b      	sxtb	r3, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	09db      	lsrs	r3, r3, #7
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	461a      	mov	r2, r3
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	4837      	ldr	r0, [pc, #220]	; (8000fec <display7SEGX+0x10c>)
 8000f0e:	f001 f924 	bl	800215a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG1X_GPIO_Port, SEG1X_Pin, (segmentMap[num] & 0b01000000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000f12:	f107 020c 	add.w	r2, r7, #12
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	bf0c      	ite	eq
 8000f24:	2301      	moveq	r3, #1
 8000f26:	2300      	movne	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	482f      	ldr	r0, [pc, #188]	; (8000fec <display7SEGX+0x10c>)
 8000f30:	f001 f913 	bl	800215a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG2X_GPIO_Port, SEG2X_Pin, (segmentMap[num] & 0b00100000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000f34:	f107 020c 	add.w	r2, r7, #12
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	f003 0320 	and.w	r3, r3, #32
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bf0c      	ite	eq
 8000f46:	2301      	moveq	r3, #1
 8000f48:	2300      	movne	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	2104      	movs	r1, #4
 8000f50:	4826      	ldr	r0, [pc, #152]	; (8000fec <display7SEGX+0x10c>)
 8000f52:	f001 f902 	bl	800215a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG3X_GPIO_Port, SEG3X_Pin, (segmentMap[num] & 0b00010000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000f56:	f107 020c 	add.w	r2, r7, #12
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f003 0310 	and.w	r3, r3, #16
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	bf0c      	ite	eq
 8000f68:	2301      	moveq	r3, #1
 8000f6a:	2300      	movne	r3, #0
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	461a      	mov	r2, r3
 8000f70:	2108      	movs	r1, #8
 8000f72:	481e      	ldr	r0, [pc, #120]	; (8000fec <display7SEGX+0x10c>)
 8000f74:	f001 f8f1 	bl	800215a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG4X_GPIO_Port, SEG4X_Pin, (segmentMap[num] & 0b00001000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000f78:	f107 020c 	add.w	r2, r7, #12
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	f003 0308 	and.w	r3, r3, #8
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	bf0c      	ite	eq
 8000f8a:	2301      	moveq	r3, #1
 8000f8c:	2300      	movne	r3, #0
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	2110      	movs	r1, #16
 8000f94:	4815      	ldr	r0, [pc, #84]	; (8000fec <display7SEGX+0x10c>)
 8000f96:	f001 f8e0 	bl	800215a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG5X_GPIO_Port, SEG5X_Pin, (segmentMap[num] & 0b00000100) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000f9a:	f107 020c 	add.w	r2, r7, #12
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	f003 0304 	and.w	r3, r3, #4
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	bf0c      	ite	eq
 8000fac:	2301      	moveq	r3, #1
 8000fae:	2300      	movne	r3, #0
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	2120      	movs	r1, #32
 8000fb6:	480d      	ldr	r0, [pc, #52]	; (8000fec <display7SEGX+0x10c>)
 8000fb8:	f001 f8cf 	bl	800215a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG6X_GPIO_Port, SEG6X_Pin, (segmentMap[num] & 0b00000010) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000fbc:	f107 020c 	add.w	r2, r7, #12
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	bf0c      	ite	eq
 8000fce:	2301      	moveq	r3, #1
 8000fd0:	2300      	movne	r3, #0
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	2140      	movs	r1, #64	; 0x40
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <display7SEGX+0x10c>)
 8000fda:	f001 f8be 	bl	800215a <HAL_GPIO_WritePin>
  }
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	0800319c 	.word	0x0800319c
 8000fec:	40010c00 	.word	0x40010c00

08000ff0 <display7SEGY>:
void display7SEGY(int num) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
      const uint8_t segmentMap[10] = {
 8000ff8:	4a42      	ldr	r2, [pc, #264]	; (8001104 <display7SEGY+0x114>)
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001000:	c303      	stmia	r3!, {r0, r1}
 8001002:	801a      	strh	r2, [r3, #0]
          0b10111110,
          0b11100000,
          0b11111110,
          0b11110110
      };
      HAL_GPIO_WritePin(SEG0Y_GPIO_Port, SEG0Y_Pin, (segmentMap[num] & 0b10000000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001004:	f107 020c 	add.w	r2, r7, #12
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b25b      	sxtb	r3, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	09db      	lsrs	r3, r3, #7
 8001016:	b2db      	uxtb	r3, r3
 8001018:	461a      	mov	r2, r3
 800101a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800101e:	483a      	ldr	r0, [pc, #232]	; (8001108 <display7SEGY+0x118>)
 8001020:	f001 f89b 	bl	800215a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG1Y_GPIO_Port, SEG1Y_Pin, (segmentMap[num] & 0b01000000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001024:	f107 020c 	add.w	r2, r7, #12
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4413      	add	r3, r2
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001032:	2b00      	cmp	r3, #0
 8001034:	bf0c      	ite	eq
 8001036:	2301      	moveq	r3, #1
 8001038:	2300      	movne	r3, #0
 800103a:	b2db      	uxtb	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001042:	4831      	ldr	r0, [pc, #196]	; (8001108 <display7SEGY+0x118>)
 8001044:	f001 f889 	bl	800215a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG2Y_GPIO_Port, SEG2Y_Pin, (segmentMap[num] & 0b00100000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001048:	f107 020c 	add.w	r2, r7, #12
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4413      	add	r3, r2
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	f003 0320 	and.w	r3, r3, #32
 8001056:	2b00      	cmp	r3, #0
 8001058:	bf0c      	ite	eq
 800105a:	2301      	moveq	r3, #1
 800105c:	2300      	movne	r3, #0
 800105e:	b2db      	uxtb	r3, r3
 8001060:	461a      	mov	r2, r3
 8001062:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001066:	4828      	ldr	r0, [pc, #160]	; (8001108 <display7SEGY+0x118>)
 8001068:	f001 f877 	bl	800215a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG3Y_GPIO_Port, SEG3Y_Pin, (segmentMap[num] & 0b00010000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800106c:	f107 020c 	add.w	r2, r7, #12
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	2b00      	cmp	r3, #0
 800107c:	bf0c      	ite	eq
 800107e:	2301      	moveq	r3, #1
 8001080:	2300      	movne	r3, #0
 8001082:	b2db      	uxtb	r3, r3
 8001084:	461a      	mov	r2, r3
 8001086:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800108a:	481f      	ldr	r0, [pc, #124]	; (8001108 <display7SEGY+0x118>)
 800108c:	f001 f865 	bl	800215a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG4Y_GPIO_Port, SEG4Y_Pin, (segmentMap[num] & 0b00001000) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001090:	f107 020c 	add.w	r2, r7, #12
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	2b00      	cmp	r3, #0
 80010a0:	bf0c      	ite	eq
 80010a2:	2301      	moveq	r3, #1
 80010a4:	2300      	movne	r3, #0
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	461a      	mov	r2, r3
 80010aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ae:	4816      	ldr	r0, [pc, #88]	; (8001108 <display7SEGY+0x118>)
 80010b0:	f001 f853 	bl	800215a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG5Y_GPIO_Port, SEG5Y_Pin, (segmentMap[num] & 0b00000100) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80010b4:	f107 020c 	add.w	r2, r7, #12
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	bf0c      	ite	eq
 80010c6:	2301      	moveq	r3, #1
 80010c8:	2300      	movne	r3, #0
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010d2:	480d      	ldr	r0, [pc, #52]	; (8001108 <display7SEGY+0x118>)
 80010d4:	f001 f841 	bl	800215a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(SEG6Y_GPIO_Port, SEG6Y_Pin, (segmentMap[num] & 0b00000010) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80010d8:	f107 020c 	add.w	r2, r7, #12
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4413      	add	r3, r2
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	bf0c      	ite	eq
 80010ea:	2301      	moveq	r3, #1
 80010ec:	2300      	movne	r3, #0
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010f6:	4804      	ldr	r0, [pc, #16]	; (8001108 <display7SEGY+0x118>)
 80010f8:	f001 f82f 	bl	800215a <HAL_GPIO_WritePin>
  }
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	0800319c 	.word	0x0800319c
 8001108:	40010800 	.word	0x40010800

0800110c <led7_segment_run02>:
void led7_segment_run02(){
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
//				counterred02=5;
//				counteryellow02=2;
//				countergreen02=3;
//			}
//	}
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001110:	2201      	movs	r2, #1
 8001112:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001116:	480e      	ldr	r0, [pc, #56]	; (8001150 <led7_segment_run02+0x44>)
 8001118:	f001 f81f 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001122:	480b      	ldr	r0, [pc, #44]	; (8001150 <led7_segment_run02+0x44>)
 8001124:	f001 f819 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	4808      	ldr	r0, [pc, #32]	; (8001150 <led7_segment_run02+0x44>)
 800112e:	f001 f814 	bl	800215a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001138:	4805      	ldr	r0, [pc, #20]	; (8001150 <led7_segment_run02+0x44>)
 800113a:	f001 f80e 	bl	800215a <HAL_GPIO_WritePin>
			display7SEGX(0);
 800113e:	2000      	movs	r0, #0
 8001140:	f7ff fece 	bl	8000ee0 <display7SEGX>
			display7SEGY(0);
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff ff53 	bl	8000ff0 <display7SEGY>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40010c00 	.word	0x40010c00

08001154 <led7_segment_run13>:
void led7_segment_run13(){
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	if(idx_led13>=(2*b+2*c)) idx_led13=0;
 8001158:	4b8b      	ldr	r3, [pc, #556]	; (8001388 <led7_segment_run13+0x234>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b8b      	ldr	r3, [pc, #556]	; (800138c <led7_segment_run13+0x238>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4413      	add	r3, r2
 8001162:	005a      	lsls	r2, r3, #1
 8001164:	4b8a      	ldr	r3, [pc, #552]	; (8001390 <led7_segment_run13+0x23c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	dc02      	bgt.n	8001172 <led7_segment_run13+0x1e>
 800116c:	4b88      	ldr	r3, [pc, #544]	; (8001390 <led7_segment_run13+0x23c>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
	idx_led13++;
 8001172:	4b87      	ldr	r3, [pc, #540]	; (8001390 <led7_segment_run13+0x23c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	3301      	adds	r3, #1
 8001178:	4a85      	ldr	r2, [pc, #532]	; (8001390 <led7_segment_run13+0x23c>)
 800117a:	6013      	str	r3, [r2, #0]
	if(idx_led13<=b){
 800117c:	4b84      	ldr	r3, [pc, #528]	; (8001390 <led7_segment_run13+0x23c>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b81      	ldr	r3, [pc, #516]	; (8001388 <led7_segment_run13+0x234>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	dc26      	bgt.n	80011d6 <led7_segment_run13+0x82>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118e:	4881      	ldr	r0, [pc, #516]	; (8001394 <led7_segment_run13+0x240>)
 8001190:	f000 ffe3 	bl	800215a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119a:	487e      	ldr	r0, [pc, #504]	; (8001394 <led7_segment_run13+0x240>)
 800119c:	f000 ffdd 	bl	800215a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2180      	movs	r1, #128	; 0x80
 80011a4:	487b      	ldr	r0, [pc, #492]	; (8001394 <led7_segment_run13+0x240>)
 80011a6:	f000 ffd8 	bl	800215a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b0:	4878      	ldr	r0, [pc, #480]	; (8001394 <led7_segment_run13+0x240>)
 80011b2:	f000 ffd2 	bl	800215a <HAL_GPIO_WritePin>
		display7SEGX(counterred13--);
 80011b6:	4b78      	ldr	r3, [pc, #480]	; (8001398 <led7_segment_run13+0x244>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	1e5a      	subs	r2, r3, #1
 80011bc:	4976      	ldr	r1, [pc, #472]	; (8001398 <led7_segment_run13+0x244>)
 80011be:	600a      	str	r2, [r1, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fe8d 	bl	8000ee0 <display7SEGX>
		display7SEGY(countergreen13--);
 80011c6:	4b75      	ldr	r3, [pc, #468]	; (800139c <led7_segment_run13+0x248>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	1e5a      	subs	r2, r3, #1
 80011cc:	4973      	ldr	r1, [pc, #460]	; (800139c <led7_segment_run13+0x248>)
 80011ce:	600a      	str	r2, [r1, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff0d 	bl	8000ff0 <display7SEGY>
	}
	if(idx_led13>b&&idx_led13<=(b+c)){
 80011d6:	4b6e      	ldr	r3, [pc, #440]	; (8001390 <led7_segment_run13+0x23c>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b6b      	ldr	r3, [pc, #428]	; (8001388 <led7_segment_run13+0x234>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	dd44      	ble.n	800126c <led7_segment_run13+0x118>
 80011e2:	4b69      	ldr	r3, [pc, #420]	; (8001388 <led7_segment_run13+0x234>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4b69      	ldr	r3, [pc, #420]	; (800138c <led7_segment_run13+0x238>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	441a      	add	r2, r3
 80011ec:	4b68      	ldr	r3, [pc, #416]	; (8001390 <led7_segment_run13+0x23c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	db3b      	blt.n	800126c <led7_segment_run13+0x118>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fa:	4866      	ldr	r0, [pc, #408]	; (8001394 <led7_segment_run13+0x240>)
 80011fc:	f000 ffad 	bl	800215a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001206:	4863      	ldr	r0, [pc, #396]	; (8001394 <led7_segment_run13+0x240>)
 8001208:	f000 ffa7 	bl	800215a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800120c:	2201      	movs	r2, #1
 800120e:	2180      	movs	r1, #128	; 0x80
 8001210:	4860      	ldr	r0, [pc, #384]	; (8001394 <led7_segment_run13+0x240>)
 8001212:	f000 ffa2 	bl	800215a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001216:	2201      	movs	r2, #1
 8001218:	f44f 7100 	mov.w	r1, #512	; 0x200
 800121c:	485d      	ldr	r0, [pc, #372]	; (8001394 <led7_segment_run13+0x240>)
 800121e:	f000 ff9c 	bl	800215a <HAL_GPIO_WritePin>
		display7SEGX(counterred13--);
 8001222:	4b5d      	ldr	r3, [pc, #372]	; (8001398 <led7_segment_run13+0x244>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	1e5a      	subs	r2, r3, #1
 8001228:	495b      	ldr	r1, [pc, #364]	; (8001398 <led7_segment_run13+0x244>)
 800122a:	600a      	str	r2, [r1, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fe57 	bl	8000ee0 <display7SEGX>
		display7SEGY(counteryellow13--);
 8001232:	4b5b      	ldr	r3, [pc, #364]	; (80013a0 <led7_segment_run13+0x24c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	1e5a      	subs	r2, r3, #1
 8001238:	4959      	ldr	r1, [pc, #356]	; (80013a0 <led7_segment_run13+0x24c>)
 800123a:	600a      	str	r2, [r1, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fed7 	bl	8000ff0 <display7SEGY>
			if(idx_led13>=(b+c)){
 8001242:	4b51      	ldr	r3, [pc, #324]	; (8001388 <led7_segment_run13+0x234>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b51      	ldr	r3, [pc, #324]	; (800138c <led7_segment_run13+0x238>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	441a      	add	r2, r3
 800124c:	4b50      	ldr	r3, [pc, #320]	; (8001390 <led7_segment_run13+0x23c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	dc0b      	bgt.n	800126c <led7_segment_run13+0x118>
				counterred13=a;
 8001254:	4b53      	ldr	r3, [pc, #332]	; (80013a4 <led7_segment_run13+0x250>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a4f      	ldr	r2, [pc, #316]	; (8001398 <led7_segment_run13+0x244>)
 800125a:	6013      	str	r3, [r2, #0]
				counteryellow13=c;
 800125c:	4b4b      	ldr	r3, [pc, #300]	; (800138c <led7_segment_run13+0x238>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a4f      	ldr	r2, [pc, #316]	; (80013a0 <led7_segment_run13+0x24c>)
 8001262:	6013      	str	r3, [r2, #0]
				countergreen13=b;
 8001264:	4b48      	ldr	r3, [pc, #288]	; (8001388 <led7_segment_run13+0x234>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a4c      	ldr	r2, [pc, #304]	; (800139c <led7_segment_run13+0x248>)
 800126a:	6013      	str	r3, [r2, #0]
			}
	}
	if(idx_led13>(b+c)&&idx_led13<=(2*b+c)){
 800126c:	4b46      	ldr	r3, [pc, #280]	; (8001388 <led7_segment_run13+0x234>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b46      	ldr	r3, [pc, #280]	; (800138c <led7_segment_run13+0x238>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	441a      	add	r2, r3
 8001276:	4b46      	ldr	r3, [pc, #280]	; (8001390 <led7_segment_run13+0x23c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	da30      	bge.n	80012e0 <led7_segment_run13+0x18c>
 800127e:	4b42      	ldr	r3, [pc, #264]	; (8001388 <led7_segment_run13+0x234>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	005a      	lsls	r2, r3, #1
 8001284:	4b41      	ldr	r3, [pc, #260]	; (800138c <led7_segment_run13+0x238>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	441a      	add	r2, r3
 800128a:	4b41      	ldr	r3, [pc, #260]	; (8001390 <led7_segment_run13+0x23c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	db26      	blt.n	80012e0 <led7_segment_run13+0x18c>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001298:	483e      	ldr	r0, [pc, #248]	; (8001394 <led7_segment_run13+0x240>)
 800129a:	f000 ff5e 	bl	800215a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012a4:	483b      	ldr	r0, [pc, #236]	; (8001394 <led7_segment_run13+0x240>)
 80012a6:	f000 ff58 	bl	800215a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2180      	movs	r1, #128	; 0x80
 80012ae:	4839      	ldr	r0, [pc, #228]	; (8001394 <led7_segment_run13+0x240>)
 80012b0:	f000 ff53 	bl	800215a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80012b4:	2201      	movs	r2, #1
 80012b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ba:	4836      	ldr	r0, [pc, #216]	; (8001394 <led7_segment_run13+0x240>)
 80012bc:	f000 ff4d 	bl	800215a <HAL_GPIO_WritePin>
		display7SEGY(counterred13--);
 80012c0:	4b35      	ldr	r3, [pc, #212]	; (8001398 <led7_segment_run13+0x244>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	1e5a      	subs	r2, r3, #1
 80012c6:	4934      	ldr	r1, [pc, #208]	; (8001398 <led7_segment_run13+0x244>)
 80012c8:	600a      	str	r2, [r1, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fe90 	bl	8000ff0 <display7SEGY>
		display7SEGX(countergreen13--);
 80012d0:	4b32      	ldr	r3, [pc, #200]	; (800139c <led7_segment_run13+0x248>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	1e5a      	subs	r2, r3, #1
 80012d6:	4931      	ldr	r1, [pc, #196]	; (800139c <led7_segment_run13+0x248>)
 80012d8:	600a      	str	r2, [r1, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe00 	bl	8000ee0 <display7SEGX>
	}
	if(idx_led13>(2*b+c)&&idx_led13<=(2*b+2*c)){
 80012e0:	4b29      	ldr	r3, [pc, #164]	; (8001388 <led7_segment_run13+0x234>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	005a      	lsls	r2, r3, #1
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <led7_segment_run13+0x238>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	441a      	add	r2, r3
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <led7_segment_run13+0x23c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	da46      	bge.n	8001382 <led7_segment_run13+0x22e>
 80012f4:	4b24      	ldr	r3, [pc, #144]	; (8001388 <led7_segment_run13+0x234>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b24      	ldr	r3, [pc, #144]	; (800138c <led7_segment_run13+0x238>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4413      	add	r3, r2
 80012fe:	005a      	lsls	r2, r3, #1
 8001300:	4b23      	ldr	r3, [pc, #140]	; (8001390 <led7_segment_run13+0x23c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	db3c      	blt.n	8001382 <led7_segment_run13+0x22e>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800130e:	4821      	ldr	r0, [pc, #132]	; (8001394 <led7_segment_run13+0x240>)
 8001310:	f000 ff23 	bl	800215a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800131a:	481e      	ldr	r0, [pc, #120]	; (8001394 <led7_segment_run13+0x240>)
 800131c:	f000 ff1d 	bl	800215a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001320:	2201      	movs	r2, #1
 8001322:	2180      	movs	r1, #128	; 0x80
 8001324:	481b      	ldr	r0, [pc, #108]	; (8001394 <led7_segment_run13+0x240>)
 8001326:	f000 ff18 	bl	800215a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001330:	4818      	ldr	r0, [pc, #96]	; (8001394 <led7_segment_run13+0x240>)
 8001332:	f000 ff12 	bl	800215a <HAL_GPIO_WritePin>
		display7SEGY(counterred13--);
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <led7_segment_run13+0x244>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	1e5a      	subs	r2, r3, #1
 800133c:	4916      	ldr	r1, [pc, #88]	; (8001398 <led7_segment_run13+0x244>)
 800133e:	600a      	str	r2, [r1, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fe55 	bl	8000ff0 <display7SEGY>
		display7SEGX(counteryellow13--);
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <led7_segment_run13+0x24c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	1e5a      	subs	r2, r3, #1
 800134c:	4914      	ldr	r1, [pc, #80]	; (80013a0 <led7_segment_run13+0x24c>)
 800134e:	600a      	str	r2, [r1, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fdc5 	bl	8000ee0 <display7SEGX>
			if(idx_led13>=(2*b+2*c)){
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <led7_segment_run13+0x234>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <led7_segment_run13+0x238>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	005a      	lsls	r2, r3, #1
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <led7_segment_run13+0x23c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	dc0b      	bgt.n	8001382 <led7_segment_run13+0x22e>
				counterred13=a;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <led7_segment_run13+0x250>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <led7_segment_run13+0x244>)
 8001370:	6013      	str	r3, [r2, #0]
				counteryellow13=c;
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <led7_segment_run13+0x238>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <led7_segment_run13+0x24c>)
 8001378:	6013      	str	r3, [r2, #0]
				countergreen13=b;
 800137a:	4b03      	ldr	r3, [pc, #12]	; (8001388 <led7_segment_run13+0x234>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a07      	ldr	r2, [pc, #28]	; (800139c <led7_segment_run13+0x248>)
 8001380:	6013      	str	r3, [r2, #0]
			}
	}
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000060 	.word	0x20000060
 800138c:	20000064 	.word	0x20000064
 8001390:	200000b0 	.word	0x200000b0
 8001394:	40010c00 	.word	0x40010c00
 8001398:	20000050 	.word	0x20000050
 800139c:	20000058 	.word	0x20000058
 80013a0:	20000054 	.word	0x20000054
 80013a4:	2000005c 	.word	0x2000005c

080013a8 <Save_led7RED_segment_run13>:
//		break;
//	}
//}
void Save_led7_segment_run02(){
}
void Save_led7RED_segment_run13(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b2:	481b      	ldr	r0, [pc, #108]	; (8001420 <Save_led7RED_segment_run13+0x78>)
 80013b4:	f000 fed1 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013be:	4818      	ldr	r0, [pc, #96]	; (8001420 <Save_led7RED_segment_run13+0x78>)
 80013c0:	f000 fecb 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2180      	movs	r1, #128	; 0x80
 80013c8:	4815      	ldr	r0, [pc, #84]	; (8001420 <Save_led7RED_segment_run13+0x78>)
 80013ca:	f000 fec6 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d4:	4812      	ldr	r0, [pc, #72]	; (8001420 <Save_led7RED_segment_run13+0x78>)
 80013d6:	f000 fec0 	bl	800215a <HAL_GPIO_WritePin>
	if(checkcounterred==0){
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <Save_led7RED_segment_run13+0x7c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10b      	bne.n	80013fa <Save_led7RED_segment_run13+0x52>
		savecounterred13=++counterred13;
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <Save_led7RED_segment_run13+0x80>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <Save_led7RED_segment_run13+0x80>)
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <Save_led7RED_segment_run13+0x80>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0e      	ldr	r2, [pc, #56]	; (800142c <Save_led7RED_segment_run13+0x84>)
 80013f2:	6013      	str	r3, [r2, #0]
		checkcounterred=1;
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <Save_led7RED_segment_run13+0x7c>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]
	}
	display7SEGX(savecounterred13++);
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <Save_led7RED_segment_run13+0x84>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	490a      	ldr	r1, [pc, #40]	; (800142c <Save_led7RED_segment_run13+0x84>)
 8001402:	600a      	str	r2, [r1, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fd6b 	bl	8000ee0 <display7SEGX>
	display7SEGY(2);
 800140a:	2002      	movs	r0, #2
 800140c:	f7ff fdf0 	bl	8000ff0 <display7SEGY>
	--savecounterred13;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <Save_led7RED_segment_run13+0x84>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	3b01      	subs	r3, #1
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <Save_led7RED_segment_run13+0x84>)
 8001418:	6013      	str	r3, [r2, #0]
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40010c00 	.word	0x40010c00
 8001424:	200000bc 	.word	0x200000bc
 8001428:	20000050 	.word	0x20000050
 800142c:	200000c0 	.word	0x200000c0

08001430 <Increase_Save_led7RED_segment_run13>:
void Increase_Save_led7RED_segment_run13(){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 7180 	mov.w	r1, #256	; 0x100
 800143a:	4811      	ldr	r0, [pc, #68]	; (8001480 <Increase_Save_led7RED_segment_run13+0x50>)
 800143c:	f000 fe8d 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001446:	480e      	ldr	r0, [pc, #56]	; (8001480 <Increase_Save_led7RED_segment_run13+0x50>)
 8001448:	f000 fe87 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800144c:	2201      	movs	r2, #1
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	480b      	ldr	r0, [pc, #44]	; (8001480 <Increase_Save_led7RED_segment_run13+0x50>)
 8001452:	f000 fe82 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 7100 	mov.w	r1, #512	; 0x200
 800145c:	4808      	ldr	r0, [pc, #32]	; (8001480 <Increase_Save_led7RED_segment_run13+0x50>)
 800145e:	f000 fe7c 	bl	800215a <HAL_GPIO_WritePin>
	display7SEGX(++savecounterred13);
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <Increase_Save_led7RED_segment_run13+0x54>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	4a06      	ldr	r2, [pc, #24]	; (8001484 <Increase_Save_led7RED_segment_run13+0x54>)
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <Increase_Save_led7RED_segment_run13+0x54>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fd35 	bl	8000ee0 <display7SEGX>
	display7SEGY(2);
 8001476:	2002      	movs	r0, #2
 8001478:	f7ff fdba 	bl	8000ff0 <display7SEGY>
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40010c00 	.word	0x40010c00
 8001484:	200000c0 	.word	0x200000c0

08001488 <Save_led7GREEN_segment_run13>:
void Save_led7GREEN_segment_run13(){
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001492:	481b      	ldr	r0, [pc, #108]	; (8001500 <Save_led7GREEN_segment_run13+0x78>)
 8001494:	f000 fe61 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800149e:	4818      	ldr	r0, [pc, #96]	; (8001500 <Save_led7GREEN_segment_run13+0x78>)
 80014a0:	f000 fe5b 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	2180      	movs	r1, #128	; 0x80
 80014a8:	4815      	ldr	r0, [pc, #84]	; (8001500 <Save_led7GREEN_segment_run13+0x78>)
 80014aa:	f000 fe56 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80014ae:	2201      	movs	r2, #1
 80014b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b4:	4812      	ldr	r0, [pc, #72]	; (8001500 <Save_led7GREEN_segment_run13+0x78>)
 80014b6:	f000 fe50 	bl	800215a <HAL_GPIO_WritePin>
	if(checkcountergreen==0){
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <Save_led7GREEN_segment_run13+0x7c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10b      	bne.n	80014da <Save_led7GREEN_segment_run13+0x52>
		savecountergreen13=++countergreen13;
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <Save_led7GREEN_segment_run13+0x80>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <Save_led7GREEN_segment_run13+0x80>)
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <Save_led7GREEN_segment_run13+0x80>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0e      	ldr	r2, [pc, #56]	; (800150c <Save_led7GREEN_segment_run13+0x84>)
 80014d2:	6013      	str	r3, [r2, #0]
		checkcountergreen=1;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <Save_led7GREEN_segment_run13+0x7c>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	601a      	str	r2, [r3, #0]
	}
	display7SEGX(savecountergreen13++);
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <Save_led7GREEN_segment_run13+0x84>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	490a      	ldr	r1, [pc, #40]	; (800150c <Save_led7GREEN_segment_run13+0x84>)
 80014e2:	600a      	str	r2, [r1, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fcfb 	bl	8000ee0 <display7SEGX>
	display7SEGY(3);
 80014ea:	2003      	movs	r0, #3
 80014ec:	f7ff fd80 	bl	8000ff0 <display7SEGY>
	--savecountergreen13;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <Save_led7GREEN_segment_run13+0x84>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <Save_led7GREEN_segment_run13+0x84>)
 80014f8:	6013      	str	r3, [r2, #0]
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40010c00 	.word	0x40010c00
 8001504:	200000b8 	.word	0x200000b8
 8001508:	20000058 	.word	0x20000058
 800150c:	200000b4 	.word	0x200000b4

08001510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001514:	f000 fb20 	bl	8001b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001518:	f000 f816 	bl	8001548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151c:	f000 f89c 	bl	8001658 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001520:	f000 f84e 	bl	80015c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8001524:	4806      	ldr	r0, [pc, #24]	; (8001540 <main+0x30>)
 8001526:	f001 fa75 	bl	8002a14 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <main+0x34>)
 800152c:	2201      	movs	r2, #1
 800152e:	601a      	str	r2, [r3, #0]
  while (1)
  {
//	  if(isButtonPressed(0)==1){
//		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
//	  }
	  fsm_automatic_run();
 8001530:	f7fe fec0 	bl	80002b4 <fsm_automatic_run>
	  fsm_manual_run();
 8001534:	f7ff f87c 	bl	8000630 <fsm_manual_run>
	  fsm_setting_run();
 8001538:	f7ff fa52 	bl	80009e0 <fsm_setting_run>
	  fsm_automatic_run();
 800153c:	e7f8      	b.n	8001530 <main+0x20>
 800153e:	bf00      	nop
 8001540:	200000c4 	.word	0x200000c4
 8001544:	200000ac 	.word	0x200000ac

08001548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b090      	sub	sp, #64	; 0x40
 800154c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154e:	f107 0318 	add.w	r3, r7, #24
 8001552:	2228      	movs	r2, #40	; 0x28
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f001 fe0c 	bl	8003174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800156a:	2302      	movs	r3, #2
 800156c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800156e:	2301      	movs	r3, #1
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001572:	2310      	movs	r3, #16
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001576:	2300      	movs	r3, #0
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157a:	f107 0318 	add.w	r3, r7, #24
 800157e:	4618      	mov	r0, r3
 8001580:	f000 fe1c 	bl	80021bc <HAL_RCC_OscConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800158a:	f000 f8e3 	bl	8001754 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158e:	230f      	movs	r3, #15
 8001590:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f001 f888 	bl	80026bc <HAL_RCC_ClockConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015b2:	f000 f8cf 	bl	8001754 <Error_Handler>
  }
}
 80015b6:	bf00      	nop
 80015b8:	3740      	adds	r7, #64	; 0x40
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d4:	463b      	mov	r3, r7
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <MX_TIM2_Init+0x94>)
 80015de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <MX_TIM2_Init+0x94>)
 80015e6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80015ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <MX_TIM2_Init+0x94>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <MX_TIM2_Init+0x94>)
 80015f4:	2209      	movs	r2, #9
 80015f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	4b16      	ldr	r3, [pc, #88]	; (8001654 <MX_TIM2_Init+0x94>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <MX_TIM2_Init+0x94>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001604:	4813      	ldr	r0, [pc, #76]	; (8001654 <MX_TIM2_Init+0x94>)
 8001606:	f001 f9b5 	bl	8002974 <HAL_TIM_Base_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001610:	f000 f8a0 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001618:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	4619      	mov	r1, r3
 8001620:	480c      	ldr	r0, [pc, #48]	; (8001654 <MX_TIM2_Init+0x94>)
 8001622:	f001 fb33 	bl	8002c8c <HAL_TIM_ConfigClockSource>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800162c:	f000 f892 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001630:	2300      	movs	r3, #0
 8001632:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001638:	463b      	mov	r3, r7
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_TIM2_Init+0x94>)
 800163e:	f001 fd0b 	bl	8003058 <HAL_TIMEx_MasterConfigSynchronization>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001648:	f000 f884 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200000c4 	.word	0x200000c4

08001658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	f107 0310 	add.w	r3, r7, #16
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166c:	4b2f      	ldr	r3, [pc, #188]	; (800172c <MX_GPIO_Init+0xd4>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a2e      	ldr	r2, [pc, #184]	; (800172c <MX_GPIO_Init+0xd4>)
 8001672:	f043 0310 	orr.w	r3, r3, #16
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b2c      	ldr	r3, [pc, #176]	; (800172c <MX_GPIO_Init+0xd4>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001684:	4b29      	ldr	r3, [pc, #164]	; (800172c <MX_GPIO_Init+0xd4>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a28      	ldr	r2, [pc, #160]	; (800172c <MX_GPIO_Init+0xd4>)
 800168a:	f043 0304 	orr.w	r3, r3, #4
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b26      	ldr	r3, [pc, #152]	; (800172c <MX_GPIO_Init+0xd4>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169c:	4b23      	ldr	r3, [pc, #140]	; (800172c <MX_GPIO_Init+0xd4>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a22      	ldr	r2, [pc, #136]	; (800172c <MX_GPIO_Init+0xd4>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b20      	ldr	r3, [pc, #128]	; (800172c <MX_GPIO_Init+0xd4>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED2_Pin
 80016b4:	2200      	movs	r2, #0
 80016b6:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 80016ba:	481d      	ldr	r0, [pc, #116]	; (8001730 <MX_GPIO_Init+0xd8>)
 80016bc:	f000 fd4d 	bl	800215a <HAL_GPIO_WritePin>
                          |LED_RED_Pin|LED_GREEN2_Pin|LED_YELLOW2_Pin|SEG0Y_Pin
                          |SEG1Y_Pin|SEG2Y_Pin|SEG3Y_Pin|SEG4Y_Pin
                          |SEG5Y_Pin|SEG6Y_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0X_Pin|SEG1X_Pin|SEG2X_Pin|EN3_Pin
 80016c0:	2200      	movs	r2, #0
 80016c2:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80016c6:	481b      	ldr	r0, [pc, #108]	; (8001734 <MX_GPIO_Init+0xdc>)
 80016c8:	f000 fd47 	bl	800215a <HAL_GPIO_WritePin>
                          |SEG3X_Pin|SEG4X_Pin|SEG5X_Pin|SEG6X_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin;
 80016cc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d6:	2301      	movs	r3, #1
 80016d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016da:	f107 0310 	add.w	r3, r7, #16
 80016de:	4619      	mov	r1, r3
 80016e0:	4815      	ldr	r0, [pc, #84]	; (8001738 <MX_GPIO_Init+0xe0>)
 80016e2:	f000 fba9 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED1_Pin LED_GREEN1_Pin LED_YELLOW1_Pin LED_RED2_Pin
                           LED_RED_Pin LED_GREEN2_Pin LED_YELLOW2_Pin SEG0Y_Pin
                           SEG1Y_Pin SEG2Y_Pin SEG3Y_Pin SEG4Y_Pin
                           SEG5Y_Pin SEG6Y_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_GREEN1_Pin|LED_YELLOW1_Pin|LED_RED2_Pin
 80016e6:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 80016ea:	613b      	str	r3, [r7, #16]
                          |LED_RED_Pin|LED_GREEN2_Pin|LED_YELLOW2_Pin|SEG0Y_Pin
                          |SEG1Y_Pin|SEG2Y_Pin|SEG3Y_Pin|SEG4Y_Pin
                          |SEG5Y_Pin|SEG6Y_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2302      	movs	r3, #2
 80016f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	4619      	mov	r1, r3
 80016fe:	480c      	ldr	r0, [pc, #48]	; (8001730 <MX_GPIO_Init+0xd8>)
 8001700:	f000 fb9a 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0X_Pin SEG1X_Pin SEG2X_Pin EN3_Pin
                           SEG3X_Pin SEG4X_Pin SEG5X_Pin SEG6X_Pin
                           EN0_Pin EN1_Pin EN2_Pin */
  GPIO_InitStruct.Pin = SEG0X_Pin|SEG1X_Pin|SEG2X_Pin|EN3_Pin
 8001704:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001708:	613b      	str	r3, [r7, #16]
                          |SEG3X_Pin|SEG4X_Pin|SEG5X_Pin|SEG6X_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2302      	movs	r3, #2
 8001714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001716:	f107 0310 	add.w	r3, r7, #16
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <MX_GPIO_Init+0xdc>)
 800171e:	f000 fb8b 	bl	8001e38 <HAL_GPIO_Init>

}
 8001722:	bf00      	nop
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	40010800 	.word	0x40010800
 8001734:	40010c00 	.word	0x40010c00
 8001738:	40011000 	.word	0x40011000

0800173c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	    timerRun();
 8001744:	f000 f846 	bl	80017d4 <timerRun>
		getKeyInput();
 8001748:	f7fe fd2a 	bl	80001a0 <getKeyInput>
 }
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
}
 800175a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800175c:	e7fe      	b.n	800175c <Error_Handler+0x8>
	...

08001760 <setTimer>:
#define TIMER_TICK 10

int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];

void setTimer(int index, int value){
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
	timer_counter[index]=value/TIMER_TICK;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	4a09      	ldr	r2, [pc, #36]	; (8001794 <setTimer+0x34>)
 800176e:	fb82 1203 	smull	r1, r2, r2, r3
 8001772:	1092      	asrs	r2, r2, #2
 8001774:	17db      	asrs	r3, r3, #31
 8001776:	1ad2      	subs	r2, r2, r3
 8001778:	4907      	ldr	r1, [pc, #28]	; (8001798 <setTimer+0x38>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index]=0;
 8001780:	4a06      	ldr	r2, [pc, #24]	; (800179c <setTimer+0x3c>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2100      	movs	r1, #0
 8001786:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	66666667 	.word	0x66666667
 8001798:	2000010c 	.word	0x2000010c
 800179c:	20000134 	.word	0x20000134

080017a0 <isTimerExpired>:

int isTimerExpired(int index){
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	if(timer_flag[index]==1){
 80017a8:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <isTimerExpired+0x30>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d106      	bne.n	80017c2 <isTimerExpired+0x22>
		timer_flag[index]=0;
 80017b4:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <isTimerExpired+0x30>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2100      	movs	r1, #0
 80017ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <isTimerExpired+0x24>
	}
	return 0;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000134 	.word	0x20000134

080017d4 <timerRun>:

void timerRun(){
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_COUNTER;i++){
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	e01c      	b.n	800181a <timerRun+0x46>
		if(timer_counter[i]>0){
 80017e0:	4a12      	ldr	r2, [pc, #72]	; (800182c <timerRun+0x58>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	dd13      	ble.n	8001814 <timerRun+0x40>
			timer_counter[i]--;
 80017ec:	4a0f      	ldr	r2, [pc, #60]	; (800182c <timerRun+0x58>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f4:	1e5a      	subs	r2, r3, #1
 80017f6:	490d      	ldr	r1, [pc, #52]	; (800182c <timerRun+0x58>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i]<=0) timer_flag[i]=1;
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <timerRun+0x58>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001806:	2b00      	cmp	r3, #0
 8001808:	dc04      	bgt.n	8001814 <timerRun+0x40>
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <timerRun+0x5c>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2101      	movs	r1, #1
 8001810:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<MAX_COUNTER;i++){
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3301      	adds	r3, #1
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b09      	cmp	r3, #9
 800181e:	dddf      	ble.n	80017e0 <timerRun+0xc>
		}
	}
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	2000010c 	.word	0x2000010c
 8001830:	20000134 	.word	0x20000134

08001834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_MspInit+0x5c>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	4a14      	ldr	r2, [pc, #80]	; (8001890 <HAL_MspInit+0x5c>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6193      	str	r3, [r2, #24]
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_MspInit+0x5c>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_MspInit+0x5c>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <HAL_MspInit+0x5c>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185c:	61d3      	str	r3, [r2, #28]
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <HAL_MspInit+0x5c>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_MspInit+0x60>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_MspInit+0x60>)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	40021000 	.word	0x40021000
 8001894:	40010000 	.word	0x40010000

08001898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a8:	d113      	bne.n	80018d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_TIM_Base_MspInit+0x44>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <HAL_TIM_Base_MspInit+0x44>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	61d3      	str	r3, [r2, #28]
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_TIM_Base_MspInit+0x44>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	201c      	movs	r0, #28
 80018c8:	f000 fa7f 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018cc:	201c      	movs	r0, #28
 80018ce:	f000 fa98 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000

080018e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <NMI_Handler+0x4>

080018e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <HardFault_Handler+0x4>

080018ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <MemManage_Handler+0x4>

080018f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <UsageFault_Handler+0x4>

080018fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001926:	f000 f95d 	bl	8001be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <TIM2_IRQHandler+0x10>)
 8001936:	f001 f8b9 	bl	8002aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200000c4 	.word	0x200000c4

08001944 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <set_led>:
 *  Created on: 29 thg 10, 2024
 *      Author: ADMIN
 */
#include "traffic_light.h"

void set_led(){
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED1_Pin|LED_YELLOW2_Pin
 8001954:	2201      	movs	r2, #1
 8001956:	21fe      	movs	r1, #254	; 0xfe
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <set_led+0x14>)
 800195a:	f000 fbfe 	bl	800215a <HAL_GPIO_WritePin>
	                          |LED_RED_Pin|LED_GREEN2_Pin|LED_RED2_Pin, GPIO_PIN_SET);
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40010800 	.word	0x40010800

08001968 <Turn_On_All_LED_RED>:

void Turn_On_All_LED_RED(){
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin , RESET);
 800196c:	2200      	movs	r2, #0
 800196e:	2112      	movs	r1, #18
 8001970:	4807      	ldr	r0, [pc, #28]	; (8001990 <Turn_On_All_LED_RED+0x28>)
 8001972:	f000 fbf2 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin , SET);
 8001976:	2201      	movs	r2, #1
 8001978:	2144      	movs	r1, #68	; 0x44
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <Turn_On_All_LED_RED+0x28>)
 800197c:	f000 fbed 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin , SET);
 8001980:	2201      	movs	r2, #1
 8001982:	2188      	movs	r1, #136	; 0x88
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <Turn_On_All_LED_RED+0x28>)
 8001986:	f000 fbe8 	bl	800215a <HAL_GPIO_WritePin>
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40010800 	.word	0x40010800

08001994 <Turn_On_All_LED_GREEN>:
void Turn_On_All_LED_GREEN(){
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin , RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	2144      	movs	r1, #68	; 0x44
 800199c:	4807      	ldr	r0, [pc, #28]	; (80019bc <Turn_On_All_LED_GREEN+0x28>)
 800199e:	f000 fbdc 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin , SET);
 80019a2:	2201      	movs	r2, #1
 80019a4:	2112      	movs	r1, #18
 80019a6:	4805      	ldr	r0, [pc, #20]	; (80019bc <Turn_On_All_LED_GREEN+0x28>)
 80019a8:	f000 fbd7 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin , SET);
 80019ac:	2201      	movs	r2, #1
 80019ae:	2188      	movs	r1, #136	; 0x88
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <Turn_On_All_LED_GREEN+0x28>)
 80019b2:	f000 fbd2 	bl	800215a <HAL_GPIO_WritePin>
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40010800 	.word	0x40010800

080019c0 <Turn_On_All_LED_YELLOW>:
void Turn_On_All_LED_YELLOW(){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin|LED_YELLOW2_Pin , RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2188      	movs	r1, #136	; 0x88
 80019c8:	4807      	ldr	r0, [pc, #28]	; (80019e8 <Turn_On_All_LED_YELLOW+0x28>)
 80019ca:	f000 fbc6 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin|LED_GREEN2_Pin , SET);
 80019ce:	2201      	movs	r2, #1
 80019d0:	2144      	movs	r1, #68	; 0x44
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <Turn_On_All_LED_YELLOW+0x28>)
 80019d4:	f000 fbc1 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_RED2_Pin , SET);
 80019d8:	2201      	movs	r2, #1
 80019da:	2112      	movs	r1, #18
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <Turn_On_All_LED_YELLOW+0x28>)
 80019de:	f000 fbbc 	bl	800215a <HAL_GPIO_WritePin>
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40010800 	.word	0x40010800

080019ec <LED_RED1_GREEN2>:
void LED_RED1_GREEN2(){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	2110      	movs	r1, #16
 80019f4:	480e      	ldr	r0, [pc, #56]	; (8001a30 <LED_RED1_GREEN2+0x44>)
 80019f6:	f000 fbb0 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80019fa:	2201      	movs	r2, #1
 80019fc:	2104      	movs	r1, #4
 80019fe:	480c      	ldr	r0, [pc, #48]	; (8001a30 <LED_RED1_GREEN2+0x44>)
 8001a00:	f000 fbab 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001a04:	2201      	movs	r2, #1
 8001a06:	2108      	movs	r1, #8
 8001a08:	4809      	ldr	r0, [pc, #36]	; (8001a30 <LED_RED1_GREEN2+0x44>)
 8001a0a:	f000 fba6 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001a0e:	2201      	movs	r2, #1
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	4807      	ldr	r0, [pc, #28]	; (8001a30 <LED_RED1_GREEN2+0x44>)
 8001a14:	f000 fba1 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2102      	movs	r1, #2
 8001a1c:	4804      	ldr	r0, [pc, #16]	; (8001a30 <LED_RED1_GREEN2+0x44>)
 8001a1e:	f000 fb9c 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2140      	movs	r1, #64	; 0x40
 8001a26:	4802      	ldr	r0, [pc, #8]	; (8001a30 <LED_RED1_GREEN2+0x44>)
 8001a28:	f000 fb97 	bl	800215a <HAL_GPIO_WritePin>
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40010800 	.word	0x40010800

08001a34 <LED_RED1_YELLOW2>:

void LED_RED1_YELLOW2(){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	2110      	movs	r1, #16
 8001a3c:	480e      	ldr	r0, [pc, #56]	; (8001a78 <LED_RED1_YELLOW2+0x44>)
 8001a3e:	f000 fb8c 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001a42:	2201      	movs	r2, #1
 8001a44:	2104      	movs	r1, #4
 8001a46:	480c      	ldr	r0, [pc, #48]	; (8001a78 <LED_RED1_YELLOW2+0x44>)
 8001a48:	f000 fb87 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2108      	movs	r1, #8
 8001a50:	4809      	ldr	r0, [pc, #36]	; (8001a78 <LED_RED1_YELLOW2+0x44>)
 8001a52:	f000 fb82 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	2140      	movs	r1, #64	; 0x40
 8001a5a:	4807      	ldr	r0, [pc, #28]	; (8001a78 <LED_RED1_YELLOW2+0x44>)
 8001a5c:	f000 fb7d 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2102      	movs	r1, #2
 8001a64:	4804      	ldr	r0, [pc, #16]	; (8001a78 <LED_RED1_YELLOW2+0x44>)
 8001a66:	f000 fb78 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2180      	movs	r1, #128	; 0x80
 8001a6e:	4802      	ldr	r0, [pc, #8]	; (8001a78 <LED_RED1_YELLOW2+0x44>)
 8001a70:	f000 fb73 	bl	800215a <HAL_GPIO_WritePin>
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40010800 	.word	0x40010800

08001a7c <LED_GREEN1_RED2>:

void LED_GREEN1_RED2(){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	2102      	movs	r1, #2
 8001a84:	480e      	ldr	r0, [pc, #56]	; (8001ac0 <LED_GREEN1_RED2+0x44>)
 8001a86:	f000 fb68 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	2180      	movs	r1, #128	; 0x80
 8001a8e:	480c      	ldr	r0, [pc, #48]	; (8001ac0 <LED_GREEN1_RED2+0x44>)
 8001a90:	f000 fb63 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8001a94:	2201      	movs	r2, #1
 8001a96:	2108      	movs	r1, #8
 8001a98:	4809      	ldr	r0, [pc, #36]	; (8001ac0 <LED_GREEN1_RED2+0x44>)
 8001a9a:	f000 fb5e 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	2140      	movs	r1, #64	; 0x40
 8001aa2:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <LED_GREEN1_RED2+0x44>)
 8001aa4:	f000 fb59 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2104      	movs	r1, #4
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <LED_GREEN1_RED2+0x44>)
 8001aae:	f000 fb54 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2110      	movs	r1, #16
 8001ab6:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <LED_GREEN1_RED2+0x44>)
 8001ab8:	f000 fb4f 	bl	800215a <HAL_GPIO_WritePin>
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40010800 	.word	0x40010800

08001ac4 <LED_YELLOW1_RED2>:

void LED_YELLOW1_RED2(){
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2102      	movs	r1, #2
 8001acc:	480e      	ldr	r0, [pc, #56]	; (8001b08 <LED_YELLOW1_RED2+0x44>)
 8001ace:	f000 fb44 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	2180      	movs	r1, #128	; 0x80
 8001ad6:	480c      	ldr	r0, [pc, #48]	; (8001b08 <LED_YELLOW1_RED2+0x44>)
 8001ad8:	f000 fb3f 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	2104      	movs	r1, #4
 8001ae0:	4809      	ldr	r0, [pc, #36]	; (8001b08 <LED_YELLOW1_RED2+0x44>)
 8001ae2:	f000 fb3a 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	2140      	movs	r1, #64	; 0x40
 8001aea:	4807      	ldr	r0, [pc, #28]	; (8001b08 <LED_YELLOW1_RED2+0x44>)
 8001aec:	f000 fb35 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2108      	movs	r1, #8
 8001af4:	4804      	ldr	r0, [pc, #16]	; (8001b08 <LED_YELLOW1_RED2+0x44>)
 8001af6:	f000 fb30 	bl	800215a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2110      	movs	r1, #16
 8001afe:	4802      	ldr	r0, [pc, #8]	; (8001b08 <LED_YELLOW1_RED2+0x44>)
 8001b00:	f000 fb2b 	bl	800215a <HAL_GPIO_WritePin>
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40010800 	.word	0x40010800

08001b0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b0c:	f7ff ff1a 	bl	8001944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b10:	480b      	ldr	r0, [pc, #44]	; (8001b40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b12:	490c      	ldr	r1, [pc, #48]	; (8001b44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b14:	4a0c      	ldr	r2, [pc, #48]	; (8001b48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b18:	e002      	b.n	8001b20 <LoopCopyDataInit>

08001b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1e:	3304      	adds	r3, #4

08001b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b24:	d3f9      	bcc.n	8001b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b26:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b28:	4c09      	ldr	r4, [pc, #36]	; (8001b50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b2c:	e001      	b.n	8001b32 <LoopFillZerobss>

08001b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b30:	3204      	adds	r2, #4

08001b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b34:	d3fb      	bcc.n	8001b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b36:	f001 faf9 	bl	800312c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b3a:	f7ff fce9 	bl	8001510 <main>
  bx lr
 8001b3e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b44:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001b48:	080031d4 	.word	0x080031d4
  ldr r2, =_sbss
 8001b4c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001b50:	20000160 	.word	0x20000160

08001b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b54:	e7fe      	b.n	8001b54 <ADC1_2_IRQHandler>
	...

08001b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_Init+0x28>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <HAL_Init+0x28>)
 8001b62:	f043 0310 	orr.w	r3, r3, #16
 8001b66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b68:	2003      	movs	r0, #3
 8001b6a:	f000 f923 	bl	8001db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6e:	200f      	movs	r0, #15
 8001b70:	f000 f808 	bl	8001b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b74:	f7ff fe5e 	bl	8001834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40022000 	.word	0x40022000

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_InitTick+0x54>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x58>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f93b 	bl	8001e1e <HAL_SYSTICK_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00e      	b.n	8001bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d80a      	bhi.n	8001bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f000 f903 	bl	8001dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc4:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <HAL_InitTick+0x5c>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000068 	.word	0x20000068
 8001bdc:	20000070 	.word	0x20000070
 8001be0:	2000006c 	.word	0x2000006c

08001be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_IncTick+0x1c>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_IncTick+0x20>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a03      	ldr	r2, [pc, #12]	; (8001c04 <HAL_IncTick+0x20>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	20000070 	.word	0x20000070
 8001c04:	2000015c 	.word	0x2000015c

08001c08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c0c:	4b02      	ldr	r3, [pc, #8]	; (8001c18 <HAL_GetTick+0x10>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	2000015c 	.word	0x2000015c

08001c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4e:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	60d3      	str	r3, [r2, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <__NVIC_GetPriorityGrouping+0x18>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	f003 0307 	and.w	r3, r3, #7
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db0b      	blt.n	8001caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	f003 021f 	and.w	r2, r3, #31
 8001c98:	4906      	ldr	r1, [pc, #24]	; (8001cb4 <__NVIC_EnableIRQ+0x34>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	e000e100 	.word	0xe000e100

08001cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	db0a      	blt.n	8001ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	490c      	ldr	r1, [pc, #48]	; (8001d04 <__NVIC_SetPriority+0x4c>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	0112      	lsls	r2, r2, #4
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce0:	e00a      	b.n	8001cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4908      	ldr	r1, [pc, #32]	; (8001d08 <__NVIC_SetPriority+0x50>)
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	3b04      	subs	r3, #4
 8001cf0:	0112      	lsls	r2, r2, #4
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	761a      	strb	r2, [r3, #24]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000e100 	.word	0xe000e100
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f1c3 0307 	rsb	r3, r3, #7
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	bf28      	it	cs
 8001d2a:	2304      	movcs	r3, #4
 8001d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3304      	adds	r3, #4
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d902      	bls.n	8001d3c <NVIC_EncodePriority+0x30>
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3b03      	subs	r3, #3
 8001d3a:	e000      	b.n	8001d3e <NVIC_EncodePriority+0x32>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	f04f 32ff 	mov.w	r2, #4294967295
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	401a      	ands	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	43d9      	mvns	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	4313      	orrs	r3, r2
         );
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	; 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d80:	d301      	bcc.n	8001d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00f      	b.n	8001da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <SysTick_Config+0x40>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8e:	210f      	movs	r1, #15
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f7ff ff90 	bl	8001cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <SysTick_Config+0x40>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <SysTick_Config+0x40>)
 8001da0:	2207      	movs	r2, #7
 8001da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	e000e010 	.word	0xe000e010

08001db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ff2d 	bl	8001c1c <__NVIC_SetPriorityGrouping>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ddc:	f7ff ff42 	bl	8001c64 <__NVIC_GetPriorityGrouping>
 8001de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	6978      	ldr	r0, [r7, #20]
 8001de8:	f7ff ff90 	bl	8001d0c <NVIC_EncodePriority>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff5f 	bl	8001cb8 <__NVIC_SetPriority>
}
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	4603      	mov	r3, r0
 8001e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff35 	bl	8001c80 <__NVIC_EnableIRQ>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ffa2 	bl	8001d70 <SysTick_Config>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b08b      	sub	sp, #44	; 0x2c
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4a:	e148      	b.n	80020de <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	f040 8137 	bne.w	80020d8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4aa3      	ldr	r2, [pc, #652]	; (80020fc <HAL_GPIO_Init+0x2c4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d05e      	beq.n	8001f32 <HAL_GPIO_Init+0xfa>
 8001e74:	4aa1      	ldr	r2, [pc, #644]	; (80020fc <HAL_GPIO_Init+0x2c4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d875      	bhi.n	8001f66 <HAL_GPIO_Init+0x12e>
 8001e7a:	4aa1      	ldr	r2, [pc, #644]	; (8002100 <HAL_GPIO_Init+0x2c8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d058      	beq.n	8001f32 <HAL_GPIO_Init+0xfa>
 8001e80:	4a9f      	ldr	r2, [pc, #636]	; (8002100 <HAL_GPIO_Init+0x2c8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d86f      	bhi.n	8001f66 <HAL_GPIO_Init+0x12e>
 8001e86:	4a9f      	ldr	r2, [pc, #636]	; (8002104 <HAL_GPIO_Init+0x2cc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d052      	beq.n	8001f32 <HAL_GPIO_Init+0xfa>
 8001e8c:	4a9d      	ldr	r2, [pc, #628]	; (8002104 <HAL_GPIO_Init+0x2cc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d869      	bhi.n	8001f66 <HAL_GPIO_Init+0x12e>
 8001e92:	4a9d      	ldr	r2, [pc, #628]	; (8002108 <HAL_GPIO_Init+0x2d0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d04c      	beq.n	8001f32 <HAL_GPIO_Init+0xfa>
 8001e98:	4a9b      	ldr	r2, [pc, #620]	; (8002108 <HAL_GPIO_Init+0x2d0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d863      	bhi.n	8001f66 <HAL_GPIO_Init+0x12e>
 8001e9e:	4a9b      	ldr	r2, [pc, #620]	; (800210c <HAL_GPIO_Init+0x2d4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d046      	beq.n	8001f32 <HAL_GPIO_Init+0xfa>
 8001ea4:	4a99      	ldr	r2, [pc, #612]	; (800210c <HAL_GPIO_Init+0x2d4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d85d      	bhi.n	8001f66 <HAL_GPIO_Init+0x12e>
 8001eaa:	2b12      	cmp	r3, #18
 8001eac:	d82a      	bhi.n	8001f04 <HAL_GPIO_Init+0xcc>
 8001eae:	2b12      	cmp	r3, #18
 8001eb0:	d859      	bhi.n	8001f66 <HAL_GPIO_Init+0x12e>
 8001eb2:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <HAL_GPIO_Init+0x80>)
 8001eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb8:	08001f33 	.word	0x08001f33
 8001ebc:	08001f0d 	.word	0x08001f0d
 8001ec0:	08001f1f 	.word	0x08001f1f
 8001ec4:	08001f61 	.word	0x08001f61
 8001ec8:	08001f67 	.word	0x08001f67
 8001ecc:	08001f67 	.word	0x08001f67
 8001ed0:	08001f67 	.word	0x08001f67
 8001ed4:	08001f67 	.word	0x08001f67
 8001ed8:	08001f67 	.word	0x08001f67
 8001edc:	08001f67 	.word	0x08001f67
 8001ee0:	08001f67 	.word	0x08001f67
 8001ee4:	08001f67 	.word	0x08001f67
 8001ee8:	08001f67 	.word	0x08001f67
 8001eec:	08001f67 	.word	0x08001f67
 8001ef0:	08001f67 	.word	0x08001f67
 8001ef4:	08001f67 	.word	0x08001f67
 8001ef8:	08001f67 	.word	0x08001f67
 8001efc:	08001f15 	.word	0x08001f15
 8001f00:	08001f29 	.word	0x08001f29
 8001f04:	4a82      	ldr	r2, [pc, #520]	; (8002110 <HAL_GPIO_Init+0x2d8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d013      	beq.n	8001f32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f0a:	e02c      	b.n	8001f66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	623b      	str	r3, [r7, #32]
          break;
 8001f12:	e029      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	623b      	str	r3, [r7, #32]
          break;
 8001f1c:	e024      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	3308      	adds	r3, #8
 8001f24:	623b      	str	r3, [r7, #32]
          break;
 8001f26:	e01f      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	330c      	adds	r3, #12
 8001f2e:	623b      	str	r3, [r7, #32]
          break;
 8001f30:	e01a      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	623b      	str	r3, [r7, #32]
          break;
 8001f3e:	e013      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d105      	bne.n	8001f54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f48:	2308      	movs	r3, #8
 8001f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	611a      	str	r2, [r3, #16]
          break;
 8001f52:	e009      	b.n	8001f68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f54:	2308      	movs	r3, #8
 8001f56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	615a      	str	r2, [r3, #20]
          break;
 8001f5e:	e003      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f60:	2300      	movs	r3, #0
 8001f62:	623b      	str	r3, [r7, #32]
          break;
 8001f64:	e000      	b.n	8001f68 <HAL_GPIO_Init+0x130>
          break;
 8001f66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2bff      	cmp	r3, #255	; 0xff
 8001f6c:	d801      	bhi.n	8001f72 <HAL_GPIO_Init+0x13a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	e001      	b.n	8001f76 <HAL_GPIO_Init+0x13e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3304      	adds	r3, #4
 8001f76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2bff      	cmp	r3, #255	; 0xff
 8001f7c:	d802      	bhi.n	8001f84 <HAL_GPIO_Init+0x14c>
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	e002      	b.n	8001f8a <HAL_GPIO_Init+0x152>
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	3b08      	subs	r3, #8
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	210f      	movs	r1, #15
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	fa01 f303 	lsl.w	r3, r1, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	6a39      	ldr	r1, [r7, #32]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 8090 	beq.w	80020d8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fb8:	4b56      	ldr	r3, [pc, #344]	; (8002114 <HAL_GPIO_Init+0x2dc>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	4a55      	ldr	r2, [pc, #340]	; (8002114 <HAL_GPIO_Init+0x2dc>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6193      	str	r3, [r2, #24]
 8001fc4:	4b53      	ldr	r3, [pc, #332]	; (8002114 <HAL_GPIO_Init+0x2dc>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fd0:	4a51      	ldr	r2, [pc, #324]	; (8002118 <HAL_GPIO_Init+0x2e0>)
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a49      	ldr	r2, [pc, #292]	; (800211c <HAL_GPIO_Init+0x2e4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00d      	beq.n	8002018 <HAL_GPIO_Init+0x1e0>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a48      	ldr	r2, [pc, #288]	; (8002120 <HAL_GPIO_Init+0x2e8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d007      	beq.n	8002014 <HAL_GPIO_Init+0x1dc>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a47      	ldr	r2, [pc, #284]	; (8002124 <HAL_GPIO_Init+0x2ec>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d101      	bne.n	8002010 <HAL_GPIO_Init+0x1d8>
 800200c:	2302      	movs	r3, #2
 800200e:	e004      	b.n	800201a <HAL_GPIO_Init+0x1e2>
 8002010:	2303      	movs	r3, #3
 8002012:	e002      	b.n	800201a <HAL_GPIO_Init+0x1e2>
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <HAL_GPIO_Init+0x1e2>
 8002018:	2300      	movs	r3, #0
 800201a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201c:	f002 0203 	and.w	r2, r2, #3
 8002020:	0092      	lsls	r2, r2, #2
 8002022:	4093      	lsls	r3, r2
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800202a:	493b      	ldr	r1, [pc, #236]	; (8002118 <HAL_GPIO_Init+0x2e0>)
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	3302      	adds	r3, #2
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d006      	beq.n	8002052 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002044:	4b38      	ldr	r3, [pc, #224]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	4937      	ldr	r1, [pc, #220]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	608b      	str	r3, [r1, #8]
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002052:	4b35      	ldr	r3, [pc, #212]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	43db      	mvns	r3, r3
 800205a:	4933      	ldr	r1, [pc, #204]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 800205c:	4013      	ands	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800206c:	4b2e      	ldr	r3, [pc, #184]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	492d      	ldr	r1, [pc, #180]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	60cb      	str	r3, [r1, #12]
 8002078:	e006      	b.n	8002088 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800207a:	4b2b      	ldr	r3, [pc, #172]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	43db      	mvns	r3, r3
 8002082:	4929      	ldr	r1, [pc, #164]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 8002084:	4013      	ands	r3, r2
 8002086:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002094:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	4923      	ldr	r1, [pc, #140]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	604b      	str	r3, [r1, #4]
 80020a0:	e006      	b.n	80020b0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020a2:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	491f      	ldr	r1, [pc, #124]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d006      	beq.n	80020ca <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020bc:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4919      	ldr	r1, [pc, #100]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020ca:	4b17      	ldr	r3, [pc, #92]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	4915      	ldr	r1, [pc, #84]	; (8002128 <HAL_GPIO_Init+0x2f0>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	3301      	adds	r3, #1
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f47f aeaf 	bne.w	8001e4c <HAL_GPIO_Init+0x14>
  }
}
 80020ee:	bf00      	nop
 80020f0:	bf00      	nop
 80020f2:	372c      	adds	r7, #44	; 0x2c
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	10320000 	.word	0x10320000
 8002100:	10310000 	.word	0x10310000
 8002104:	10220000 	.word	0x10220000
 8002108:	10210000 	.word	0x10210000
 800210c:	10120000 	.word	0x10120000
 8002110:	10110000 	.word	0x10110000
 8002114:	40021000 	.word	0x40021000
 8002118:	40010000 	.word	0x40010000
 800211c:	40010800 	.word	0x40010800
 8002120:	40010c00 	.word	0x40010c00
 8002124:	40011000 	.word	0x40011000
 8002128:	40010400 	.word	0x40010400

0800212c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	887b      	ldrh	r3, [r7, #2]
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	e001      	b.n	800214e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	460b      	mov	r3, r1
 8002164:	807b      	strh	r3, [r7, #2]
 8002166:	4613      	mov	r3, r2
 8002168:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800216a:	787b      	ldrb	r3, [r7, #1]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002170:	887a      	ldrh	r2, [r7, #2]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002176:	e003      	b.n	8002180 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	041a      	lsls	r2, r3, #16
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	611a      	str	r2, [r3, #16]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr

0800218a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800218a:	b480      	push	{r7}
 800218c:	b085      	sub	sp, #20
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800219c:	887a      	ldrh	r2, [r7, #2]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4013      	ands	r3, r2
 80021a2:	041a      	lsls	r2, r3, #16
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	43d9      	mvns	r1, r3
 80021a8:	887b      	ldrh	r3, [r7, #2]
 80021aa:	400b      	ands	r3, r1
 80021ac:	431a      	orrs	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	611a      	str	r2, [r3, #16]
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e26c      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8087 	beq.w	80022ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021dc:	4b92      	ldr	r3, [pc, #584]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d00c      	beq.n	8002202 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e8:	4b8f      	ldr	r3, [pc, #572]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d112      	bne.n	800221a <HAL_RCC_OscConfig+0x5e>
 80021f4:	4b8c      	ldr	r3, [pc, #560]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002200:	d10b      	bne.n	800221a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002202:	4b89      	ldr	r3, [pc, #548]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d06c      	beq.n	80022e8 <HAL_RCC_OscConfig+0x12c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d168      	bne.n	80022e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e246      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x76>
 8002224:	4b80      	ldr	r3, [pc, #512]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a7f      	ldr	r2, [pc, #508]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800222a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	e02e      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x98>
 800223a:	4b7b      	ldr	r3, [pc, #492]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a7a      	ldr	r2, [pc, #488]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b78      	ldr	r3, [pc, #480]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a77      	ldr	r2, [pc, #476]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800224c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e01d      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0xbc>
 800225e:	4b72      	ldr	r3, [pc, #456]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a71      	ldr	r2, [pc, #452]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b6f      	ldr	r3, [pc, #444]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a6e      	ldr	r2, [pc, #440]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e00b      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002278:	4b6b      	ldr	r3, [pc, #428]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a6a      	ldr	r2, [pc, #424]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800227e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b68      	ldr	r3, [pc, #416]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a67      	ldr	r2, [pc, #412]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800228a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d013      	beq.n	80022c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff fcb6 	bl	8001c08 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a0:	f7ff fcb2 	bl	8001c08 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e1fa      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b5d      	ldr	r3, [pc, #372]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0xe4>
 80022be:	e014      	b.n	80022ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff fca2 	bl	8001c08 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c8:	f7ff fc9e 	bl	8001c08 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e1e6      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	4b53      	ldr	r3, [pc, #332]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x10c>
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d063      	beq.n	80023be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f6:	4b4c      	ldr	r3, [pc, #304]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b08      	cmp	r3, #8
 800230c:	d11c      	bne.n	8002348 <HAL_RCC_OscConfig+0x18c>
 800230e:	4b46      	ldr	r3, [pc, #280]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d116      	bne.n	8002348 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	4b43      	ldr	r3, [pc, #268]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_RCC_OscConfig+0x176>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e1ba      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002332:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4939      	ldr	r1, [pc, #228]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002346:	e03a      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002350:	4b36      	ldr	r3, [pc, #216]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7ff fc57 	bl	8001c08 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235e:	f7ff fc53 	bl	8001c08 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e19b      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4927      	ldr	r1, [pc, #156]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002392:	4b26      	ldr	r3, [pc, #152]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7ff fc36 	bl	8001c08 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a0:	f7ff fc32 	bl	8001c08 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e17a      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d03a      	beq.n	8002440 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d019      	beq.n	8002406 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <HAL_RCC_OscConfig+0x274>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d8:	f7ff fc16 	bl	8001c08 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e0:	f7ff fc12 	bl	8001c08 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e15a      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023fe:	2001      	movs	r0, #1
 8002400:	f000 fa9a 	bl	8002938 <RCC_Delay>
 8002404:	e01c      	b.n	8002440 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_RCC_OscConfig+0x274>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240c:	f7ff fbfc 	bl	8001c08 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002412:	e00f      	b.n	8002434 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002414:	f7ff fbf8 	bl	8001c08 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d908      	bls.n	8002434 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e140      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	42420000 	.word	0x42420000
 8002430:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	4b9e      	ldr	r3, [pc, #632]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e9      	bne.n	8002414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80a6 	beq.w	800259a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002452:	4b97      	ldr	r3, [pc, #604]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10d      	bne.n	800247a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	4b94      	ldr	r3, [pc, #592]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	4a93      	ldr	r2, [pc, #588]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002468:	61d3      	str	r3, [r2, #28]
 800246a:	4b91      	ldr	r3, [pc, #580]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002476:	2301      	movs	r3, #1
 8002478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4b8e      	ldr	r3, [pc, #568]	; (80026b4 <HAL_RCC_OscConfig+0x4f8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002486:	4b8b      	ldr	r3, [pc, #556]	; (80026b4 <HAL_RCC_OscConfig+0x4f8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a8a      	ldr	r2, [pc, #552]	; (80026b4 <HAL_RCC_OscConfig+0x4f8>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7ff fbb9 	bl	8001c08 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7ff fbb5 	bl	8001c08 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b64      	cmp	r3, #100	; 0x64
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e0fd      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	4b81      	ldr	r3, [pc, #516]	; (80026b4 <HAL_RCC_OscConfig+0x4f8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d106      	bne.n	80024ce <HAL_RCC_OscConfig+0x312>
 80024c0:	4b7b      	ldr	r3, [pc, #492]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4a7a      	ldr	r2, [pc, #488]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6213      	str	r3, [r2, #32]
 80024cc:	e02d      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x334>
 80024d6:	4b76      	ldr	r3, [pc, #472]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4a75      	ldr	r2, [pc, #468]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	6213      	str	r3, [r2, #32]
 80024e2:	4b73      	ldr	r3, [pc, #460]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	4a72      	ldr	r2, [pc, #456]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	f023 0304 	bic.w	r3, r3, #4
 80024ec:	6213      	str	r3, [r2, #32]
 80024ee:	e01c      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d10c      	bne.n	8002512 <HAL_RCC_OscConfig+0x356>
 80024f8:	4b6d      	ldr	r3, [pc, #436]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	4a6c      	ldr	r2, [pc, #432]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	6213      	str	r3, [r2, #32]
 8002504:	4b6a      	ldr	r3, [pc, #424]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4a69      	ldr	r2, [pc, #420]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6213      	str	r3, [r2, #32]
 8002510:	e00b      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 8002512:	4b67      	ldr	r3, [pc, #412]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a66      	ldr	r2, [pc, #408]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	4b64      	ldr	r3, [pc, #400]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a63      	ldr	r2, [pc, #396]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d015      	beq.n	800255e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7ff fb69 	bl	8001c08 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7ff fb65 	bl	8001c08 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0ab      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002550:	4b57      	ldr	r3, [pc, #348]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ee      	beq.n	800253a <HAL_RCC_OscConfig+0x37e>
 800255c:	e014      	b.n	8002588 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7ff fb53 	bl	8001c08 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7ff fb4f 	bl	8001c08 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e095      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257c:	4b4c      	ldr	r3, [pc, #304]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1ee      	bne.n	8002566 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4b48      	ldr	r3, [pc, #288]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	4a47      	ldr	r2, [pc, #284]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002598:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8081 	beq.w	80026a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a4:	4b42      	ldr	r3, [pc, #264]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d061      	beq.n	8002674 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d146      	bne.n	8002646 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b8:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <HAL_RCC_OscConfig+0x4fc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7ff fb23 	bl	8001c08 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c6:	f7ff fb1f 	bl	8001c08 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e067      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d8:	4b35      	ldr	r3, [pc, #212]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ec:	d108      	bne.n	8002600 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ee:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	492d      	ldr	r1, [pc, #180]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002600:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a19      	ldr	r1, [r3, #32]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	430b      	orrs	r3, r1
 8002612:	4927      	ldr	r1, [pc, #156]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002618:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <HAL_RCC_OscConfig+0x4fc>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7ff faf3 	bl	8001c08 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002626:	f7ff faef 	bl	8001c08 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e037      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x46a>
 8002644:	e02f      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002646:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <HAL_RCC_OscConfig+0x4fc>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7ff fadc 	bl	8001c08 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7ff fad8 	bl	8001c08 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e020      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002666:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x498>
 8002672:	e018      	b.n	80026a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e013      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_RCC_OscConfig+0x4f4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	429a      	cmp	r2, r3
 8002692:	d106      	bne.n	80026a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269e:	429a      	cmp	r2, r3
 80026a0:	d001      	beq.n	80026a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40007000 	.word	0x40007000
 80026b8:	42420060 	.word	0x42420060

080026bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0d0      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d0:	4b6a      	ldr	r3, [pc, #424]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d910      	bls.n	8002700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	4b67      	ldr	r3, [pc, #412]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 0207 	bic.w	r2, r3, #7
 80026e6:	4965      	ldr	r1, [pc, #404]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b63      	ldr	r3, [pc, #396]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0b8      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002718:	4b59      	ldr	r3, [pc, #356]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a58      	ldr	r2, [pc, #352]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002722:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002730:	4b53      	ldr	r3, [pc, #332]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a52      	ldr	r2, [pc, #328]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800273a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800273c:	4b50      	ldr	r3, [pc, #320]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	494d      	ldr	r1, [pc, #308]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d040      	beq.n	80027dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d107      	bne.n	8002772 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	4b47      	ldr	r3, [pc, #284]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d115      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e07f      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277a:	4b41      	ldr	r3, [pc, #260]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e073      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278a:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e06b      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279a:	4b39      	ldr	r3, [pc, #228]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f023 0203 	bic.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4936      	ldr	r1, [pc, #216]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ac:	f7ff fa2c 	bl	8001c08 <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b4:	f7ff fa28 	bl	8001c08 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e053      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	4b2d      	ldr	r3, [pc, #180]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 020c 	and.w	r2, r3, #12
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	429a      	cmp	r2, r3
 80027da:	d1eb      	bne.n	80027b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d210      	bcs.n	800280c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0207 	bic.w	r2, r3, #7
 80027f2:	4922      	ldr	r1, [pc, #136]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b20      	ldr	r3, [pc, #128]	; (800287c <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e032      	b.n	8002872 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002818:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4916      	ldr	r1, [pc, #88]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	490e      	ldr	r1, [pc, #56]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800284a:	f000 f821 	bl	8002890 <HAL_RCC_GetSysClockFreq>
 800284e:	4602      	mov	r2, r0
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	490a      	ldr	r1, [pc, #40]	; (8002884 <HAL_RCC_ClockConfig+0x1c8>)
 800285c:	5ccb      	ldrb	r3, [r1, r3]
 800285e:	fa22 f303 	lsr.w	r3, r2, r3
 8002862:	4a09      	ldr	r2, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x1cc>)
 8002864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1d0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff f98a 	bl	8001b84 <HAL_InitTick>

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40022000 	.word	0x40022000
 8002880:	40021000 	.word	0x40021000
 8002884:	080031a8 	.word	0x080031a8
 8002888:	20000068 	.word	0x20000068
 800288c:	2000006c 	.word	0x2000006c

08002890 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	2300      	movs	r3, #0
 80028a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <HAL_RCC_GetSysClockFreq+0x94>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d002      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0x30>
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d003      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0x36>
 80028be:	e027      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_RCC_GetSysClockFreq+0x98>)
 80028c2:	613b      	str	r3, [r7, #16]
      break;
 80028c4:	e027      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	0c9b      	lsrs	r3, r3, #18
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	4a17      	ldr	r2, [pc, #92]	; (800292c <HAL_RCC_GetSysClockFreq+0x9c>)
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
 80028d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d010      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_RCC_GetSysClockFreq+0x94>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	0c5b      	lsrs	r3, r3, #17
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	4a11      	ldr	r2, [pc, #68]	; (8002930 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028ea:	5cd3      	ldrb	r3, [r2, r3]
 80028ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <HAL_RCC_GetSysClockFreq+0x98>)
 80028f2:	fb02 f203 	mul.w	r2, r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e004      	b.n	800290a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a0c      	ldr	r2, [pc, #48]	; (8002934 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002904:	fb02 f303 	mul.w	r3, r2, r3
 8002908:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	613b      	str	r3, [r7, #16]
      break;
 800290e:	e002      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_GetSysClockFreq+0x98>)
 8002912:	613b      	str	r3, [r7, #16]
      break;
 8002914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002916:	693b      	ldr	r3, [r7, #16]
}
 8002918:	4618      	mov	r0, r3
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000
 8002928:	007a1200 	.word	0x007a1200
 800292c:	080031b8 	.word	0x080031b8
 8002930:	080031c8 	.word	0x080031c8
 8002934:	003d0900 	.word	0x003d0900

08002938 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002940:	4b0a      	ldr	r3, [pc, #40]	; (800296c <RCC_Delay+0x34>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <RCC_Delay+0x38>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	0a5b      	lsrs	r3, r3, #9
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	fb02 f303 	mul.w	r3, r2, r3
 8002952:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002954:	bf00      	nop
  }
  while (Delay --);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1e5a      	subs	r2, r3, #1
 800295a:	60fa      	str	r2, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f9      	bne.n	8002954 <RCC_Delay+0x1c>
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	20000068 	.word	0x20000068
 8002970:	10624dd3 	.word	0x10624dd3

08002974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e041      	b.n	8002a0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe ff7c 	bl	8001898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3304      	adds	r3, #4
 80029b0:	4619      	mov	r1, r3
 80029b2:	4610      	mov	r0, r2
 80029b4:	f000 fa56 	bl	8002e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d001      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e035      	b.n	8002a98 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a16      	ldr	r2, [pc, #88]	; (8002aa4 <HAL_TIM_Base_Start_IT+0x90>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d009      	beq.n	8002a62 <HAL_TIM_Base_Start_IT+0x4e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a56:	d004      	beq.n	8002a62 <HAL_TIM_Base_Start_IT+0x4e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a12      	ldr	r2, [pc, #72]	; (8002aa8 <HAL_TIM_Base_Start_IT+0x94>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d111      	bne.n	8002a86 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b06      	cmp	r3, #6
 8002a72:	d010      	beq.n	8002a96 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a84:	e007      	b.n	8002a96 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0201 	orr.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40000400 	.word	0x40000400

08002aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d020      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d01b      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0202 	mvn.w	r2, #2
 8002ae0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f998 	bl	8002e2c <HAL_TIM_IC_CaptureCallback>
 8002afc:	e005      	b.n	8002b0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f98b 	bl	8002e1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f99a 	bl	8002e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d020      	beq.n	8002b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d01b      	beq.n	8002b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0204 	mvn.w	r2, #4
 8002b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f972 	bl	8002e2c <HAL_TIM_IC_CaptureCallback>
 8002b48:	e005      	b.n	8002b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f965 	bl	8002e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f974 	bl	8002e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d020      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01b      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0208 	mvn.w	r2, #8
 8002b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2204      	movs	r2, #4
 8002b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f94c 	bl	8002e2c <HAL_TIM_IC_CaptureCallback>
 8002b94:	e005      	b.n	8002ba2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f93f 	bl	8002e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f94e 	bl	8002e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d020      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01b      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0210 	mvn.w	r2, #16
 8002bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2208      	movs	r2, #8
 8002bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f926 	bl	8002e2c <HAL_TIM_IC_CaptureCallback>
 8002be0:	e005      	b.n	8002bee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f919 	bl	8002e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f928 	bl	8002e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00c      	beq.n	8002c18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d007      	beq.n	8002c18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0201 	mvn.w	r2, #1
 8002c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7fe fd92 	bl	800173c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00c      	beq.n	8002c3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fa6f 	bl	800311a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00c      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f8f8 	bl	8002e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00c      	beq.n	8002c84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d007      	beq.n	8002c84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0220 	mvn.w	r2, #32
 8002c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fa42 	bl	8003108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c84:	bf00      	nop
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e0b4      	b.n	8002e12 <HAL_TIM_ConfigClockSource+0x186>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce0:	d03e      	beq.n	8002d60 <HAL_TIM_ConfigClockSource+0xd4>
 8002ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce6:	f200 8087 	bhi.w	8002df8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cee:	f000 8086 	beq.w	8002dfe <HAL_TIM_ConfigClockSource+0x172>
 8002cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf6:	d87f      	bhi.n	8002df8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf8:	2b70      	cmp	r3, #112	; 0x70
 8002cfa:	d01a      	beq.n	8002d32 <HAL_TIM_ConfigClockSource+0xa6>
 8002cfc:	2b70      	cmp	r3, #112	; 0x70
 8002cfe:	d87b      	bhi.n	8002df8 <HAL_TIM_ConfigClockSource+0x16c>
 8002d00:	2b60      	cmp	r3, #96	; 0x60
 8002d02:	d050      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x11a>
 8002d04:	2b60      	cmp	r3, #96	; 0x60
 8002d06:	d877      	bhi.n	8002df8 <HAL_TIM_ConfigClockSource+0x16c>
 8002d08:	2b50      	cmp	r3, #80	; 0x50
 8002d0a:	d03c      	beq.n	8002d86 <HAL_TIM_ConfigClockSource+0xfa>
 8002d0c:	2b50      	cmp	r3, #80	; 0x50
 8002d0e:	d873      	bhi.n	8002df8 <HAL_TIM_ConfigClockSource+0x16c>
 8002d10:	2b40      	cmp	r3, #64	; 0x40
 8002d12:	d058      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x13a>
 8002d14:	2b40      	cmp	r3, #64	; 0x40
 8002d16:	d86f      	bhi.n	8002df8 <HAL_TIM_ConfigClockSource+0x16c>
 8002d18:	2b30      	cmp	r3, #48	; 0x30
 8002d1a:	d064      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d1c:	2b30      	cmp	r3, #48	; 0x30
 8002d1e:	d86b      	bhi.n	8002df8 <HAL_TIM_ConfigClockSource+0x16c>
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d060      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d867      	bhi.n	8002df8 <HAL_TIM_ConfigClockSource+0x16c>
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d05c      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d05a      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0x15a>
 8002d30:	e062      	b.n	8002df8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6899      	ldr	r1, [r3, #8]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f000 f96a 	bl	800301a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	609a      	str	r2, [r3, #8]
      break;
 8002d5e:	e04f      	b.n	8002e00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	6899      	ldr	r1, [r3, #8]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f000 f953 	bl	800301a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d82:	609a      	str	r2, [r3, #8]
      break;
 8002d84:	e03c      	b.n	8002e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6859      	ldr	r1, [r3, #4]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	461a      	mov	r2, r3
 8002d94:	f000 f8ca 	bl	8002f2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2150      	movs	r1, #80	; 0x50
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f921 	bl	8002fe6 <TIM_ITRx_SetConfig>
      break;
 8002da4:	e02c      	b.n	8002e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6859      	ldr	r1, [r3, #4]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	461a      	mov	r2, r3
 8002db4:	f000 f8e8 	bl	8002f88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2160      	movs	r1, #96	; 0x60
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 f911 	bl	8002fe6 <TIM_ITRx_SetConfig>
      break;
 8002dc4:	e01c      	b.n	8002e00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6859      	ldr	r1, [r3, #4]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f000 f8aa 	bl	8002f2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2140      	movs	r1, #64	; 0x40
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 f901 	bl	8002fe6 <TIM_ITRx_SetConfig>
      break;
 8002de4:	e00c      	b.n	8002e00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4619      	mov	r1, r3
 8002df0:	4610      	mov	r0, r2
 8002df2:	f000 f8f8 	bl	8002fe6 <TIM_ITRx_SetConfig>
      break;
 8002df6:	e003      	b.n	8002e00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002dfc:	e000      	b.n	8002e00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002dfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr

08002e3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr
	...

08002e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a2b      	ldr	r2, [pc, #172]	; (8002f24 <TIM_Base_SetConfig+0xc0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d007      	beq.n	8002e8c <TIM_Base_SetConfig+0x28>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e82:	d003      	beq.n	8002e8c <TIM_Base_SetConfig+0x28>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a28      	ldr	r2, [pc, #160]	; (8002f28 <TIM_Base_SetConfig+0xc4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d108      	bne.n	8002e9e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a20      	ldr	r2, [pc, #128]	; (8002f24 <TIM_Base_SetConfig+0xc0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d007      	beq.n	8002eb6 <TIM_Base_SetConfig+0x52>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eac:	d003      	beq.n	8002eb6 <TIM_Base_SetConfig+0x52>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <TIM_Base_SetConfig+0xc4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d108      	bne.n	8002ec8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a0d      	ldr	r2, [pc, #52]	; (8002f24 <TIM_Base_SetConfig+0xc0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d103      	bne.n	8002efc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f023 0201 	bic.w	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	611a      	str	r2, [r3, #16]
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr
 8002f24:	40012c00 	.word	0x40012c00
 8002f28:	40000400 	.word	0x40000400

08002f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	f023 0201 	bic.w	r2, r3, #1
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f023 030a 	bic.w	r3, r3, #10
 8002f68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	621a      	str	r2, [r3, #32]
}
 8002f7e:	bf00      	nop
 8002f80:	371c      	adds	r7, #28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	f023 0210 	bic.w	r2, r3, #16
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	031b      	lsls	r3, r3, #12
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fc4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	621a      	str	r2, [r3, #32]
}
 8002fdc:	bf00      	nop
 8002fde:	371c      	adds	r7, #28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b085      	sub	sp, #20
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4313      	orrs	r3, r2
 8003004:	f043 0307 	orr.w	r3, r3, #7
 8003008:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	609a      	str	r2, [r3, #8]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr

0800301a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800301a:	b480      	push	{r7}
 800301c:	b087      	sub	sp, #28
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003034:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	021a      	lsls	r2, r3, #8
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	431a      	orrs	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4313      	orrs	r3, r2
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	609a      	str	r2, [r3, #8]
}
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr

08003058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800306c:	2302      	movs	r3, #2
 800306e:	e041      	b.n	80030f4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003096:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a14      	ldr	r2, [pc, #80]	; (8003100 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d009      	beq.n	80030c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030bc:	d004      	beq.n	80030c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a10      	ldr	r2, [pc, #64]	; (8003104 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d10c      	bne.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40012c00 	.word	0x40012c00
 8003104:	40000400 	.word	0x40000400

08003108 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr

0800311a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <__libc_init_array>:
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	2600      	movs	r6, #0
 8003130:	4d0c      	ldr	r5, [pc, #48]	; (8003164 <__libc_init_array+0x38>)
 8003132:	4c0d      	ldr	r4, [pc, #52]	; (8003168 <__libc_init_array+0x3c>)
 8003134:	1b64      	subs	r4, r4, r5
 8003136:	10a4      	asrs	r4, r4, #2
 8003138:	42a6      	cmp	r6, r4
 800313a:	d109      	bne.n	8003150 <__libc_init_array+0x24>
 800313c:	f000 f822 	bl	8003184 <_init>
 8003140:	2600      	movs	r6, #0
 8003142:	4d0a      	ldr	r5, [pc, #40]	; (800316c <__libc_init_array+0x40>)
 8003144:	4c0a      	ldr	r4, [pc, #40]	; (8003170 <__libc_init_array+0x44>)
 8003146:	1b64      	subs	r4, r4, r5
 8003148:	10a4      	asrs	r4, r4, #2
 800314a:	42a6      	cmp	r6, r4
 800314c:	d105      	bne.n	800315a <__libc_init_array+0x2e>
 800314e:	bd70      	pop	{r4, r5, r6, pc}
 8003150:	f855 3b04 	ldr.w	r3, [r5], #4
 8003154:	4798      	blx	r3
 8003156:	3601      	adds	r6, #1
 8003158:	e7ee      	b.n	8003138 <__libc_init_array+0xc>
 800315a:	f855 3b04 	ldr.w	r3, [r5], #4
 800315e:	4798      	blx	r3
 8003160:	3601      	adds	r6, #1
 8003162:	e7f2      	b.n	800314a <__libc_init_array+0x1e>
 8003164:	080031cc 	.word	0x080031cc
 8003168:	080031cc 	.word	0x080031cc
 800316c:	080031cc 	.word	0x080031cc
 8003170:	080031d0 	.word	0x080031d0

08003174 <memset>:
 8003174:	4603      	mov	r3, r0
 8003176:	4402      	add	r2, r0
 8003178:	4293      	cmp	r3, r2
 800317a:	d100      	bne.n	800317e <memset+0xa>
 800317c:	4770      	bx	lr
 800317e:	f803 1b01 	strb.w	r1, [r3], #1
 8003182:	e7f9      	b.n	8003178 <memset+0x4>

08003184 <_init>:
 8003184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003186:	bf00      	nop
 8003188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318a:	bc08      	pop	{r3}
 800318c:	469e      	mov	lr, r3
 800318e:	4770      	bx	lr

08003190 <_fini>:
 8003190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003192:	bf00      	nop
 8003194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003196:	bc08      	pop	{r3}
 8003198:	469e      	mov	lr, r3
 800319a:	4770      	bx	lr
